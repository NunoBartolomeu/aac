-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul_matrixmul_Pipeline_Row is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce1 : OUT STD_LOGIC;
    res_we1 : OUT STD_LOGIC;
    res_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sext_ln16 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln16_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln16_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln16_3 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln16_4 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln16_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln16_6 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln16_7 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln16_8 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of matrixmul_matrixmul_Pipeline_Row is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln9_reg_408 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal sext_ln16_8_cast_fu_184_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln16_8_cast_reg_363 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln16_7_cast_fu_188_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln16_7_cast_reg_368 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln16_6_cast_fu_192_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln16_6_cast_reg_373 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln16_5_cast_fu_196_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln16_5_cast_reg_378 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln16_4_cast_fu_200_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln16_4_cast_reg_383 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln16_3_cast_fu_204_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln16_3_cast_reg_388 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln16_2_cast_fu_208_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln16_2_cast_reg_393 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln16_1_cast_fu_212_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln16_1_cast_reg_398 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln16_cast_fu_216_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln16_cast_reg_403 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln9_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_408_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_252_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_412 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_cast_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_417 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_417_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_417_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast2_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast2_reg_427 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast2_reg_427_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast2_reg_427_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast1_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast1_reg_437 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal p_cast1_reg_437_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal a_load_reg_447 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln16_11_fu_289_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln16_9_fu_293_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln16_9_reg_459 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln16_10_fu_296_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln16_6_fu_300_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln16_6_reg_472 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln16_fu_305_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln16_3_fu_309_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_313_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_320_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_327_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_349_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln16_5_reg_502 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal i_fu_60 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal add_ln9_fu_234_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_333_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_341_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_244_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_cast_fu_240_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_7_fu_263_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_6_fu_279_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln16_6_fu_300_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln16_fu_305_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln16_fu_305_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln16_3_fu_309_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln16_3_fu_309_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_313_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_313_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_320_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_320_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_327_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_327_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_333_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_333_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_341_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_341_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_349_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_349_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to3 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matrixmul_mul_8s_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrixmul_mac_muladd_8s_8s_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrixmul_mac_muladd_8s_8s_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrixmul_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_8s_8s_16_1_1_U1 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => a_load_reg_447,
        din1 => mul_ln16_6_fu_300_p1,
        dout => mul_ln16_6_fu_300_p2);

    mul_8s_8s_16_1_1_U2 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln16_fu_305_p0,
        din1 => mul_ln16_fu_305_p1,
        dout => mul_ln16_fu_305_p2);

    mul_8s_8s_16_1_1_U3 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln16_3_fu_309_p0,
        din1 => mul_ln16_3_fu_309_p1,
        dout => mul_ln16_3_fu_309_p2);

    mac_muladd_8s_8s_16s_16_4_1_U4 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_313_p0,
        din1 => grp_fu_313_p1,
        din2 => mul_ln16_fu_305_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_313_p3);

    mac_muladd_8s_8s_16s_16_4_1_U5 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_320_p0,
        din1 => grp_fu_320_p1,
        din2 => mul_ln16_3_fu_309_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_320_p3);

    mac_muladd_8s_8s_16s_16_4_1_U6 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_327_p0,
        din1 => grp_fu_327_p1,
        din2 => mul_ln16_6_reg_472,
        ce => ap_const_logic_1,
        dout => grp_fu_327_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U7 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_333_p0,
        din1 => grp_fu_333_p1,
        din2 => grp_fu_313_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_333_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U8 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_341_p0,
        din1 => grp_fu_341_p1,
        din2 => grp_fu_320_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_341_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U9 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_349_p0,
        din1 => grp_fu_349_p1,
        din2 => grp_fu_327_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_349_p3);

    flow_control_loop_pipe_sequential_init_U : component matrixmul_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    i_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln9_fu_228_p2 = ap_const_lv1_0))) then 
                    i_fu_60 <= add_ln9_fu_234_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_60 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                a_load_reg_447 <= a_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln16_5_reg_502 <= grp_fu_349_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_reg_412 <= empty_fu_252_p2;
                icmp_ln9_reg_408 <= icmp_ln9_fu_228_p2;
                icmp_ln9_reg_408_pp0_iter1_reg <= icmp_ln9_reg_408;
                mul_ln16_6_reg_472 <= mul_ln16_6_fu_300_p2;
                    p_cast2_reg_427(3 downto 0) <= p_cast2_fu_269_p1(3 downto 0);
                    p_cast2_reg_427_pp0_iter1_reg(3 downto 0) <= p_cast2_reg_427(3 downto 0);
                    p_cast2_reg_427_pp0_iter2_reg(3 downto 0) <= p_cast2_reg_427_pp0_iter1_reg(3 downto 0);
                    p_cast_reg_417(3 downto 0) <= p_cast_fu_258_p1(3 downto 0);
                    p_cast_reg_417_pp0_iter1_reg(3 downto 0) <= p_cast_reg_417(3 downto 0);
                    p_cast_reg_417_pp0_iter2_reg(3 downto 0) <= p_cast_reg_417_pp0_iter1_reg(3 downto 0);
                sext_ln16_1_cast_reg_398 <= sext_ln16_1_cast_fu_212_p1;
                sext_ln16_2_cast_reg_393 <= sext_ln16_2_cast_fu_208_p1;
                sext_ln16_3_cast_reg_388 <= sext_ln16_3_cast_fu_204_p1;
                sext_ln16_4_cast_reg_383 <= sext_ln16_4_cast_fu_200_p1;
                sext_ln16_5_cast_reg_378 <= sext_ln16_5_cast_fu_196_p1;
                sext_ln16_6_cast_reg_373 <= sext_ln16_6_cast_fu_192_p1;
                sext_ln16_7_cast_reg_368 <= sext_ln16_7_cast_fu_188_p1;
                sext_ln16_8_cast_reg_363 <= sext_ln16_8_cast_fu_184_p1;
                sext_ln16_9_reg_459 <= sext_ln16_9_fu_293_p1;
                sext_ln16_cast_reg_403 <= sext_ln16_cast_fu_216_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    p_cast1_reg_437(3 downto 0) <= p_cast1_fu_284_p1(3 downto 0);
                    p_cast1_reg_437_pp0_iter1_reg(3 downto 0) <= p_cast1_reg_437(3 downto 0);
            end if;
        end if;
    end process;
    p_cast_reg_417(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_417_pp0_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_417_pp0_iter2_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast2_reg_427(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast2_reg_427_pp0_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast2_reg_427_pp0_iter2_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast1_reg_437(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast1_reg_437_pp0_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter2_stage0, ap_idle_pp0_0to1, ap_idle_pp0_1to3, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, p_cast2_fu_269_p1, p_cast1_fu_284_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                a_address0 <= p_cast1_fu_284_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                a_address0 <= p_cast2_fu_269_p1(4 - 1 downto 0);
            else 
                a_address0 <= "XXXX";
            end if;
        else 
            a_address0 <= "XXXX";
        end if; 
    end process;

    a_address1 <= p_cast_fu_258_p1(4 - 1 downto 0);

    a_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln9_fu_234_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln9_reg_408)
    begin
        if (((icmp_ln9_reg_408 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln9_reg_408_pp0_iter1_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_reg_408_pp0_iter1_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_60, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_60;
        end if; 
    end process;

    empty_6_fu_279_p2 <= std_logic_vector(unsigned(empty_reg_412) + unsigned(ap_const_lv4_1));
    empty_7_fu_263_p2 <= std_logic_vector(unsigned(empty_fu_252_p2) + unsigned(ap_const_lv4_2));
    empty_fu_252_p2 <= std_logic_vector(unsigned(tmp_fu_244_p3) - unsigned(i_cast_fu_240_p1));
    grp_fu_313_p0 <= sext_ln16_11_fu_289_p1(8 - 1 downto 0);
    grp_fu_313_p1 <= sext_ln16_2_cast_reg_393(8 - 1 downto 0);
    grp_fu_320_p0 <= sext_ln16_11_fu_289_p1(8 - 1 downto 0);
    grp_fu_320_p1 <= sext_ln16_5_cast_reg_378(8 - 1 downto 0);
    grp_fu_327_p0 <= sext_ln16_11_fu_289_p1(8 - 1 downto 0);
    grp_fu_327_p1 <= sext_ln16_8_cast_reg_363(8 - 1 downto 0);
    grp_fu_333_p0 <= sext_ln16_10_fu_296_p1(8 - 1 downto 0);
    grp_fu_333_p1 <= sext_ln16_1_cast_reg_398(8 - 1 downto 0);
    grp_fu_341_p0 <= sext_ln16_10_fu_296_p1(8 - 1 downto 0);
    grp_fu_341_p1 <= sext_ln16_4_cast_reg_383(8 - 1 downto 0);
    grp_fu_349_p0 <= sext_ln16_10_fu_296_p1(8 - 1 downto 0);
    grp_fu_349_p1 <= sext_ln16_7_cast_reg_368(8 - 1 downto 0);
    i_cast_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),4));
    icmp_ln9_fu_228_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv2_3) else "0";
    mul_ln16_3_fu_309_p0 <= sext_ln16_9_reg_459(8 - 1 downto 0);
    mul_ln16_3_fu_309_p1 <= sext_ln16_3_cast_reg_388(8 - 1 downto 0);
    mul_ln16_6_fu_300_p1 <= sext_ln16_6_cast_reg_373(8 - 1 downto 0);
    mul_ln16_fu_305_p0 <= sext_ln16_9_reg_459(8 - 1 downto 0);
    mul_ln16_fu_305_p1 <= sext_ln16_cast_reg_403(8 - 1 downto 0);
    p_cast1_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_6_fu_279_p2),64));
    p_cast2_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_7_fu_263_p2),64));
    p_cast_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_252_p2),64));

    res_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, p_cast2_reg_427_pp0_iter2_reg, p_cast1_reg_437_pp0_iter1_reg, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_address0 <= p_cast2_reg_427_pp0_iter2_reg(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            res_address0 <= p_cast1_reg_437_pp0_iter1_reg(4 - 1 downto 0);
        else 
            res_address0 <= "XXXX";
        end if; 
    end process;

    res_address1 <= p_cast_reg_417_pp0_iter2_reg(4 - 1 downto 0);

    res_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            res_ce0 <= ap_const_logic_1;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    res_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            res_ce1 <= ap_const_logic_1;
        else 
            res_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    res_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, add_ln16_5_reg_502, ap_block_pp0_stage0, ap_block_pp0_stage1, grp_fu_341_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_d0 <= add_ln16_5_reg_502;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            res_d0 <= grp_fu_341_p3;
        else 
            res_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    res_d1 <= grp_fu_333_p3;

    res_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            res_we0 <= ap_const_logic_1;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;


    res_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            res_we1 <= ap_const_logic_1;
        else 
            res_we1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln16_10_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_q0),16));

        sext_ln16_11_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_q0),16));

        sext_ln16_1_cast_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln16_1),16));

        sext_ln16_2_cast_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln16_2),16));

        sext_ln16_3_cast_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln16_3),16));

        sext_ln16_4_cast_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln16_4),16));

        sext_ln16_5_cast_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln16_5),16));

        sext_ln16_6_cast_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln16_6),16));

        sext_ln16_7_cast_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln16_7),16));

        sext_ln16_8_cast_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln16_8),16));

        sext_ln16_9_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_load_reg_447),16));

        sext_ln16_cast_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln16),16));

    tmp_fu_244_p3 <= (ap_sig_allocacmp_i_1 & ap_const_lv2_0);
end behav;
