// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul_matrixmul,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.380000,HLS_SYN_LAT=18,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=441,HLS_SYN_LUT=474,HLS_VERSION=2023_2}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1,
        b_address0,
        b_ce0,
        b_q0,
        b_address1,
        b_ce1,
        b_q1,
        res_address0,
        res_ce0,
        res_we0,
        res_d0,
        res_address1,
        res_ce1,
        res_we1,
        res_d1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] a_address0;
output   a_ce0;
input  [7:0] a_q0;
output  [3:0] a_address1;
output   a_ce1;
input  [7:0] a_q1;
output  [3:0] b_address0;
output   b_ce0;
input  [7:0] b_q0;
output  [3:0] b_address1;
output   b_ce1;
input  [7:0] b_q1;
output  [3:0] res_address0;
output   res_ce0;
output   res_we0;
output  [15:0] res_d0;
output  [3:0] res_address1;
output   res_ce1;
output   res_we1;
output  [15:0] res_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] b_address0;
reg b_ce0;
reg[3:0] b_address1;
reg b_ce1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
reg   [7:0] b_load_reg_166;
wire    ap_CS_fsm_state3;
reg   [7:0] b_load_1_reg_181;
reg   [7:0] b_load_2_reg_186;
wire    ap_CS_fsm_state4;
reg   [7:0] b_load_3_reg_201;
reg   [7:0] b_load_4_reg_206;
wire    ap_CS_fsm_state5;
reg   [7:0] b_load_5_reg_221;
reg   [7:0] b_load_6_reg_226;
reg   [7:0] b_load_7_reg_231;
wire    ap_CS_fsm_state6;
reg   [7:0] b_load_8_reg_236;
wire    grp_matrixmul_Pipeline_Row_fu_132_ap_start;
wire    grp_matrixmul_Pipeline_Row_fu_132_ap_done;
wire    grp_matrixmul_Pipeline_Row_fu_132_ap_idle;
wire    grp_matrixmul_Pipeline_Row_fu_132_ap_ready;
wire   [3:0] grp_matrixmul_Pipeline_Row_fu_132_a_address0;
wire    grp_matrixmul_Pipeline_Row_fu_132_a_ce0;
wire   [3:0] grp_matrixmul_Pipeline_Row_fu_132_a_address1;
wire    grp_matrixmul_Pipeline_Row_fu_132_a_ce1;
wire   [3:0] grp_matrixmul_Pipeline_Row_fu_132_res_address0;
wire    grp_matrixmul_Pipeline_Row_fu_132_res_ce0;
wire    grp_matrixmul_Pipeline_Row_fu_132_res_we0;
wire   [15:0] grp_matrixmul_Pipeline_Row_fu_132_res_d0;
wire   [3:0] grp_matrixmul_Pipeline_Row_fu_132_res_address1;
wire    grp_matrixmul_Pipeline_Row_fu_132_res_ce1;
wire    grp_matrixmul_Pipeline_Row_fu_132_res_we1;
wire   [15:0] grp_matrixmul_Pipeline_Row_fu_132_res_d1;
reg    grp_matrixmul_Pipeline_Row_fu_132_ap_start_reg;
wire    ap_CS_fsm_state7;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 grp_matrixmul_Pipeline_Row_fu_132_ap_start_reg = 1'b0;
end

matrixmul_matrixmul_Pipeline_Row grp_matrixmul_Pipeline_Row_fu_132(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matrixmul_Pipeline_Row_fu_132_ap_start),
    .ap_done(grp_matrixmul_Pipeline_Row_fu_132_ap_done),
    .ap_idle(grp_matrixmul_Pipeline_Row_fu_132_ap_idle),
    .ap_ready(grp_matrixmul_Pipeline_Row_fu_132_ap_ready),
    .a_address0(grp_matrixmul_Pipeline_Row_fu_132_a_address0),
    .a_ce0(grp_matrixmul_Pipeline_Row_fu_132_a_ce0),
    .a_q0(a_q0),
    .a_address1(grp_matrixmul_Pipeline_Row_fu_132_a_address1),
    .a_ce1(grp_matrixmul_Pipeline_Row_fu_132_a_ce1),
    .a_q1(a_q1),
    .res_address0(grp_matrixmul_Pipeline_Row_fu_132_res_address0),
    .res_ce0(grp_matrixmul_Pipeline_Row_fu_132_res_ce0),
    .res_we0(grp_matrixmul_Pipeline_Row_fu_132_res_we0),
    .res_d0(grp_matrixmul_Pipeline_Row_fu_132_res_d0),
    .res_address1(grp_matrixmul_Pipeline_Row_fu_132_res_address1),
    .res_ce1(grp_matrixmul_Pipeline_Row_fu_132_res_ce1),
    .res_we1(grp_matrixmul_Pipeline_Row_fu_132_res_we1),
    .res_d1(grp_matrixmul_Pipeline_Row_fu_132_res_d1),
    .sext_ln16(b_load_reg_166),
    .sext_ln16_1(b_load_1_reg_181),
    .sext_ln16_2(b_load_2_reg_186),
    .sext_ln16_3(b_load_3_reg_201),
    .sext_ln16_4(b_load_4_reg_206),
    .sext_ln16_5(b_load_5_reg_221),
    .sext_ln16_6(b_load_6_reg_226),
    .sext_ln16_7(b_load_7_reg_231),
    .sext_ln16_8(b_load_8_reg_236)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matrixmul_Pipeline_Row_fu_132_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_matrixmul_Pipeline_Row_fu_132_ap_start_reg <= 1'b1;
        end else if ((grp_matrixmul_Pipeline_Row_fu_132_ap_ready == 1'b1)) begin
            grp_matrixmul_Pipeline_Row_fu_132_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_load_1_reg_181 <= b_q1;
        b_load_2_reg_186 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_load_3_reg_201 <= b_q0;
        b_load_4_reg_206 <= b_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_load_5_reg_221 <= b_q0;
        b_load_6_reg_226 <= b_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        b_load_7_reg_231 <= b_q0;
        b_load_8_reg_236 <= b_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_load_reg_166 <= b_q0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((grp_matrixmul_Pipeline_Row_fu_132_ap_done == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (grp_matrixmul_Pipeline_Row_fu_132_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (grp_matrixmul_Pipeline_Row_fu_132_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        b_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        b_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        b_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        b_address0 = 64'd0;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        b_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        b_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        b_address1 = 64'd3;
    end else begin
        b_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        b_ce1 = 1'b1;
    end else begin
        b_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (grp_matrixmul_Pipeline_Row_fu_132_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = grp_matrixmul_Pipeline_Row_fu_132_a_address0;

assign a_address1 = grp_matrixmul_Pipeline_Row_fu_132_a_address1;

assign a_ce0 = grp_matrixmul_Pipeline_Row_fu_132_a_ce0;

assign a_ce1 = grp_matrixmul_Pipeline_Row_fu_132_a_ce1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign grp_matrixmul_Pipeline_Row_fu_132_ap_start = grp_matrixmul_Pipeline_Row_fu_132_ap_start_reg;

assign res_address0 = grp_matrixmul_Pipeline_Row_fu_132_res_address0;

assign res_address1 = grp_matrixmul_Pipeline_Row_fu_132_res_address1;

assign res_ce0 = grp_matrixmul_Pipeline_Row_fu_132_res_ce0;

assign res_ce1 = grp_matrixmul_Pipeline_Row_fu_132_res_ce1;

assign res_d0 = grp_matrixmul_Pipeline_Row_fu_132_res_d0;

assign res_d1 = grp_matrixmul_Pipeline_Row_fu_132_res_d1;

assign res_we0 = grp_matrixmul_Pipeline_Row_fu_132_res_we0;

assign res_we1 = grp_matrixmul_Pipeline_Row_fu_132_res_we1;

endmodule //matrixmul
