// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module matrixmul_matrixmul_Pipeline_Row (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1,
        res_address0,
        res_ce0,
        res_we0,
        res_d0,
        res_address1,
        res_ce1,
        res_we1,
        res_d1,
        sext_ln16,
        sext_ln16_1,
        sext_ln16_2,
        sext_ln16_3,
        sext_ln16_4,
        sext_ln16_5,
        sext_ln16_6,
        sext_ln16_7,
        sext_ln16_8
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] a_address0;
output   a_ce0;
input  [7:0] a_q0;
output  [3:0] a_address1;
output   a_ce1;
input  [7:0] a_q1;
output  [3:0] res_address0;
output   res_ce0;
output   res_we0;
output  [15:0] res_d0;
output  [3:0] res_address1;
output   res_ce1;
output   res_we1;
output  [15:0] res_d1;
input  [7:0] sext_ln16;
input  [7:0] sext_ln16_1;
input  [7:0] sext_ln16_2;
input  [7:0] sext_ln16_3;
input  [7:0] sext_ln16_4;
input  [7:0] sext_ln16_5;
input  [7:0] sext_ln16_6;
input  [7:0] sext_ln16_7;
input  [7:0] sext_ln16_8;

reg ap_idle;
reg[3:0] a_address0;
reg a_ce0;
reg a_ce1;
reg[3:0] res_address0;
reg res_ce0;
reg res_we0;
reg[15:0] res_d0;
reg res_ce1;
reg res_we1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln9_reg_408;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire  signed [15:0] sext_ln16_8_cast_fu_184_p1;
reg  signed [15:0] sext_ln16_8_cast_reg_363;
wire    ap_block_pp0_stage0_11001;
wire  signed [15:0] sext_ln16_7_cast_fu_188_p1;
reg  signed [15:0] sext_ln16_7_cast_reg_368;
wire  signed [15:0] sext_ln16_6_cast_fu_192_p1;
reg  signed [15:0] sext_ln16_6_cast_reg_373;
wire  signed [15:0] sext_ln16_5_cast_fu_196_p1;
reg  signed [15:0] sext_ln16_5_cast_reg_378;
wire  signed [15:0] sext_ln16_4_cast_fu_200_p1;
reg  signed [15:0] sext_ln16_4_cast_reg_383;
wire  signed [15:0] sext_ln16_3_cast_fu_204_p1;
reg  signed [15:0] sext_ln16_3_cast_reg_388;
wire  signed [15:0] sext_ln16_2_cast_fu_208_p1;
reg  signed [15:0] sext_ln16_2_cast_reg_393;
wire  signed [15:0] sext_ln16_1_cast_fu_212_p1;
reg  signed [15:0] sext_ln16_1_cast_reg_398;
wire  signed [15:0] sext_ln16_cast_fu_216_p1;
reg  signed [15:0] sext_ln16_cast_reg_403;
wire   [0:0] icmp_ln9_fu_228_p2;
reg   [0:0] icmp_ln9_reg_408_pp0_iter1_reg;
wire   [3:0] empty_fu_252_p2;
reg   [3:0] empty_reg_412;
wire   [63:0] p_cast_fu_258_p1;
reg   [63:0] p_cast_reg_417;
reg   [63:0] p_cast_reg_417_pp0_iter1_reg;
reg   [63:0] p_cast_reg_417_pp0_iter2_reg;
wire   [63:0] p_cast2_fu_269_p1;
reg   [63:0] p_cast2_reg_427;
reg   [63:0] p_cast2_reg_427_pp0_iter1_reg;
reg   [63:0] p_cast2_reg_427_pp0_iter2_reg;
wire   [63:0] p_cast1_fu_284_p1;
reg   [63:0] p_cast1_reg_437;
wire    ap_block_pp0_stage1_11001;
reg   [63:0] p_cast1_reg_437_pp0_iter1_reg;
reg  signed [7:0] a_load_reg_447;
wire  signed [15:0] sext_ln16_11_fu_289_p1;
wire  signed [15:0] sext_ln16_9_fu_293_p1;
reg  signed [15:0] sext_ln16_9_reg_459;
wire  signed [15:0] sext_ln16_10_fu_296_p1;
wire   [15:0] mul_ln16_6_fu_300_p2;
reg  signed [15:0] mul_ln16_6_reg_472;
wire  signed [15:0] mul_ln16_fu_305_p2;
wire  signed [15:0] mul_ln16_3_fu_309_p2;
wire   [15:0] grp_fu_313_p3;
wire   [15:0] grp_fu_320_p3;
wire   [15:0] grp_fu_327_p3;
wire   [15:0] grp_fu_349_p3;
reg  signed [15:0] add_ln16_5_reg_502;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
reg   [1:0] i_fu_60;
wire   [1:0] add_ln9_fu_234_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_i_1;
wire   [15:0] grp_fu_333_p3;
wire   [15:0] grp_fu_341_p3;
wire   [3:0] tmp_fu_244_p3;
wire   [3:0] i_cast_fu_240_p1;
wire   [3:0] empty_7_fu_263_p2;
wire   [3:0] empty_6_fu_279_p2;
wire  signed [7:0] mul_ln16_6_fu_300_p1;
wire  signed [7:0] mul_ln16_fu_305_p0;
wire  signed [7:0] mul_ln16_fu_305_p1;
wire  signed [7:0] mul_ln16_3_fu_309_p0;
wire  signed [7:0] mul_ln16_3_fu_309_p1;
wire  signed [7:0] grp_fu_313_p0;
wire  signed [7:0] grp_fu_313_p1;
wire  signed [7:0] grp_fu_320_p0;
wire  signed [7:0] grp_fu_320_p1;
wire  signed [7:0] grp_fu_327_p0;
wire  signed [7:0] grp_fu_327_p1;
wire  signed [7:0] grp_fu_333_p0;
wire  signed [7:0] grp_fu_333_p1;
wire  signed [7:0] grp_fu_341_p0;
wire  signed [7:0] grp_fu_341_p1;
wire  signed [7:0] grp_fu_349_p0;
wire  signed [7:0] grp_fu_349_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage0;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to3;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 i_fu_60 = 2'd0;
#0 ap_done_reg = 1'b0;
end

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U1(
    .din0(a_load_reg_447),
    .din1(mul_ln16_6_fu_300_p1),
    .dout(mul_ln16_6_fu_300_p2)
);

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U2(
    .din0(mul_ln16_fu_305_p0),
    .din1(mul_ln16_fu_305_p1),
    .dout(mul_ln16_fu_305_p2)
);

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U3(
    .din0(mul_ln16_3_fu_309_p0),
    .din1(mul_ln16_3_fu_309_p1),
    .dout(mul_ln16_3_fu_309_p2)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_313_p0),
    .din1(grp_fu_313_p1),
    .din2(mul_ln16_fu_305_p2),
    .ce(1'b1),
    .dout(grp_fu_313_p3)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_320_p0),
    .din1(grp_fu_320_p1),
    .din2(mul_ln16_3_fu_309_p2),
    .ce(1'b1),
    .dout(grp_fu_320_p3)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_327_p0),
    .din1(grp_fu_327_p1),
    .din2(mul_ln16_6_reg_472),
    .ce(1'b1),
    .dout(grp_fu_327_p3)
);

matrixmul_mac_muladd_8s_8s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16ns_16_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_333_p0),
    .din1(grp_fu_333_p1),
    .din2(grp_fu_313_p3),
    .ce(1'b1),
    .dout(grp_fu_333_p3)
);

matrixmul_mac_muladd_8s_8s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16ns_16_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_341_p0),
    .din1(grp_fu_341_p1),
    .din2(grp_fu_320_p3),
    .ce(1'b1),
    .dout(grp_fu_341_p3)
);

matrixmul_mac_muladd_8s_8s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16ns_16_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_349_p0),
    .din1(grp_fu_349_p1),
    .din2(grp_fu_327_p3),
    .ce(1'b1),
    .dout(grp_fu_349_p3)
);

matrixmul_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln9_fu_228_p2 == 1'd0))) begin
            i_fu_60 <= add_ln9_fu_234_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_60 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_load_reg_447 <= a_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln16_5_reg_502 <= grp_fu_349_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_reg_412 <= empty_fu_252_p2;
        icmp_ln9_reg_408 <= icmp_ln9_fu_228_p2;
        icmp_ln9_reg_408_pp0_iter1_reg <= icmp_ln9_reg_408;
        mul_ln16_6_reg_472 <= mul_ln16_6_fu_300_p2;
        p_cast2_reg_427[3 : 0] <= p_cast2_fu_269_p1[3 : 0];
        p_cast2_reg_427_pp0_iter1_reg[3 : 0] <= p_cast2_reg_427[3 : 0];
        p_cast2_reg_427_pp0_iter2_reg[3 : 0] <= p_cast2_reg_427_pp0_iter1_reg[3 : 0];
        p_cast_reg_417[3 : 0] <= p_cast_fu_258_p1[3 : 0];
        p_cast_reg_417_pp0_iter1_reg[3 : 0] <= p_cast_reg_417[3 : 0];
        p_cast_reg_417_pp0_iter2_reg[3 : 0] <= p_cast_reg_417_pp0_iter1_reg[3 : 0];
        sext_ln16_1_cast_reg_398 <= sext_ln16_1_cast_fu_212_p1;
        sext_ln16_2_cast_reg_393 <= sext_ln16_2_cast_fu_208_p1;
        sext_ln16_3_cast_reg_388 <= sext_ln16_3_cast_fu_204_p1;
        sext_ln16_4_cast_reg_383 <= sext_ln16_4_cast_fu_200_p1;
        sext_ln16_5_cast_reg_378 <= sext_ln16_5_cast_fu_196_p1;
        sext_ln16_6_cast_reg_373 <= sext_ln16_6_cast_fu_192_p1;
        sext_ln16_7_cast_reg_368 <= sext_ln16_7_cast_fu_188_p1;
        sext_ln16_8_cast_reg_363 <= sext_ln16_8_cast_fu_184_p1;
        sext_ln16_9_reg_459 <= sext_ln16_9_fu_293_p1;
        sext_ln16_cast_reg_403 <= sext_ln16_cast_fu_216_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_cast1_reg_437[3 : 0] <= p_cast1_fu_284_p1[3 : 0];
        p_cast1_reg_437_pp0_iter1_reg[3 : 0] <= p_cast1_reg_437[3 : 0];
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            a_address0 = p_cast1_fu_284_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            a_address0 = p_cast2_fu_269_p1;
        end else begin
            a_address0 = 'bx;
        end
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_408 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln9_reg_408_pp0_iter1_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_address0 = p_cast2_reg_427_pp0_iter2_reg;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_address0 = p_cast1_reg_437_pp0_iter1_reg;
    end else begin
        res_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        res_ce0 = 1'b1;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_ce1 = 1'b1;
    end else begin
        res_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_d0 = add_ln16_5_reg_502;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_d0 = grp_fu_341_p3;
    end else begin
        res_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        res_we0 = 1'b1;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_we1 = 1'b1;
    end else begin
        res_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address1 = p_cast_fu_258_p1;

assign add_ln9_fu_234_p2 = (ap_sig_allocacmp_i_1 + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign empty_6_fu_279_p2 = (empty_reg_412 + 4'd1);

assign empty_7_fu_263_p2 = (empty_fu_252_p2 + 4'd2);

assign empty_fu_252_p2 = (tmp_fu_244_p3 - i_cast_fu_240_p1);

assign grp_fu_313_p0 = sext_ln16_11_fu_289_p1;

assign grp_fu_313_p1 = sext_ln16_2_cast_reg_393;

assign grp_fu_320_p0 = sext_ln16_11_fu_289_p1;

assign grp_fu_320_p1 = sext_ln16_5_cast_reg_378;

assign grp_fu_327_p0 = sext_ln16_11_fu_289_p1;

assign grp_fu_327_p1 = sext_ln16_8_cast_reg_363;

assign grp_fu_333_p0 = sext_ln16_10_fu_296_p1;

assign grp_fu_333_p1 = sext_ln16_1_cast_reg_398;

assign grp_fu_341_p0 = sext_ln16_10_fu_296_p1;

assign grp_fu_341_p1 = sext_ln16_4_cast_reg_383;

assign grp_fu_349_p0 = sext_ln16_10_fu_296_p1;

assign grp_fu_349_p1 = sext_ln16_7_cast_reg_368;

assign i_cast_fu_240_p1 = ap_sig_allocacmp_i_1;

assign icmp_ln9_fu_228_p2 = ((ap_sig_allocacmp_i_1 == 2'd3) ? 1'b1 : 1'b0);

assign mul_ln16_3_fu_309_p0 = sext_ln16_9_reg_459;

assign mul_ln16_3_fu_309_p1 = sext_ln16_3_cast_reg_388;

assign mul_ln16_6_fu_300_p1 = sext_ln16_6_cast_reg_373;

assign mul_ln16_fu_305_p0 = sext_ln16_9_reg_459;

assign mul_ln16_fu_305_p1 = sext_ln16_cast_reg_403;

assign p_cast1_fu_284_p1 = empty_6_fu_279_p2;

assign p_cast2_fu_269_p1 = empty_7_fu_263_p2;

assign p_cast_fu_258_p1 = empty_fu_252_p2;

assign res_address1 = p_cast_reg_417_pp0_iter2_reg;

assign res_d1 = grp_fu_333_p3;

assign sext_ln16_10_fu_296_p1 = $signed(a_q0);

assign sext_ln16_11_fu_289_p1 = $signed(a_q0);

assign sext_ln16_1_cast_fu_212_p1 = $signed(sext_ln16_1);

assign sext_ln16_2_cast_fu_208_p1 = $signed(sext_ln16_2);

assign sext_ln16_3_cast_fu_204_p1 = $signed(sext_ln16_3);

assign sext_ln16_4_cast_fu_200_p1 = $signed(sext_ln16_4);

assign sext_ln16_5_cast_fu_196_p1 = $signed(sext_ln16_5);

assign sext_ln16_6_cast_fu_192_p1 = $signed(sext_ln16_6);

assign sext_ln16_7_cast_fu_188_p1 = $signed(sext_ln16_7);

assign sext_ln16_8_cast_fu_184_p1 = $signed(sext_ln16_8);

assign sext_ln16_9_fu_293_p1 = a_load_reg_447;

assign sext_ln16_cast_fu_216_p1 = $signed(sext_ln16);

assign tmp_fu_244_p3 = {{ap_sig_allocacmp_i_1}, {2'd0}};

always @ (posedge ap_clk) begin
    p_cast_reg_417[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_417_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_417_pp0_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast2_reg_427[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast2_reg_427_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast2_reg_427_pp0_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast1_reg_437[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast1_reg_437_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //matrixmul_matrixmul_Pipeline_Row
