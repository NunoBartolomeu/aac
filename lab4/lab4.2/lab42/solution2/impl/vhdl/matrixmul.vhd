-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_ce1 : OUT STD_LOGIC;
    b_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce1 : OUT STD_LOGIC;
    res_we1 : OUT STD_LOGIC;
    res_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul_matrixmul,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.380000,HLS_SYN_LAT=18,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=441,HLS_SYN_LUT=474,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal b_load_reg_166 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal b_load_1_reg_181 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_load_2_reg_186 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal b_load_3_reg_201 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_load_4_reg_206 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal b_load_5_reg_221 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_load_6_reg_226 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_load_7_reg_231 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal b_load_8_reg_236 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_matrixmul_Pipeline_Row_fu_132_ap_start : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row_fu_132_ap_done : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row_fu_132_ap_idle : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row_fu_132_ap_ready : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row_fu_132_a_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrixmul_Pipeline_Row_fu_132_a_ce0 : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row_fu_132_a_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrixmul_Pipeline_Row_fu_132_a_ce1 : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row_fu_132_res_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrixmul_Pipeline_Row_fu_132_res_ce0 : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row_fu_132_res_we0 : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row_fu_132_res_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_matrixmul_Pipeline_Row_fu_132_res_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrixmul_Pipeline_Row_fu_132_res_ce1 : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row_fu_132_res_we1 : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row_fu_132_res_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_matrixmul_Pipeline_Row_fu_132_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matrixmul_matrixmul_Pipeline_Row IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        a_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        a_ce1 : OUT STD_LOGIC;
        a_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        res_ce0 : OUT STD_LOGIC;
        res_we0 : OUT STD_LOGIC;
        res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        res_ce1 : OUT STD_LOGIC;
        res_we1 : OUT STD_LOGIC;
        res_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        sext_ln16 : IN STD_LOGIC_VECTOR (7 downto 0);
        sext_ln16_1 : IN STD_LOGIC_VECTOR (7 downto 0);
        sext_ln16_2 : IN STD_LOGIC_VECTOR (7 downto 0);
        sext_ln16_3 : IN STD_LOGIC_VECTOR (7 downto 0);
        sext_ln16_4 : IN STD_LOGIC_VECTOR (7 downto 0);
        sext_ln16_5 : IN STD_LOGIC_VECTOR (7 downto 0);
        sext_ln16_6 : IN STD_LOGIC_VECTOR (7 downto 0);
        sext_ln16_7 : IN STD_LOGIC_VECTOR (7 downto 0);
        sext_ln16_8 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_matrixmul_Pipeline_Row_fu_132 : component matrixmul_matrixmul_Pipeline_Row
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrixmul_Pipeline_Row_fu_132_ap_start,
        ap_done => grp_matrixmul_Pipeline_Row_fu_132_ap_done,
        ap_idle => grp_matrixmul_Pipeline_Row_fu_132_ap_idle,
        ap_ready => grp_matrixmul_Pipeline_Row_fu_132_ap_ready,
        a_address0 => grp_matrixmul_Pipeline_Row_fu_132_a_address0,
        a_ce0 => grp_matrixmul_Pipeline_Row_fu_132_a_ce0,
        a_q0 => a_q0,
        a_address1 => grp_matrixmul_Pipeline_Row_fu_132_a_address1,
        a_ce1 => grp_matrixmul_Pipeline_Row_fu_132_a_ce1,
        a_q1 => a_q1,
        res_address0 => grp_matrixmul_Pipeline_Row_fu_132_res_address0,
        res_ce0 => grp_matrixmul_Pipeline_Row_fu_132_res_ce0,
        res_we0 => grp_matrixmul_Pipeline_Row_fu_132_res_we0,
        res_d0 => grp_matrixmul_Pipeline_Row_fu_132_res_d0,
        res_address1 => grp_matrixmul_Pipeline_Row_fu_132_res_address1,
        res_ce1 => grp_matrixmul_Pipeline_Row_fu_132_res_ce1,
        res_we1 => grp_matrixmul_Pipeline_Row_fu_132_res_we1,
        res_d1 => grp_matrixmul_Pipeline_Row_fu_132_res_d1,
        sext_ln16 => b_load_reg_166,
        sext_ln16_1 => b_load_1_reg_181,
        sext_ln16_2 => b_load_2_reg_186,
        sext_ln16_3 => b_load_3_reg_201,
        sext_ln16_4 => b_load_4_reg_206,
        sext_ln16_5 => b_load_5_reg_221,
        sext_ln16_6 => b_load_6_reg_226,
        sext_ln16_7 => b_load_7_reg_231,
        sext_ln16_8 => b_load_8_reg_236);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_matrixmul_Pipeline_Row_fu_132_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrixmul_Pipeline_Row_fu_132_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_matrixmul_Pipeline_Row_fu_132_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrixmul_Pipeline_Row_fu_132_ap_ready = ap_const_logic_1)) then 
                    grp_matrixmul_Pipeline_Row_fu_132_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                b_load_1_reg_181 <= b_q1;
                b_load_2_reg_186 <= b_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                b_load_3_reg_201 <= b_q0;
                b_load_4_reg_206 <= b_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                b_load_5_reg_221 <= b_q0;
                b_load_6_reg_226 <= b_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                b_load_7_reg_231 <= b_q0;
                b_load_8_reg_236 <= b_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                b_load_reg_166 <= b_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_matrixmul_Pipeline_Row_fu_132_ap_done, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_matrixmul_Pipeline_Row_fu_132_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    a_address0 <= grp_matrixmul_Pipeline_Row_fu_132_a_address0;
    a_address1 <= grp_matrixmul_Pipeline_Row_fu_132_a_address1;
    a_ce0 <= grp_matrixmul_Pipeline_Row_fu_132_a_ce0;
    a_ce1 <= grp_matrixmul_Pipeline_Row_fu_132_a_ce1;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(grp_matrixmul_Pipeline_Row_fu_132_ap_done)
    begin
        if ((grp_matrixmul_Pipeline_Row_fu_132_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(grp_matrixmul_Pipeline_Row_fu_132_ap_done, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_matrixmul_Pipeline_Row_fu_132_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_matrixmul_Pipeline_Row_fu_132_ap_done, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_matrixmul_Pipeline_Row_fu_132_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            b_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            b_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            b_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            b_address0 <= "XXXX";
        end if; 
    end process;


    b_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            b_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            b_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        else 
            b_address1 <= "XXXX";
        end if; 
    end process;


    b_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            b_ce1 <= ap_const_logic_1;
        else 
            b_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_matrixmul_Pipeline_Row_fu_132_ap_start <= grp_matrixmul_Pipeline_Row_fu_132_ap_start_reg;
    res_address0 <= grp_matrixmul_Pipeline_Row_fu_132_res_address0;
    res_address1 <= grp_matrixmul_Pipeline_Row_fu_132_res_address1;
    res_ce0 <= grp_matrixmul_Pipeline_Row_fu_132_res_ce0;
    res_ce1 <= grp_matrixmul_Pipeline_Row_fu_132_res_ce1;
    res_d0 <= grp_matrixmul_Pipeline_Row_fu_132_res_d0;
    res_d1 <= grp_matrixmul_Pipeline_Row_fu_132_res_d1;
    res_we0 <= grp_matrixmul_Pipeline_Row_fu_132_res_we0;
    res_we1 <= grp_matrixmul_Pipeline_Row_fu_132_res_we1;
end behav;
