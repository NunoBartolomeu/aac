-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity functionDF is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    vecIn_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vecIn_ce0 : OUT STD_LOGIC;
    vecIn_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vecIn_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    vecIn_we0 : OUT STD_LOGIC;
    vecIn_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vecIn_ce1 : OUT STD_LOGIC;
    vecIn_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vecIn_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    vecIn_we1 : OUT STD_LOGIC;
    vecOut_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vecOut_ce0 : OUT STD_LOGIC;
    vecOut_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vecOut_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    vecOut_we0 : OUT STD_LOGIC;
    vecOut_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vecOut_ce1 : OUT STD_LOGIC;
    vecOut_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vecOut_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    vecOut_we1 : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of functionDF is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "functionDF_functionDF,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.196000,HLS_SYN_LAT=28,HLS_SYN_TPT=14,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=472,HLS_SYN_LUT=676,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";

    signal c2_i_q0 : STD_LOGIC_VECTOR (30 downto 0);
    signal c2_t_q0 : STD_LOGIC_VECTOR (30 downto 0);
    signal funcA_U0_ap_start : STD_LOGIC;
    signal funcA_U0_ap_done : STD_LOGIC;
    signal funcA_U0_ap_continue : STD_LOGIC;
    signal funcA_U0_ap_idle : STD_LOGIC;
    signal funcA_U0_ap_ready : STD_LOGIC;
    signal funcA_U0_c1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal funcA_U0_c1_write : STD_LOGIC;
    signal funcA_U0_start_out : STD_LOGIC;
    signal funcA_U0_start_write : STD_LOGIC;
    signal funcA_U0_vecIn_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal funcA_U0_vecIn_ce0 : STD_LOGIC;
    signal funcA_U0_out2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal funcA_U0_out2_ce0 : STD_LOGIC;
    signal funcA_U0_out2_we0 : STD_LOGIC;
    signal funcA_U0_out2_d0 : STD_LOGIC_VECTOR (30 downto 0);
    signal funcB_U0_ap_start : STD_LOGIC;
    signal funcB_U0_ap_done : STD_LOGIC;
    signal funcB_U0_ap_continue : STD_LOGIC;
    signal funcB_U0_ap_idle : STD_LOGIC;
    signal funcB_U0_ap_ready : STD_LOGIC;
    signal funcB_U0_c1_read : STD_LOGIC;
    signal funcB_U0_c3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal funcB_U0_c3_write : STD_LOGIC;
    signal funcB_U0_start_out : STD_LOGIC;
    signal funcB_U0_start_write : STD_LOGIC;
    signal funcC_U0_ap_start : STD_LOGIC;
    signal funcC_U0_ap_done : STD_LOGIC;
    signal funcC_U0_ap_continue : STD_LOGIC;
    signal funcC_U0_ap_idle : STD_LOGIC;
    signal funcC_U0_ap_ready : STD_LOGIC;
    signal funcC_U0_c4_din : STD_LOGIC_VECTOR (31 downto 0);
    signal funcC_U0_c4_write : STD_LOGIC;
    signal funcC_U0_in_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal funcC_U0_in_r_ce0 : STD_LOGIC;
    signal funcD_U0_ap_start : STD_LOGIC;
    signal funcD_U0_ap_done : STD_LOGIC;
    signal funcD_U0_ap_continue : STD_LOGIC;
    signal funcD_U0_ap_idle : STD_LOGIC;
    signal funcD_U0_ap_ready : STD_LOGIC;
    signal funcD_U0_c3_read : STD_LOGIC;
    signal funcD_U0_c4_read : STD_LOGIC;
    signal funcD_U0_vecOut_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal funcD_U0_vecOut_ce0 : STD_LOGIC;
    signal funcD_U0_vecOut_we0 : STD_LOGIC;
    signal funcD_U0_vecOut_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c2_i_full_n : STD_LOGIC;
    signal c2_t_empty_n : STD_LOGIC;
    signal c1_full_n : STD_LOGIC;
    signal c1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal c1_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal c1_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal c1_empty_n : STD_LOGIC;
    signal c3_full_n : STD_LOGIC;
    signal c3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal c3_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal c3_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal c3_empty_n : STD_LOGIC;
    signal c4_full_n : STD_LOGIC;
    signal c4_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal c4_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal c4_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal c4_empty_n : STD_LOGIC;
    signal start_for_funcB_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_funcB_U0_full_n : STD_LOGIC;
    signal start_for_funcB_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_funcB_U0_empty_n : STD_LOGIC;
    signal start_for_funcD_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_funcD_U0_full_n : STD_LOGIC;
    signal start_for_funcD_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_funcD_U0_empty_n : STD_LOGIC;

    component functionDF_funcA IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        c1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        c1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        c1_full_n : IN STD_LOGIC;
        c1_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        vecIn_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        vecIn_ce0 : OUT STD_LOGIC;
        vecIn_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        out2_ce0 : OUT STD_LOGIC;
        out2_we0 : OUT STD_LOGIC;
        out2_d0 : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component functionDF_funcB IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        c1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        c1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        c1_empty_n : IN STD_LOGIC;
        c1_read : OUT STD_LOGIC;
        c3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c3_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        c3_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        c3_full_n : IN STD_LOGIC;
        c3_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC );
    end component;


    component functionDF_funcC IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        c4_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c4_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        c4_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        c4_full_n : IN STD_LOGIC;
        c4_write : OUT STD_LOGIC;
        in_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component functionDF_funcD IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        c3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c3_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        c3_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        c3_empty_n : IN STD_LOGIC;
        c3_read : OUT STD_LOGIC;
        c4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c4_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        c4_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        c4_empty_n : IN STD_LOGIC;
        c4_read : OUT STD_LOGIC;
        vecOut_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        vecOut_ce0 : OUT STD_LOGIC;
        vecOut_we0 : OUT STD_LOGIC;
        vecOut_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component functionDF_c2_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (30 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (30 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (30 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (30 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component functionDF_fifo_w32_d10_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component functionDF_start_for_funcB_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component functionDF_start_for_funcD_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    c2_U : component functionDF_c2_RAM_AUTO_1R1W
    generic map (
        DataWidth => 31,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => funcA_U0_out2_address0,
        i_ce0 => funcA_U0_out2_ce0,
        i_we0 => funcA_U0_out2_we0,
        i_d0 => funcA_U0_out2_d0,
        i_q0 => c2_i_q0,
        t_address0 => funcC_U0_in_r_address0,
        t_ce0 => funcC_U0_in_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv31_0,
        t_q0 => c2_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => c2_i_full_n,
        i_write => funcA_U0_ap_done,
        t_empty_n => c2_t_empty_n,
        t_read => funcC_U0_ap_ready);

    funcA_U0 : component functionDF_funcA
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => funcA_U0_ap_start,
        start_full_n => start_for_funcB_U0_full_n,
        ap_done => funcA_U0_ap_done,
        ap_continue => funcA_U0_ap_continue,
        ap_idle => funcA_U0_ap_idle,
        ap_ready => funcA_U0_ap_ready,
        c1_din => funcA_U0_c1_din,
        c1_num_data_valid => c1_num_data_valid,
        c1_fifo_cap => c1_fifo_cap,
        c1_full_n => c1_full_n,
        c1_write => funcA_U0_c1_write,
        start_out => funcA_U0_start_out,
        start_write => funcA_U0_start_write,
        vecIn_address0 => funcA_U0_vecIn_address0,
        vecIn_ce0 => funcA_U0_vecIn_ce0,
        vecIn_q0 => vecIn_q0,
        out2_address0 => funcA_U0_out2_address0,
        out2_ce0 => funcA_U0_out2_ce0,
        out2_we0 => funcA_U0_out2_we0,
        out2_d0 => funcA_U0_out2_d0);

    funcB_U0 : component functionDF_funcB
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => funcB_U0_ap_start,
        start_full_n => start_for_funcD_U0_full_n,
        ap_done => funcB_U0_ap_done,
        ap_continue => funcB_U0_ap_continue,
        ap_idle => funcB_U0_ap_idle,
        ap_ready => funcB_U0_ap_ready,
        c1_dout => c1_dout,
        c1_num_data_valid => c1_num_data_valid,
        c1_fifo_cap => c1_fifo_cap,
        c1_empty_n => c1_empty_n,
        c1_read => funcB_U0_c1_read,
        c3_din => funcB_U0_c3_din,
        c3_num_data_valid => c3_num_data_valid,
        c3_fifo_cap => c3_fifo_cap,
        c3_full_n => c3_full_n,
        c3_write => funcB_U0_c3_write,
        start_out => funcB_U0_start_out,
        start_write => funcB_U0_start_write);

    funcC_U0 : component functionDF_funcC
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => funcC_U0_ap_start,
        ap_done => funcC_U0_ap_done,
        ap_continue => funcC_U0_ap_continue,
        ap_idle => funcC_U0_ap_idle,
        ap_ready => funcC_U0_ap_ready,
        c4_din => funcC_U0_c4_din,
        c4_num_data_valid => c4_num_data_valid,
        c4_fifo_cap => c4_fifo_cap,
        c4_full_n => c4_full_n,
        c4_write => funcC_U0_c4_write,
        in_r_address0 => funcC_U0_in_r_address0,
        in_r_ce0 => funcC_U0_in_r_ce0,
        in_r_q0 => c2_t_q0);

    funcD_U0 : component functionDF_funcD
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => funcD_U0_ap_start,
        ap_done => funcD_U0_ap_done,
        ap_continue => funcD_U0_ap_continue,
        ap_idle => funcD_U0_ap_idle,
        ap_ready => funcD_U0_ap_ready,
        c3_dout => c3_dout,
        c3_num_data_valid => c3_num_data_valid,
        c3_fifo_cap => c3_fifo_cap,
        c3_empty_n => c3_empty_n,
        c3_read => funcD_U0_c3_read,
        c4_dout => c4_dout,
        c4_num_data_valid => c4_num_data_valid,
        c4_fifo_cap => c4_fifo_cap,
        c4_empty_n => c4_empty_n,
        c4_read => funcD_U0_c4_read,
        vecOut_address0 => funcD_U0_vecOut_address0,
        vecOut_ce0 => funcD_U0_vecOut_ce0,
        vecOut_we0 => funcD_U0_vecOut_we0,
        vecOut_d0 => funcD_U0_vecOut_d0);

    c1_U : component functionDF_fifo_w32_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => funcA_U0_c1_din,
        if_full_n => c1_full_n,
        if_write => funcA_U0_c1_write,
        if_dout => c1_dout,
        if_num_data_valid => c1_num_data_valid,
        if_fifo_cap => c1_fifo_cap,
        if_empty_n => c1_empty_n,
        if_read => funcB_U0_c1_read);

    c3_U : component functionDF_fifo_w32_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => funcB_U0_c3_din,
        if_full_n => c3_full_n,
        if_write => funcB_U0_c3_write,
        if_dout => c3_dout,
        if_num_data_valid => c3_num_data_valid,
        if_fifo_cap => c3_fifo_cap,
        if_empty_n => c3_empty_n,
        if_read => funcD_U0_c3_read);

    c4_U : component functionDF_fifo_w32_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => funcC_U0_c4_din,
        if_full_n => c4_full_n,
        if_write => funcC_U0_c4_write,
        if_dout => c4_dout,
        if_num_data_valid => c4_num_data_valid,
        if_fifo_cap => c4_fifo_cap,
        if_empty_n => c4_empty_n,
        if_read => funcD_U0_c4_read);

    start_for_funcB_U0_U : component functionDF_start_for_funcB_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_funcB_U0_din,
        if_full_n => start_for_funcB_U0_full_n,
        if_write => funcA_U0_start_write,
        if_dout => start_for_funcB_U0_dout,
        if_empty_n => start_for_funcB_U0_empty_n,
        if_read => funcB_U0_ap_ready);

    start_for_funcD_U0_U : component functionDF_start_for_funcD_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_funcD_U0_din,
        if_full_n => start_for_funcD_U0_full_n,
        if_write => funcB_U0_start_write,
        if_dout => start_for_funcD_U0_dout,
        if_empty_n => start_for_funcD_U0_empty_n,
        if_read => funcD_U0_ap_ready);




    ap_done <= funcD_U0_ap_done;
    ap_idle <= (funcD_U0_ap_idle and funcC_U0_ap_idle and funcB_U0_ap_idle and funcA_U0_ap_idle and (c2_t_empty_n xor ap_const_logic_1));
    ap_ready <= funcA_U0_ap_ready;
    funcA_U0_ap_continue <= c2_i_full_n;
    funcA_U0_ap_start <= ap_start;
    funcB_U0_ap_continue <= ap_const_logic_1;
    funcB_U0_ap_start <= start_for_funcB_U0_empty_n;
    funcC_U0_ap_continue <= ap_const_logic_1;
    funcC_U0_ap_start <= c2_t_empty_n;
    funcD_U0_ap_continue <= ap_const_logic_1;
    funcD_U0_ap_start <= start_for_funcD_U0_empty_n;
    start_for_funcB_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_funcD_U0_din <= (0=>ap_const_logic_1, others=>'-');
    vecIn_address0 <= funcA_U0_vecIn_address0;
    vecIn_address1 <= ap_const_lv4_0;
    vecIn_ce0 <= funcA_U0_vecIn_ce0;
    vecIn_ce1 <= ap_const_logic_0;
    vecIn_d0 <= ap_const_lv32_0;
    vecIn_d1 <= ap_const_lv32_0;
    vecIn_we0 <= ap_const_logic_0;
    vecIn_we1 <= ap_const_logic_0;
    vecOut_address0 <= funcD_U0_vecOut_address0;
    vecOut_address1 <= ap_const_lv4_0;
    vecOut_ce0 <= funcD_U0_vecOut_ce0;
    vecOut_ce1 <= ap_const_logic_0;
    vecOut_d0 <= funcD_U0_vecOut_d0;
    vecOut_d1 <= ap_const_lv32_0;
    vecOut_we0 <= funcD_U0_vecOut_we0;
    vecOut_we1 <= ap_const_logic_0;
end behav;
