// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="functionDF_functionDF,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.196000,HLS_SYN_LAT=28,HLS_SYN_TPT=14,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=472,HLS_SYN_LUT=676,HLS_VERSION=2023_2}" *)

module functionDF (
        ap_clk,
        ap_rst,
        vecIn_address0,
        vecIn_ce0,
        vecIn_d0,
        vecIn_q0,
        vecIn_we0,
        vecIn_address1,
        vecIn_ce1,
        vecIn_d1,
        vecIn_q1,
        vecIn_we1,
        vecOut_address0,
        vecOut_ce0,
        vecOut_d0,
        vecOut_q0,
        vecOut_we0,
        vecOut_address1,
        vecOut_ce1,
        vecOut_d1,
        vecOut_q1,
        vecOut_we1,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle
);


input   ap_clk;
input   ap_rst;
output  [3:0] vecIn_address0;
output   vecIn_ce0;
output  [31:0] vecIn_d0;
input  [31:0] vecIn_q0;
output   vecIn_we0;
output  [3:0] vecIn_address1;
output   vecIn_ce1;
output  [31:0] vecIn_d1;
input  [31:0] vecIn_q1;
output   vecIn_we1;
output  [3:0] vecOut_address0;
output   vecOut_ce0;
output  [31:0] vecOut_d0;
input  [31:0] vecOut_q0;
output   vecOut_we0;
output  [3:0] vecOut_address1;
output   vecOut_ce1;
output  [31:0] vecOut_d1;
input  [31:0] vecOut_q1;
output   vecOut_we1;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;

wire   [30:0] c2_i_q0;
wire   [30:0] c2_t_q0;
wire    funcA_U0_ap_start;
wire    funcA_U0_ap_done;
wire    funcA_U0_ap_continue;
wire    funcA_U0_ap_idle;
wire    funcA_U0_ap_ready;
wire   [31:0] funcA_U0_c1_din;
wire    funcA_U0_c1_write;
wire    funcA_U0_start_out;
wire    funcA_U0_start_write;
wire   [3:0] funcA_U0_vecIn_address0;
wire    funcA_U0_vecIn_ce0;
wire   [3:0] funcA_U0_out2_address0;
wire    funcA_U0_out2_ce0;
wire    funcA_U0_out2_we0;
wire   [30:0] funcA_U0_out2_d0;
wire    funcB_U0_ap_start;
wire    funcB_U0_ap_done;
wire    funcB_U0_ap_continue;
wire    funcB_U0_ap_idle;
wire    funcB_U0_ap_ready;
wire    funcB_U0_c1_read;
wire   [31:0] funcB_U0_c3_din;
wire    funcB_U0_c3_write;
wire    funcB_U0_start_out;
wire    funcB_U0_start_write;
wire    funcC_U0_ap_start;
wire    funcC_U0_ap_done;
wire    funcC_U0_ap_continue;
wire    funcC_U0_ap_idle;
wire    funcC_U0_ap_ready;
wire   [31:0] funcC_U0_c4_din;
wire    funcC_U0_c4_write;
wire   [3:0] funcC_U0_in_r_address0;
wire    funcC_U0_in_r_ce0;
wire    funcD_U0_ap_start;
wire    funcD_U0_ap_done;
wire    funcD_U0_ap_continue;
wire    funcD_U0_ap_idle;
wire    funcD_U0_ap_ready;
wire    funcD_U0_c3_read;
wire    funcD_U0_c4_read;
wire   [3:0] funcD_U0_vecOut_address0;
wire    funcD_U0_vecOut_ce0;
wire    funcD_U0_vecOut_we0;
wire   [31:0] funcD_U0_vecOut_d0;
wire    c2_i_full_n;
wire    c2_t_empty_n;
wire    c1_full_n;
wire   [31:0] c1_dout;
wire   [4:0] c1_num_data_valid;
wire   [4:0] c1_fifo_cap;
wire    c1_empty_n;
wire    c3_full_n;
wire   [31:0] c3_dout;
wire   [4:0] c3_num_data_valid;
wire   [4:0] c3_fifo_cap;
wire    c3_empty_n;
wire    c4_full_n;
wire   [31:0] c4_dout;
wire   [4:0] c4_num_data_valid;
wire   [4:0] c4_fifo_cap;
wire    c4_empty_n;
wire   [0:0] start_for_funcB_U0_din;
wire    start_for_funcB_U0_full_n;
wire   [0:0] start_for_funcB_U0_dout;
wire    start_for_funcB_U0_empty_n;
wire   [0:0] start_for_funcD_U0_din;
wire    start_for_funcD_U0_full_n;
wire   [0:0] start_for_funcD_U0_dout;
wire    start_for_funcD_U0_empty_n;

functionDF_c2_RAM_AUTO_1R1W #(
    .DataWidth( 31 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
c2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(funcA_U0_out2_address0),
    .i_ce0(funcA_U0_out2_ce0),
    .i_we0(funcA_U0_out2_we0),
    .i_d0(funcA_U0_out2_d0),
    .i_q0(c2_i_q0),
    .t_address0(funcC_U0_in_r_address0),
    .t_ce0(funcC_U0_in_r_ce0),
    .t_we0(1'b0),
    .t_d0(31'd0),
    .t_q0(c2_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(c2_i_full_n),
    .i_write(funcA_U0_ap_done),
    .t_empty_n(c2_t_empty_n),
    .t_read(funcC_U0_ap_ready)
);

functionDF_funcA funcA_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(funcA_U0_ap_start),
    .start_full_n(start_for_funcB_U0_full_n),
    .ap_done(funcA_U0_ap_done),
    .ap_continue(funcA_U0_ap_continue),
    .ap_idle(funcA_U0_ap_idle),
    .ap_ready(funcA_U0_ap_ready),
    .c1_din(funcA_U0_c1_din),
    .c1_num_data_valid(c1_num_data_valid),
    .c1_fifo_cap(c1_fifo_cap),
    .c1_full_n(c1_full_n),
    .c1_write(funcA_U0_c1_write),
    .start_out(funcA_U0_start_out),
    .start_write(funcA_U0_start_write),
    .vecIn_address0(funcA_U0_vecIn_address0),
    .vecIn_ce0(funcA_U0_vecIn_ce0),
    .vecIn_q0(vecIn_q0),
    .out2_address0(funcA_U0_out2_address0),
    .out2_ce0(funcA_U0_out2_ce0),
    .out2_we0(funcA_U0_out2_we0),
    .out2_d0(funcA_U0_out2_d0)
);

functionDF_funcB funcB_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(funcB_U0_ap_start),
    .start_full_n(start_for_funcD_U0_full_n),
    .ap_done(funcB_U0_ap_done),
    .ap_continue(funcB_U0_ap_continue),
    .ap_idle(funcB_U0_ap_idle),
    .ap_ready(funcB_U0_ap_ready),
    .c1_dout(c1_dout),
    .c1_num_data_valid(c1_num_data_valid),
    .c1_fifo_cap(c1_fifo_cap),
    .c1_empty_n(c1_empty_n),
    .c1_read(funcB_U0_c1_read),
    .c3_din(funcB_U0_c3_din),
    .c3_num_data_valid(c3_num_data_valid),
    .c3_fifo_cap(c3_fifo_cap),
    .c3_full_n(c3_full_n),
    .c3_write(funcB_U0_c3_write),
    .start_out(funcB_U0_start_out),
    .start_write(funcB_U0_start_write)
);

functionDF_funcC funcC_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(funcC_U0_ap_start),
    .ap_done(funcC_U0_ap_done),
    .ap_continue(funcC_U0_ap_continue),
    .ap_idle(funcC_U0_ap_idle),
    .ap_ready(funcC_U0_ap_ready),
    .c4_din(funcC_U0_c4_din),
    .c4_num_data_valid(c4_num_data_valid),
    .c4_fifo_cap(c4_fifo_cap),
    .c4_full_n(c4_full_n),
    .c4_write(funcC_U0_c4_write),
    .in_r_address0(funcC_U0_in_r_address0),
    .in_r_ce0(funcC_U0_in_r_ce0),
    .in_r_q0(c2_t_q0)
);

functionDF_funcD funcD_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(funcD_U0_ap_start),
    .ap_done(funcD_U0_ap_done),
    .ap_continue(funcD_U0_ap_continue),
    .ap_idle(funcD_U0_ap_idle),
    .ap_ready(funcD_U0_ap_ready),
    .c3_dout(c3_dout),
    .c3_num_data_valid(c3_num_data_valid),
    .c3_fifo_cap(c3_fifo_cap),
    .c3_empty_n(c3_empty_n),
    .c3_read(funcD_U0_c3_read),
    .c4_dout(c4_dout),
    .c4_num_data_valid(c4_num_data_valid),
    .c4_fifo_cap(c4_fifo_cap),
    .c4_empty_n(c4_empty_n),
    .c4_read(funcD_U0_c4_read),
    .vecOut_address0(funcD_U0_vecOut_address0),
    .vecOut_ce0(funcD_U0_vecOut_ce0),
    .vecOut_we0(funcD_U0_vecOut_we0),
    .vecOut_d0(funcD_U0_vecOut_d0)
);

functionDF_fifo_w32_d10_S c1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(funcA_U0_c1_din),
    .if_full_n(c1_full_n),
    .if_write(funcA_U0_c1_write),
    .if_dout(c1_dout),
    .if_num_data_valid(c1_num_data_valid),
    .if_fifo_cap(c1_fifo_cap),
    .if_empty_n(c1_empty_n),
    .if_read(funcB_U0_c1_read)
);

functionDF_fifo_w32_d10_S c3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(funcB_U0_c3_din),
    .if_full_n(c3_full_n),
    .if_write(funcB_U0_c3_write),
    .if_dout(c3_dout),
    .if_num_data_valid(c3_num_data_valid),
    .if_fifo_cap(c3_fifo_cap),
    .if_empty_n(c3_empty_n),
    .if_read(funcD_U0_c3_read)
);

functionDF_fifo_w32_d10_S c4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(funcC_U0_c4_din),
    .if_full_n(c4_full_n),
    .if_write(funcC_U0_c4_write),
    .if_dout(c4_dout),
    .if_num_data_valid(c4_num_data_valid),
    .if_fifo_cap(c4_fifo_cap),
    .if_empty_n(c4_empty_n),
    .if_read(funcD_U0_c4_read)
);

functionDF_start_for_funcB_U0 start_for_funcB_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_funcB_U0_din),
    .if_full_n(start_for_funcB_U0_full_n),
    .if_write(funcA_U0_start_write),
    .if_dout(start_for_funcB_U0_dout),
    .if_empty_n(start_for_funcB_U0_empty_n),
    .if_read(funcB_U0_ap_ready)
);

functionDF_start_for_funcD_U0 start_for_funcD_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_funcD_U0_din),
    .if_full_n(start_for_funcD_U0_full_n),
    .if_write(funcB_U0_start_write),
    .if_dout(start_for_funcD_U0_dout),
    .if_empty_n(start_for_funcD_U0_empty_n),
    .if_read(funcD_U0_ap_ready)
);

assign ap_done = funcD_U0_ap_done;

assign ap_idle = (funcD_U0_ap_idle & funcC_U0_ap_idle & funcB_U0_ap_idle & funcA_U0_ap_idle & (c2_t_empty_n ^ 1'b1));

assign ap_ready = funcA_U0_ap_ready;

assign funcA_U0_ap_continue = c2_i_full_n;

assign funcA_U0_ap_start = ap_start;

assign funcB_U0_ap_continue = 1'b1;

assign funcB_U0_ap_start = start_for_funcB_U0_empty_n;

assign funcC_U0_ap_continue = 1'b1;

assign funcC_U0_ap_start = c2_t_empty_n;

assign funcD_U0_ap_continue = 1'b1;

assign funcD_U0_ap_start = start_for_funcD_U0_empty_n;

assign start_for_funcB_U0_din = 1'b1;

assign start_for_funcD_U0_din = 1'b1;

assign vecIn_address0 = funcA_U0_vecIn_address0;

assign vecIn_address1 = 4'd0;

assign vecIn_ce0 = funcA_U0_vecIn_ce0;

assign vecIn_ce1 = 1'b0;

assign vecIn_d0 = 32'd0;

assign vecIn_d1 = 32'd0;

assign vecIn_we0 = 1'b0;

assign vecIn_we1 = 1'b0;

assign vecOut_address0 = funcD_U0_vecOut_address0;

assign vecOut_address1 = 4'd0;

assign vecOut_ce0 = funcD_U0_vecOut_ce0;

assign vecOut_ce1 = 1'b0;

assign vecOut_d0 = funcD_U0_vecOut_d0;

assign vecOut_d1 = 32'd0;

assign vecOut_we0 = funcD_U0_vecOut_we0;

assign vecOut_we1 = 1'b0;

endmodule //functionDF
