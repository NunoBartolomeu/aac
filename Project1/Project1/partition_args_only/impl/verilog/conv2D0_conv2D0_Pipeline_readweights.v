// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module conv2D0_conv2D0_Pipeline_readweights (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weights_0_load,
        weights_1_load,
        weights_2_load,
        weights_3_load,
        weights_4_load,
        weights_5_load,
        weights_6_load,
        weights_7_load,
        weights_8_load,
        weightsT_8_out,
        weightsT_8_out_ap_vld,
        weightsT_7_out,
        weightsT_7_out_ap_vld,
        weightsT_6_out,
        weightsT_6_out_ap_vld,
        weightsT_5_out,
        weightsT_5_out_ap_vld,
        weightsT_4_out,
        weightsT_4_out_ap_vld,
        weightsT_3_out,
        weightsT_3_out_ap_vld,
        weightsT_2_out,
        weightsT_2_out_ap_vld,
        weightsT_1_out,
        weightsT_1_out_ap_vld,
        weightsT_out,
        weightsT_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] weights_0_load;
input  [7:0] weights_1_load;
input  [7:0] weights_2_load;
input  [7:0] weights_3_load;
input  [7:0] weights_4_load;
input  [7:0] weights_5_load;
input  [7:0] weights_6_load;
input  [7:0] weights_7_load;
input  [7:0] weights_8_load;
output  [7:0] weightsT_8_out;
output   weightsT_8_out_ap_vld;
output  [7:0] weightsT_7_out;
output   weightsT_7_out_ap_vld;
output  [7:0] weightsT_6_out;
output   weightsT_6_out_ap_vld;
output  [7:0] weightsT_5_out;
output   weightsT_5_out_ap_vld;
output  [7:0] weightsT_4_out;
output   weightsT_4_out_ap_vld;
output  [7:0] weightsT_3_out;
output   weightsT_3_out_ap_vld;
output  [7:0] weightsT_2_out;
output   weightsT_2_out_ap_vld;
output  [7:0] weightsT_1_out;
output   weightsT_1_out_ap_vld;
output  [7:0] weightsT_out;
output   weightsT_out_ap_vld;

reg ap_idle;
reg weightsT_8_out_ap_vld;
reg weightsT_7_out_ap_vld;
reg weightsT_6_out_ap_vld;
reg weightsT_5_out_ap_vld;
reg weightsT_4_out_ap_vld;
reg weightsT_3_out_ap_vld;
reg weightsT_2_out_ap_vld;
reg weightsT_1_out_ap_vld;
reg weightsT_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln16_fu_247_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [3:0] i_1_fu_82;
wire   [3:0] add_ln16_fu_253_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i;
wire   [3:0] i_load_fu_244_p1;
reg   [7:0] weightsT_fu_86;
wire   [7:0] weightsT_9_fu_259_p21;
reg   [7:0] weightsT_1_fu_90;
reg   [7:0] weightsT_2_fu_94;
reg   [7:0] weightsT_3_fu_98;
reg   [7:0] weightsT_4_fu_102;
reg   [7:0] weightsT_5_fu_106;
reg   [7:0] weightsT_6_fu_110;
reg   [7:0] weightsT_7_fu_114;
reg   [7:0] weightsT_8_fu_118;
wire   [7:0] weightsT_9_fu_259_p19;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire   [3:0] weightsT_9_fu_259_p1;
wire   [3:0] weightsT_9_fu_259_p3;
wire   [3:0] weightsT_9_fu_259_p5;
wire   [3:0] weightsT_9_fu_259_p7;
wire   [3:0] weightsT_9_fu_259_p9;
wire   [3:0] weightsT_9_fu_259_p11;
wire   [3:0] weightsT_9_fu_259_p13;
wire   [3:0] weightsT_9_fu_259_p15;
wire  signed [3:0] weightsT_9_fu_259_p17;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 i_1_fu_82 = 4'd0;
#0 weightsT_fu_86 = 8'd0;
#0 weightsT_1_fu_90 = 8'd0;
#0 weightsT_2_fu_94 = 8'd0;
#0 weightsT_3_fu_98 = 8'd0;
#0 weightsT_4_fu_102 = 8'd0;
#0 weightsT_5_fu_106 = 8'd0;
#0 weightsT_6_fu_110 = 8'd0;
#0 weightsT_7_fu_114 = 8'd0;
#0 weightsT_8_fu_118 = 8'd0;
#0 ap_done_reg = 1'b0;
end

conv2D0_sparsemux_19_4_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 8 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 8 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 8 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 8 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 8 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 8 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
sparsemux_19_4_8_1_1_U35(
    .din0(weights_0_load),
    .din1(weights_1_load),
    .din2(weights_2_load),
    .din3(weights_3_load),
    .din4(weights_4_load),
    .din5(weights_5_load),
    .din6(weights_6_load),
    .din7(weights_7_load),
    .din8(weights_8_load),
    .def(weightsT_9_fu_259_p19),
    .sel(ap_sig_allocacmp_i),
    .dout(weightsT_9_fu_259_p21)
);

conv2D0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln16_fu_247_p2 == 1'd0)) begin
            i_1_fu_82 <= add_ln16_fu_253_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_82 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((i_load_fu_244_p1 == 4'd1) & (icmp_ln16_fu_247_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weightsT_1_fu_90 <= weightsT_9_fu_259_p21;
    end
end

always @ (posedge ap_clk) begin
    if (((i_load_fu_244_p1 == 4'd2) & (icmp_ln16_fu_247_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weightsT_2_fu_94 <= weightsT_9_fu_259_p21;
    end
end

always @ (posedge ap_clk) begin
    if (((i_load_fu_244_p1 == 4'd3) & (icmp_ln16_fu_247_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weightsT_3_fu_98 <= weightsT_9_fu_259_p21;
    end
end

always @ (posedge ap_clk) begin
    if (((i_load_fu_244_p1 == 4'd4) & (icmp_ln16_fu_247_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weightsT_4_fu_102 <= weightsT_9_fu_259_p21;
    end
end

always @ (posedge ap_clk) begin
    if (((i_load_fu_244_p1 == 4'd5) & (icmp_ln16_fu_247_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weightsT_5_fu_106 <= weightsT_9_fu_259_p21;
    end
end

always @ (posedge ap_clk) begin
    if (((i_load_fu_244_p1 == 4'd6) & (icmp_ln16_fu_247_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weightsT_6_fu_110 <= weightsT_9_fu_259_p21;
    end
end

always @ (posedge ap_clk) begin
    if (((i_load_fu_244_p1 == 4'd7) & (icmp_ln16_fu_247_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weightsT_7_fu_114 <= weightsT_9_fu_259_p21;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_load_fu_244_p1 == 4'd3) & ~(i_load_fu_244_p1 == 4'd2) & ~(i_load_fu_244_p1 == 4'd1) & ~(i_load_fu_244_p1 == 4'd0) & ~(i_load_fu_244_p1 == 4'd7) & ~(i_load_fu_244_p1 == 4'd6) & ~(i_load_fu_244_p1 == 4'd5) & ~(i_load_fu_244_p1 == 4'd4) & (icmp_ln16_fu_247_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weightsT_8_fu_118 <= weightsT_9_fu_259_p21;
    end
end

always @ (posedge ap_clk) begin
    if (((i_load_fu_244_p1 == 4'd0) & (icmp_ln16_fu_247_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weightsT_fu_86 <= weightsT_9_fu_259_p21;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_247_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_82;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_247_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weightsT_1_out_ap_vld = 1'b1;
    end else begin
        weightsT_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_247_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weightsT_2_out_ap_vld = 1'b1;
    end else begin
        weightsT_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_247_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weightsT_3_out_ap_vld = 1'b1;
    end else begin
        weightsT_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_247_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weightsT_4_out_ap_vld = 1'b1;
    end else begin
        weightsT_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_247_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weightsT_5_out_ap_vld = 1'b1;
    end else begin
        weightsT_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_247_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weightsT_6_out_ap_vld = 1'b1;
    end else begin
        weightsT_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_247_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weightsT_7_out_ap_vld = 1'b1;
    end else begin
        weightsT_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_247_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weightsT_8_out_ap_vld = 1'b1;
    end else begin
        weightsT_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_247_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weightsT_out_ap_vld = 1'b1;
    end else begin
        weightsT_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln16_fu_253_p2 = (ap_sig_allocacmp_i + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_load_fu_244_p1 = ap_sig_allocacmp_i;

assign icmp_ln16_fu_247_p2 = ((ap_sig_allocacmp_i == 4'd9) ? 1'b1 : 1'b0);

assign weightsT_1_out = weightsT_1_fu_90;

assign weightsT_2_out = weightsT_2_fu_94;

assign weightsT_3_out = weightsT_3_fu_98;

assign weightsT_4_out = weightsT_4_fu_102;

assign weightsT_5_out = weightsT_5_fu_106;

assign weightsT_6_out = weightsT_6_fu_110;

assign weightsT_7_out = weightsT_7_fu_114;

assign weightsT_8_out = weightsT_8_fu_118;

assign weightsT_9_fu_259_p19 = 'bx;

assign weightsT_out = weightsT_fu_86;

endmodule //conv2D0_conv2D0_Pipeline_readweights
