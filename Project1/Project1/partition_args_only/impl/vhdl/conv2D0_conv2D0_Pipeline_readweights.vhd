-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2D0_conv2D0_Pipeline_readweights is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weights_0_load : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_1_load : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_2_load : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_3_load : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_4_load : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_5_load : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_6_load : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_7_load : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_8_load : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_8_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_8_out_ap_vld : OUT STD_LOGIC;
    weightsT_7_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_7_out_ap_vld : OUT STD_LOGIC;
    weightsT_6_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_6_out_ap_vld : OUT STD_LOGIC;
    weightsT_5_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_5_out_ap_vld : OUT STD_LOGIC;
    weightsT_4_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_4_out_ap_vld : OUT STD_LOGIC;
    weightsT_3_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_3_out_ap_vld : OUT STD_LOGIC;
    weightsT_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_2_out_ap_vld : OUT STD_LOGIC;
    weightsT_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_1_out_ap_vld : OUT STD_LOGIC;
    weightsT_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of conv2D0_conv2D0_Pipeline_readweights is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln16_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_1_fu_82 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln16_fu_253_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (3 downto 0);
    signal i_load_fu_244_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal weightsT_fu_86 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_9_fu_259_p21 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_1_fu_90 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_2_fu_94 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_3_fu_98 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_4_fu_102 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_5_fu_106 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_6_fu_110 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_7_fu_114 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_8_fu_118 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_9_fu_259_p19 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal weightsT_9_fu_259_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal weightsT_9_fu_259_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal weightsT_9_fu_259_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal weightsT_9_fu_259_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal weightsT_9_fu_259_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal weightsT_9_fu_259_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal weightsT_9_fu_259_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal weightsT_9_fu_259_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal weightsT_9_fu_259_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component conv2D0_sparsemux_19_4_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv2D0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_19_4_8_1_1_U35 : component conv2D0_sparsemux_19_4_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 8,
        CASE1 => "0001",
        din1_WIDTH => 8,
        CASE2 => "0010",
        din2_WIDTH => 8,
        CASE3 => "0011",
        din3_WIDTH => 8,
        CASE4 => "0100",
        din4_WIDTH => 8,
        CASE5 => "0101",
        din5_WIDTH => 8,
        CASE6 => "0110",
        din6_WIDTH => 8,
        CASE7 => "0111",
        din7_WIDTH => 8,
        CASE8 => "1000",
        din8_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => weights_0_load,
        din1 => weights_1_load,
        din2 => weights_2_load,
        din3 => weights_3_load,
        din4 => weights_4_load,
        din5 => weights_5_load,
        din6 => weights_6_load,
        din7 => weights_7_load,
        din8 => weights_8_load,
        def => weightsT_9_fu_259_p19,
        sel => ap_sig_allocacmp_i,
        dout => weightsT_9_fu_259_p21);

    flow_control_loop_pipe_sequential_init_U : component conv2D0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln16_fu_247_p2 = ap_const_lv1_0)) then 
                    i_1_fu_82 <= add_ln16_fu_253_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_82 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_load_fu_244_p1 = ap_const_lv4_1) and (icmp_ln16_fu_247_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                weightsT_1_fu_90 <= weightsT_9_fu_259_p21;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_load_fu_244_p1 = ap_const_lv4_2) and (icmp_ln16_fu_247_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                weightsT_2_fu_94 <= weightsT_9_fu_259_p21;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_load_fu_244_p1 = ap_const_lv4_3) and (icmp_ln16_fu_247_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                weightsT_3_fu_98 <= weightsT_9_fu_259_p21;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_load_fu_244_p1 = ap_const_lv4_4) and (icmp_ln16_fu_247_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                weightsT_4_fu_102 <= weightsT_9_fu_259_p21;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_load_fu_244_p1 = ap_const_lv4_5) and (icmp_ln16_fu_247_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                weightsT_5_fu_106 <= weightsT_9_fu_259_p21;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_load_fu_244_p1 = ap_const_lv4_6) and (icmp_ln16_fu_247_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                weightsT_6_fu_110 <= weightsT_9_fu_259_p21;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_load_fu_244_p1 = ap_const_lv4_7) and (icmp_ln16_fu_247_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                weightsT_7_fu_114 <= weightsT_9_fu_259_p21;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_load_fu_244_p1 = ap_const_lv4_3)) and not((i_load_fu_244_p1 = ap_const_lv4_2)) and not((i_load_fu_244_p1 = ap_const_lv4_1)) and not((i_load_fu_244_p1 = ap_const_lv4_0)) and not((i_load_fu_244_p1 = ap_const_lv4_7)) and not((i_load_fu_244_p1 = ap_const_lv4_6)) and not((i_load_fu_244_p1 = ap_const_lv4_5)) and not((i_load_fu_244_p1 = ap_const_lv4_4)) and (icmp_ln16_fu_247_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                weightsT_8_fu_118 <= weightsT_9_fu_259_p21;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_load_fu_244_p1 = ap_const_lv4_0) and (icmp_ln16_fu_247_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                weightsT_fu_86 <= weightsT_9_fu_259_p21;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln16_fu_253_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln16_fu_247_p2)
    begin
        if (((icmp_ln16_fu_247_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_state1, i_1_fu_82, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i <= i_1_fu_82;
        end if; 
    end process;

    i_load_fu_244_p1 <= ap_sig_allocacmp_i;
    icmp_ln16_fu_247_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv4_9) else "0";
    weightsT_1_out <= weightsT_1_fu_90;

    weightsT_1_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln16_fu_247_p2)
    begin
        if (((icmp_ln16_fu_247_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weightsT_1_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_2_out <= weightsT_2_fu_94;

    weightsT_2_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln16_fu_247_p2)
    begin
        if (((icmp_ln16_fu_247_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weightsT_2_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_3_out <= weightsT_3_fu_98;

    weightsT_3_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln16_fu_247_p2)
    begin
        if (((icmp_ln16_fu_247_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weightsT_3_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_4_out <= weightsT_4_fu_102;

    weightsT_4_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln16_fu_247_p2)
    begin
        if (((icmp_ln16_fu_247_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weightsT_4_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_5_out <= weightsT_5_fu_106;

    weightsT_5_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln16_fu_247_p2)
    begin
        if (((icmp_ln16_fu_247_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weightsT_5_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_6_out <= weightsT_6_fu_110;

    weightsT_6_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln16_fu_247_p2)
    begin
        if (((icmp_ln16_fu_247_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weightsT_6_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_7_out <= weightsT_7_fu_114;

    weightsT_7_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln16_fu_247_p2)
    begin
        if (((icmp_ln16_fu_247_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weightsT_7_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_8_out <= weightsT_8_fu_118;

    weightsT_8_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln16_fu_247_p2)
    begin
        if (((icmp_ln16_fu_247_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weightsT_8_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_9_fu_259_p19 <= "XXXXXXXX";
    weightsT_out <= weightsT_fu_86;

    weightsT_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln16_fu_247_p2)
    begin
        if (((icmp_ln16_fu_247_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weightsT_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
