// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module conv2D0_conv2D0_Pipeline_readImg (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_in_0_load,
        img_in_1_load,
        img_in_2_load,
        img_in_3_load,
        img_in_4_load,
        img_in_5_load,
        img_in_6_load,
        img_in_7_load,
        img_in_8_load,
        img_in_9_load,
        img_in_10_load,
        img_in_11_load,
        img_in_12_load,
        img_in_13_load,
        img_in_14_load,
        img_in_15_load,
        img_inT_15_out,
        img_inT_15_out_ap_vld,
        img_inT_14_out,
        img_inT_14_out_ap_vld,
        img_inT_13_out,
        img_inT_13_out_ap_vld,
        img_inT_12_out,
        img_inT_12_out_ap_vld,
        img_inT_11_out,
        img_inT_11_out_ap_vld,
        img_inT_10_out,
        img_inT_10_out_ap_vld,
        img_inT_9_out,
        img_inT_9_out_ap_vld,
        img_inT_8_out,
        img_inT_8_out_ap_vld,
        img_inT_7_out,
        img_inT_7_out_ap_vld,
        img_inT_6_out,
        img_inT_6_out_ap_vld,
        img_inT_5_out,
        img_inT_5_out_ap_vld,
        img_inT_4_out,
        img_inT_4_out_ap_vld,
        img_inT_3_out,
        img_inT_3_out_ap_vld,
        img_inT_2_out,
        img_inT_2_out_ap_vld,
        img_inT_1_out,
        img_inT_1_out_ap_vld,
        img_inT_out,
        img_inT_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] img_in_0_load;
input  [7:0] img_in_1_load;
input  [7:0] img_in_2_load;
input  [7:0] img_in_3_load;
input  [7:0] img_in_4_load;
input  [7:0] img_in_5_load;
input  [7:0] img_in_6_load;
input  [7:0] img_in_7_load;
input  [7:0] img_in_8_load;
input  [7:0] img_in_9_load;
input  [7:0] img_in_10_load;
input  [7:0] img_in_11_load;
input  [7:0] img_in_12_load;
input  [7:0] img_in_13_load;
input  [7:0] img_in_14_load;
input  [7:0] img_in_15_load;
output  [7:0] img_inT_15_out;
output   img_inT_15_out_ap_vld;
output  [7:0] img_inT_14_out;
output   img_inT_14_out_ap_vld;
output  [7:0] img_inT_13_out;
output   img_inT_13_out_ap_vld;
output  [7:0] img_inT_12_out;
output   img_inT_12_out_ap_vld;
output  [7:0] img_inT_11_out;
output   img_inT_11_out_ap_vld;
output  [7:0] img_inT_10_out;
output   img_inT_10_out_ap_vld;
output  [7:0] img_inT_9_out;
output   img_inT_9_out_ap_vld;
output  [7:0] img_inT_8_out;
output   img_inT_8_out_ap_vld;
output  [7:0] img_inT_7_out;
output   img_inT_7_out_ap_vld;
output  [7:0] img_inT_6_out;
output   img_inT_6_out_ap_vld;
output  [7:0] img_inT_5_out;
output   img_inT_5_out_ap_vld;
output  [7:0] img_inT_4_out;
output   img_inT_4_out_ap_vld;
output  [7:0] img_inT_3_out;
output   img_inT_3_out_ap_vld;
output  [7:0] img_inT_2_out;
output   img_inT_2_out_ap_vld;
output  [7:0] img_inT_1_out;
output   img_inT_1_out_ap_vld;
output  [7:0] img_inT_out;
output   img_inT_out_ap_vld;

reg ap_idle;
reg img_inT_15_out_ap_vld;
reg img_inT_14_out_ap_vld;
reg img_inT_13_out_ap_vld;
reg img_inT_12_out_ap_vld;
reg img_inT_11_out_ap_vld;
reg img_inT_10_out_ap_vld;
reg img_inT_9_out_ap_vld;
reg img_inT_8_out_ap_vld;
reg img_inT_7_out_ap_vld;
reg img_inT_6_out_ap_vld;
reg img_inT_5_out_ap_vld;
reg img_inT_4_out_ap_vld;
reg img_inT_3_out_ap_vld;
reg img_inT_2_out_ap_vld;
reg img_inT_1_out_ap_vld;
reg img_inT_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln14_fu_412_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [4:0] i_fu_128;
wire   [4:0] add_ln14_fu_418_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_2;
reg   [7:0] img_inT_fu_132;
wire   [7:0] img_inT_16_fu_428_p35;
wire   [3:0] trunc_ln14_fu_424_p1;
reg   [7:0] img_inT_1_fu_136;
reg   [7:0] img_inT_2_fu_140;
reg   [7:0] img_inT_3_fu_144;
reg   [7:0] img_inT_4_fu_148;
reg   [7:0] img_inT_5_fu_152;
reg   [7:0] img_inT_6_fu_156;
reg   [7:0] img_inT_7_fu_160;
reg   [7:0] img_inT_8_fu_164;
reg   [7:0] img_inT_9_fu_168;
reg   [7:0] img_inT_10_fu_172;
reg   [7:0] img_inT_11_fu_176;
reg   [7:0] img_inT_12_fu_180;
reg   [7:0] img_inT_13_fu_184;
reg   [7:0] img_inT_14_fu_188;
reg   [7:0] img_inT_15_fu_192;
wire   [7:0] img_inT_16_fu_428_p33;
wire   [3:0] img_inT_16_fu_428_p34;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire   [3:0] img_inT_16_fu_428_p1;
wire   [3:0] img_inT_16_fu_428_p3;
wire   [3:0] img_inT_16_fu_428_p5;
wire   [3:0] img_inT_16_fu_428_p7;
wire   [3:0] img_inT_16_fu_428_p9;
wire   [3:0] img_inT_16_fu_428_p11;
wire   [3:0] img_inT_16_fu_428_p13;
wire   [3:0] img_inT_16_fu_428_p15;
wire  signed [3:0] img_inT_16_fu_428_p17;
wire  signed [3:0] img_inT_16_fu_428_p19;
wire  signed [3:0] img_inT_16_fu_428_p21;
wire  signed [3:0] img_inT_16_fu_428_p23;
wire  signed [3:0] img_inT_16_fu_428_p25;
wire  signed [3:0] img_inT_16_fu_428_p27;
wire  signed [3:0] img_inT_16_fu_428_p29;
wire  signed [3:0] img_inT_16_fu_428_p31;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 i_fu_128 = 5'd0;
#0 img_inT_fu_132 = 8'd0;
#0 img_inT_1_fu_136 = 8'd0;
#0 img_inT_2_fu_140 = 8'd0;
#0 img_inT_3_fu_144 = 8'd0;
#0 img_inT_4_fu_148 = 8'd0;
#0 img_inT_5_fu_152 = 8'd0;
#0 img_inT_6_fu_156 = 8'd0;
#0 img_inT_7_fu_160 = 8'd0;
#0 img_inT_8_fu_164 = 8'd0;
#0 img_inT_9_fu_168 = 8'd0;
#0 img_inT_10_fu_172 = 8'd0;
#0 img_inT_11_fu_176 = 8'd0;
#0 img_inT_12_fu_180 = 8'd0;
#0 img_inT_13_fu_184 = 8'd0;
#0 img_inT_14_fu_188 = 8'd0;
#0 img_inT_15_fu_192 = 8'd0;
#0 ap_done_reg = 1'b0;
end

conv2D0_sparsemux_33_4_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 8 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 8 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 8 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 8 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 8 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 8 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 8 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 8 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 8 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 8 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 8 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 8 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 8 ),
    .CASE15( 4'hF ),
    .din15_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
sparsemux_33_4_8_1_1_U1(
    .din0(img_in_0_load),
    .din1(img_in_1_load),
    .din2(img_in_2_load),
    .din3(img_in_3_load),
    .din4(img_in_4_load),
    .din5(img_in_5_load),
    .din6(img_in_6_load),
    .din7(img_in_7_load),
    .din8(img_in_8_load),
    .din9(img_in_9_load),
    .din10(img_in_10_load),
    .din11(img_in_11_load),
    .din12(img_in_12_load),
    .din13(img_in_13_load),
    .din14(img_in_14_load),
    .din15(img_in_15_load),
    .def(img_inT_16_fu_428_p33),
    .sel(img_inT_16_fu_428_p34),
    .dout(img_inT_16_fu_428_p35)
);

conv2D0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln14_fu_412_p2 == 1'd0)) begin
            i_fu_128 <= add_ln14_fu_418_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_128 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln14_fu_424_p1 == 4'd10) & (icmp_ln14_fu_412_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_10_fu_172 <= img_inT_16_fu_428_p35;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln14_fu_424_p1 == 4'd11) & (icmp_ln14_fu_412_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_11_fu_176 <= img_inT_16_fu_428_p35;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln14_fu_424_p1 == 4'd12) & (icmp_ln14_fu_412_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_12_fu_180 <= img_inT_16_fu_428_p35;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln14_fu_424_p1 == 4'd13) & (icmp_ln14_fu_412_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_13_fu_184 <= img_inT_16_fu_428_p35;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln14_fu_424_p1 == 4'd14) & (icmp_ln14_fu_412_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_14_fu_188 <= img_inT_16_fu_428_p35;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln14_fu_424_p1 == 4'd15) & (icmp_ln14_fu_412_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_15_fu_192 <= img_inT_16_fu_428_p35;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln14_fu_424_p1 == 4'd1) & (icmp_ln14_fu_412_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_1_fu_136 <= img_inT_16_fu_428_p35;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln14_fu_424_p1 == 4'd2) & (icmp_ln14_fu_412_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_2_fu_140 <= img_inT_16_fu_428_p35;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln14_fu_424_p1 == 4'd3) & (icmp_ln14_fu_412_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_3_fu_144 <= img_inT_16_fu_428_p35;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln14_fu_424_p1 == 4'd4) & (icmp_ln14_fu_412_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_4_fu_148 <= img_inT_16_fu_428_p35;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln14_fu_424_p1 == 4'd5) & (icmp_ln14_fu_412_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_5_fu_152 <= img_inT_16_fu_428_p35;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln14_fu_424_p1 == 4'd6) & (icmp_ln14_fu_412_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_6_fu_156 <= img_inT_16_fu_428_p35;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln14_fu_424_p1 == 4'd7) & (icmp_ln14_fu_412_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_7_fu_160 <= img_inT_16_fu_428_p35;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln14_fu_424_p1 == 4'd8) & (icmp_ln14_fu_412_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_8_fu_164 <= img_inT_16_fu_428_p35;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln14_fu_424_p1 == 4'd9) & (icmp_ln14_fu_412_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_9_fu_168 <= img_inT_16_fu_428_p35;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln14_fu_424_p1 == 4'd0) & (icmp_ln14_fu_412_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_fu_132 <= img_inT_16_fu_428_p35;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_412_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_2 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_128;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_412_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_10_out_ap_vld = 1'b1;
    end else begin
        img_inT_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_412_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_11_out_ap_vld = 1'b1;
    end else begin
        img_inT_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_412_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_12_out_ap_vld = 1'b1;
    end else begin
        img_inT_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_412_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_13_out_ap_vld = 1'b1;
    end else begin
        img_inT_13_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_412_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_14_out_ap_vld = 1'b1;
    end else begin
        img_inT_14_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_412_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_15_out_ap_vld = 1'b1;
    end else begin
        img_inT_15_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_412_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_1_out_ap_vld = 1'b1;
    end else begin
        img_inT_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_412_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_2_out_ap_vld = 1'b1;
    end else begin
        img_inT_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_412_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_3_out_ap_vld = 1'b1;
    end else begin
        img_inT_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_412_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_4_out_ap_vld = 1'b1;
    end else begin
        img_inT_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_412_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_5_out_ap_vld = 1'b1;
    end else begin
        img_inT_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_412_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_6_out_ap_vld = 1'b1;
    end else begin
        img_inT_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_412_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_7_out_ap_vld = 1'b1;
    end else begin
        img_inT_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_412_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_8_out_ap_vld = 1'b1;
    end else begin
        img_inT_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_412_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_9_out_ap_vld = 1'b1;
    end else begin
        img_inT_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_412_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inT_out_ap_vld = 1'b1;
    end else begin
        img_inT_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_418_p2 = (ap_sig_allocacmp_i_2 + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln14_fu_412_p2 = ((ap_sig_allocacmp_i_2 == 5'd16) ? 1'b1 : 1'b0);

assign img_inT_10_out = img_inT_10_fu_172;

assign img_inT_11_out = img_inT_11_fu_176;

assign img_inT_12_out = img_inT_12_fu_180;

assign img_inT_13_out = img_inT_13_fu_184;

assign img_inT_14_out = img_inT_14_fu_188;

assign img_inT_15_out = img_inT_15_fu_192;

assign img_inT_16_fu_428_p33 = 'bx;

assign img_inT_16_fu_428_p34 = ap_sig_allocacmp_i_2[3:0];

assign img_inT_1_out = img_inT_1_fu_136;

assign img_inT_2_out = img_inT_2_fu_140;

assign img_inT_3_out = img_inT_3_fu_144;

assign img_inT_4_out = img_inT_4_fu_148;

assign img_inT_5_out = img_inT_5_fu_152;

assign img_inT_6_out = img_inT_6_fu_156;

assign img_inT_7_out = img_inT_7_fu_160;

assign img_inT_8_out = img_inT_8_fu_164;

assign img_inT_9_out = img_inT_9_fu_168;

assign img_inT_out = img_inT_fu_132;

assign trunc_ln14_fu_424_p1 = ap_sig_allocacmp_i_2[3:0];

endmodule //conv2D0_conv2D0_Pipeline_readImg
