// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv2D0_conv2D0,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.492000,HLS_SYN_LAT=12,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=301,HLS_SYN_LUT=989,HLS_VERSION=2023_2}" *)

module conv2D0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_in_address0,
        img_in_ce0,
        img_in_q0,
        img_in_address1,
        img_in_ce1,
        img_in_q1,
        img_out_address0,
        img_out_ce0,
        img_out_we0,
        img_out_d0,
        img_out_address1,
        img_out_ce1,
        img_out_we1,
        img_out_d1,
        weights_address0,
        weights_ce0,
        weights_q0,
        weights_address1,
        weights_ce1,
        weights_q1
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] img_in_address0;
output   img_in_ce0;
input  [7:0] img_in_q0;
output  [3:0] img_in_address1;
output   img_in_ce1;
input  [7:0] img_in_q1;
output  [1:0] img_out_address0;
output   img_out_ce0;
output   img_out_we0;
output  [7:0] img_out_d0;
output  [1:0] img_out_address1;
output   img_out_ce1;
output   img_out_we1;
output  [7:0] img_out_d1;
output  [3:0] weights_address0;
output   weights_ce0;
input  [7:0] weights_q0;
output  [3:0] weights_address1;
output   weights_ce1;
input  [7:0] weights_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] img_in_address0;
reg img_in_ce0;
reg[3:0] img_in_address1;
reg img_in_ce1;
reg[1:0] img_out_address0;
reg img_out_ce0;
reg img_out_we0;
reg[7:0] img_out_d0;
reg[1:0] img_out_address1;
reg img_out_ce1;
reg img_out_we1;
reg[7:0] img_out_d1;
reg[3:0] weights_address0;
reg weights_ce0;
reg[3:0] weights_address1;
reg weights_ce1;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [7:0] reg_342;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state9;
reg  signed [7:0] reg_346;
reg  signed [7:0] reg_350;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state8;
reg  signed [7:0] reg_355;
wire    ap_CS_fsm_state4;
reg  signed [7:0] reg_360;
reg  signed [7:0] reg_364;
wire    ap_CS_fsm_state7;
wire   [7:0] grp_fu_368_p2;
wire   [7:0] grp_fu_373_p2;
reg  signed [7:0] img_inT_14_reg_670;
reg  signed [7:0] img_inT_1_reg_681;
reg  signed [7:0] img_inT_4_reg_707;
wire    ap_CS_fsm_state5;
reg  signed [7:0] img_inT_5_reg_713;
reg  signed [7:0] weightsT_reg_731;
reg  signed [7:0] weightsT_3_reg_739;
reg  signed [7:0] img_inT_6_reg_757;
wire    ap_CS_fsm_state6;
reg  signed [7:0] img_inT_7_reg_765;
reg  signed [7:0] weightsT_5_reg_786;
reg  signed [7:0] weightsT_6_reg_794;
reg  signed [7:0] img_inT_8_reg_807;
reg  signed [7:0] img_inT_9_reg_813;
reg  signed [7:0] weightsT_1_reg_830;
wire   [7:0] mul_ln37_fu_387_p2;
wire   [7:0] mul_ln37_24_fu_391_p2;
reg   [7:0] mul_ln37_24_reg_863;
wire   [7:0] mul_ln37_33_fu_397_p2;
wire   [7:0] mul_ln37_3_fu_402_p2;
wire   [7:0] grp_fu_499_p3;
reg  signed [7:0] add_ln37_reg_878;
wire   [7:0] grp_fu_506_p3;
wire   [7:0] mul_ln37_12_fu_407_p2;
wire   [7:0] grp_fu_514_p3;
wire   [7:0] grp_fu_522_p3;
reg   [7:0] add_ln37_28_reg_898;
wire   [7:0] mul_ln37_1_fu_412_p2;
wire    ap_CS_fsm_state10;
(* use_dsp48 = "no" *) wire   [7:0] add_ln37_6_fu_418_p2;
reg   [7:0] add_ln37_6_reg_908;
wire   [7:0] mul_ln37_9_fu_422_p2;
wire   [7:0] mul_ln37_10_fu_427_p2;
(* use_dsp48 = "no" *) wire   [7:0] add_ln37_14_fu_433_p2;
reg   [7:0] add_ln37_14_reg_923;
wire   [7:0] mul_ln37_18_fu_437_p2;
wire   [7:0] mul_ln37_19_fu_441_p2;
wire   [7:0] grp_fu_560_p3;
reg  signed [7:0] add_ln37_19_reg_938;
wire   [7:0] grp_fu_567_p3;
wire   [7:0] mul_ln37_27_fu_446_p2;
wire   [7:0] mul_ln37_28_fu_450_p2;
wire   [7:0] grp_fu_573_p3;
reg  signed [7:0] add_ln37_27_reg_958;
wire   [7:0] acc_8_fu_459_p2;
reg   [7:0] acc_8_reg_963;
wire    ap_CS_fsm_state11;
wire   [7:0] acc_9_fu_468_p2;
reg   [7:0] acc_9_reg_968;
wire   [7:0] grp_fu_601_p3;
reg  signed [7:0] add_ln37_16_reg_973;
wire   [7:0] grp_fu_607_p3;
reg  signed [7:0] add_ln37_17_reg_978;
(* use_dsp48 = "no" *) wire   [7:0] add_ln37_22_fu_473_p2;
reg   [7:0] add_ln37_22_reg_983;
wire   [7:0] grp_fu_621_p3;
reg  signed [7:0] add_ln37_24_reg_988;
wire   [7:0] grp_fu_627_p3;
reg  signed [7:0] add_ln37_25_reg_993;
(* use_dsp48 = "no" *) wire   [7:0] add_ln37_30_fu_477_p2;
reg   [7:0] add_ln37_30_reg_998;
wire   [7:0] acc_10_fu_485_p2;
reg   [7:0] acc_10_reg_1003;
wire    ap_CS_fsm_state12;
wire   [7:0] acc_11_fu_494_p2;
reg   [7:0] acc_11_reg_1008;
wire    ap_CS_fsm_state13;
wire  signed [7:0] add_ln37_6_fu_418_p0;
wire   [7:0] grp_fu_537_p3;
wire  signed [7:0] add_ln37_6_fu_418_p1;
wire   [7:0] grp_fu_530_p3;
wire  signed [7:0] add_ln37_14_fu_433_p0;
wire   [7:0] grp_fu_552_p3;
wire  signed [7:0] add_ln37_14_fu_433_p1;
wire   [7:0] grp_fu_545_p3;
wire  signed [7:0] add_ln37_2_fu_455_p0;
wire   [7:0] grp_fu_580_p3;
(* use_dsp48 = "no" *) wire   [7:0] add_ln37_2_fu_455_p2;
wire  signed [7:0] add_ln37_10_fu_464_p0;
wire   [7:0] grp_fu_594_p3;
wire  signed [7:0] add_ln37_10_fu_464_p1;
wire   [7:0] grp_fu_587_p3;
(* use_dsp48 = "no" *) wire   [7:0] add_ln37_10_fu_464_p2;
wire  signed [7:0] add_ln37_22_fu_473_p0;
wire   [7:0] grp_fu_613_p3;
wire  signed [7:0] add_ln37_30_fu_477_p0;
wire   [7:0] grp_fu_633_p3;
(* use_dsp48 = "no" *) wire   [7:0] add_ln37_18_fu_481_p2;
(* use_dsp48 = "no" *) wire   [7:0] add_ln37_26_fu_490_p2;
reg   [12:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U1(
    .din0(reg_364),
    .din1(img_inT_9_reg_813),
    .dout(grp_fu_368_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U2(
    .din0(reg_364),
    .din1(reg_342),
    .dout(grp_fu_373_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U3(
    .din0(weightsT_1_reg_830),
    .din1(img_inT_1_reg_681),
    .dout(mul_ln37_fu_387_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U4(
    .din0(reg_364),
    .din1(img_in_q0),
    .dout(mul_ln37_24_fu_391_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U5(
    .din0(reg_364),
    .din1(img_inT_14_reg_670),
    .dout(mul_ln37_33_fu_397_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U6(
    .din0(reg_364),
    .din1(img_inT_5_reg_713),
    .dout(mul_ln37_3_fu_402_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U7(
    .din0(reg_364),
    .din1(img_inT_6_reg_757),
    .dout(mul_ln37_12_fu_407_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U8(
    .din0(reg_360),
    .din1(reg_342),
    .dout(mul_ln37_1_fu_412_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U9(
    .din0(weightsT_1_reg_830),
    .din1(reg_342),
    .dout(mul_ln37_9_fu_422_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U10(
    .din0(reg_360),
    .din1(reg_346),
    .dout(mul_ln37_10_fu_427_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U11(
    .din0(weightsT_1_reg_830),
    .din1(img_inT_5_reg_713),
    .dout(mul_ln37_18_fu_437_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U12(
    .din0(reg_360),
    .din1(img_inT_6_reg_757),
    .dout(mul_ln37_19_fu_441_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U13(
    .din0(weightsT_1_reg_830),
    .din1(img_inT_6_reg_757),
    .dout(mul_ln37_27_fu_446_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U14(
    .din0(reg_360),
    .din1(img_inT_7_reg_765),
    .dout(mul_ln37_28_fu_450_p2)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weightsT_reg_731),
    .din1(reg_355),
    .din2(mul_ln37_fu_387_p2),
    .ce(1'b1),
    .dout(grp_fu_499_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_360),
    .din1(reg_342),
    .din2(grp_fu_368_p2),
    .ce(1'b1),
    .dout(grp_fu_506_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_360),
    .din1(reg_346),
    .din2(grp_fu_373_p2),
    .ce(1'b1),
    .dout(grp_fu_514_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_360),
    .din1(reg_350),
    .din2(mul_ln37_33_fu_397_p2),
    .ce(1'b1),
    .dout(grp_fu_522_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weightsT_5_reg_786),
    .din1(img_inT_6_reg_757),
    .din2(mul_ln37_3_fu_402_p2),
    .ce(1'b1),
    .dout(grp_fu_530_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weightsT_6_reg_794),
    .din1(img_in_q1),
    .din2(grp_fu_506_p3),
    .ce(1'b1),
    .dout(grp_fu_537_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weightsT_5_reg_786),
    .din1(img_inT_7_reg_765),
    .din2(mul_ln37_12_fu_407_p2),
    .ce(1'b1),
    .dout(grp_fu_545_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weightsT_6_reg_794),
    .din1(img_in_q0),
    .din2(grp_fu_514_p3),
    .ce(1'b1),
    .dout(grp_fu_552_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weightsT_5_reg_786),
    .din1(reg_342),
    .din2(grp_fu_368_p2),
    .ce(1'b1),
    .dout(grp_fu_560_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_360),
    .din1(img_inT_14_reg_670),
    .din2(mul_ln37_24_reg_863),
    .ce(1'b1),
    .dout(grp_fu_567_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weightsT_5_reg_786),
    .din1(reg_346),
    .din2(grp_fu_373_p2),
    .ce(1'b1),
    .dout(grp_fu_573_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weightsT_3_reg_739),
    .din1(img_inT_4_reg_707),
    .din2(mul_ln37_1_fu_412_p2),
    .ce(1'b1),
    .dout(grp_fu_580_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weightsT_reg_731),
    .din1(img_inT_1_reg_681),
    .din2(mul_ln37_9_fu_422_p2),
    .ce(1'b1),
    .dout(grp_fu_587_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weightsT_3_reg_739),
    .din1(img_inT_5_reg_713),
    .din2(mul_ln37_10_fu_427_p2),
    .ce(1'b1),
    .dout(grp_fu_594_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weightsT_reg_731),
    .din1(img_inT_4_reg_707),
    .din2(mul_ln37_18_fu_437_p2),
    .ce(1'b1),
    .dout(grp_fu_601_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weightsT_3_reg_739),
    .din1(img_inT_8_reg_807),
    .din2(mul_ln37_19_fu_441_p2),
    .ce(1'b1),
    .dout(grp_fu_607_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weightsT_6_reg_794),
    .din1(img_in_q1),
    .din2(grp_fu_567_p3),
    .ce(1'b1),
    .dout(grp_fu_613_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weightsT_reg_731),
    .din1(img_inT_5_reg_713),
    .din2(mul_ln37_27_fu_446_p2),
    .ce(1'b1),
    .dout(grp_fu_621_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weightsT_3_reg_739),
    .din1(img_inT_9_reg_813),
    .din2(mul_ln37_28_fu_450_p2),
    .ce(1'b1),
    .dout(grp_fu_627_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weightsT_6_reg_794),
    .din1(img_in_q0),
    .din2(add_ln37_28_reg_898),
    .ce(1'b1),
    .dout(grp_fu_633_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        reg_350 <= img_in_q1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        reg_350 <= img_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        reg_355 <= img_in_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        reg_355 <= img_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        acc_10_reg_1003 <= acc_10_fu_485_p2;
        acc_11_reg_1008 <= acc_11_fu_494_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        acc_8_reg_963 <= acc_8_fu_459_p2;
        acc_9_reg_968 <= acc_9_fu_468_p2;
        add_ln37_16_reg_973 <= grp_fu_601_p3;
        add_ln37_17_reg_978 <= grp_fu_607_p3;
        add_ln37_22_reg_983 <= add_ln37_22_fu_473_p2;
        add_ln37_24_reg_988 <= grp_fu_621_p3;
        add_ln37_25_reg_993 <= grp_fu_627_p3;
        add_ln37_30_reg_998 <= add_ln37_30_fu_477_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln37_14_reg_923 <= add_ln37_14_fu_433_p2;
        add_ln37_19_reg_938 <= grp_fu_560_p3;
        add_ln37_27_reg_958 <= grp_fu_573_p3;
        add_ln37_6_reg_908 <= add_ln37_6_fu_418_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln37_28_reg_898 <= grp_fu_522_p3;
        add_ln37_reg_878 <= grp_fu_499_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        img_inT_14_reg_670 <= img_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        img_inT_1_reg_681 <= img_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        img_inT_4_reg_707 <= img_in_q1;
        img_inT_5_reg_713 <= img_in_q0;
        weightsT_3_reg_739 <= weights_q0;
        weightsT_reg_731 <= weights_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        img_inT_6_reg_757 <= img_in_q1;
        img_inT_7_reg_765 <= img_in_q0;
        weightsT_5_reg_786 <= weights_q0;
        weightsT_6_reg_794 <= weights_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        img_inT_8_reg_807 <= img_in_q1;
        img_inT_9_reg_813 <= img_in_q0;
        weightsT_1_reg_830 <= weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul_ln37_24_reg_863 <= mul_ln37_24_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_342 <= img_in_q1;
        reg_346 <= img_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_360 <= weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_364 <= weights_q1;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img_in_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        img_in_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        img_in_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        img_in_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        img_in_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        img_in_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        img_in_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        img_in_address0 = 64'd11;
    end else begin
        img_in_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img_in_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        img_in_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        img_in_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        img_in_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        img_in_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        img_in_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        img_in_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        img_in_address1 = 64'd10;
    end else begin
        img_in_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        img_in_ce0 = 1'b1;
    end else begin
        img_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        img_in_ce1 = 1'b1;
    end else begin
        img_in_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        img_out_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        img_out_address0 = 64'd1;
    end else begin
        img_out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        img_out_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        img_out_address1 = 64'd0;
    end else begin
        img_out_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        img_out_ce0 = 1'b1;
    end else begin
        img_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        img_out_ce1 = 1'b1;
    end else begin
        img_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        img_out_d0 = acc_11_reg_1008;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        img_out_d0 = acc_9_reg_968;
    end else begin
        img_out_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        img_out_d1 = acc_10_reg_1003;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        img_out_d1 = acc_8_reg_963;
    end else begin
        img_out_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        img_out_we0 = 1'b1;
    end else begin
        img_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        img_out_we1 = 1'b1;
    end else begin
        img_out_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        weights_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        weights_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        weights_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        weights_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        weights_address0 = 64'd8;
    end else begin
        weights_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weights_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        weights_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        weights_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        weights_address1 = 64'd0;
    end else begin
        weights_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        weights_ce0 = 1'b1;
    end else begin
        weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        weights_ce1 = 1'b1;
    end else begin
        weights_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_10_fu_485_p2 = (add_ln37_22_reg_983 + add_ln37_18_fu_481_p2);

assign acc_11_fu_494_p2 = (add_ln37_30_reg_998 + add_ln37_26_fu_490_p2);

assign acc_8_fu_459_p2 = (add_ln37_6_reg_908 + add_ln37_2_fu_455_p2);

assign acc_9_fu_468_p2 = (add_ln37_14_reg_923 + add_ln37_10_fu_464_p2);

assign add_ln37_10_fu_464_p0 = grp_fu_594_p3;

assign add_ln37_10_fu_464_p1 = grp_fu_587_p3;

assign add_ln37_10_fu_464_p2 = ($signed(add_ln37_10_fu_464_p0) + $signed(add_ln37_10_fu_464_p1));

assign add_ln37_14_fu_433_p0 = grp_fu_552_p3;

assign add_ln37_14_fu_433_p1 = grp_fu_545_p3;

assign add_ln37_14_fu_433_p2 = ($signed(add_ln37_14_fu_433_p0) + $signed(add_ln37_14_fu_433_p1));

assign add_ln37_18_fu_481_p2 = ($signed(add_ln37_17_reg_978) + $signed(add_ln37_16_reg_973));

assign add_ln37_22_fu_473_p0 = grp_fu_613_p3;

assign add_ln37_22_fu_473_p2 = ($signed(add_ln37_22_fu_473_p0) + $signed(add_ln37_19_reg_938));

assign add_ln37_26_fu_490_p2 = ($signed(add_ln37_25_reg_993) + $signed(add_ln37_24_reg_988));

assign add_ln37_2_fu_455_p0 = grp_fu_580_p3;

assign add_ln37_2_fu_455_p2 = ($signed(add_ln37_2_fu_455_p0) + $signed(add_ln37_reg_878));

assign add_ln37_30_fu_477_p0 = grp_fu_633_p3;

assign add_ln37_30_fu_477_p2 = ($signed(add_ln37_30_fu_477_p0) + $signed(add_ln37_27_reg_958));

assign add_ln37_6_fu_418_p0 = grp_fu_537_p3;

assign add_ln37_6_fu_418_p1 = grp_fu_530_p3;

assign add_ln37_6_fu_418_p2 = ($signed(add_ln37_6_fu_418_p0) + $signed(add_ln37_6_fu_418_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

endmodule //conv2D0
