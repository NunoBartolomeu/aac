-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2D0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_in_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    img_in_ce0 : OUT STD_LOGIC;
    img_in_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    img_in_ce1 : OUT STD_LOGIC;
    img_in_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_out_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    img_out_ce0 : OUT STD_LOGIC;
    img_out_we0 : OUT STD_LOGIC;
    img_out_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_out_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    img_out_ce1 : OUT STD_LOGIC;
    img_out_we1 : OUT STD_LOGIC;
    img_out_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weights_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weights_ce0 : OUT STD_LOGIC;
    weights_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weights_ce1 : OUT STD_LOGIC;
    weights_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of conv2D0 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2D0_conv2D0,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.492000,HLS_SYN_LAT=12,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=301,HLS_SYN_LUT=989,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_342 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal reg_346 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_350 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal reg_355 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal reg_360 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_364 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_368_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_373_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_inT_14_reg_670 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_inT_1_reg_681 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_inT_4_reg_707 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal img_inT_5_reg_713 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_reg_731 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_3_reg_739 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_inT_6_reg_757 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal img_inT_7_reg_765 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_5_reg_786 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_6_reg_794 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_inT_8_reg_807 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_inT_9_reg_813 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_1_reg_830 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln37_fu_387_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln37_24_fu_391_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln37_24_reg_863 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln37_33_fu_397_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln37_3_fu_402_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_499_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_reg_878 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_506_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln37_12_fu_407_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_514_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_522_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_28_reg_898 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln37_1_fu_412_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln37_6_fu_418_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln37_6_fu_418_p2 : signal is "no";
    signal add_ln37_6_reg_908 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln37_9_fu_422_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln37_10_fu_427_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_14_fu_433_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln37_14_fu_433_p2 : signal is "no";
    signal add_ln37_14_reg_923 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln37_18_fu_437_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln37_19_fu_441_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_560_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_19_reg_938 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_567_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln37_27_fu_446_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln37_28_fu_450_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_573_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_27_reg_958 : STD_LOGIC_VECTOR (7 downto 0);
    signal acc_8_fu_459_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal acc_8_reg_963 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal acc_9_fu_468_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal acc_9_reg_968 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_601_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_16_reg_973 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_607_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_17_reg_978 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_22_fu_473_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln37_22_fu_473_p2 : signal is "no";
    signal add_ln37_22_reg_983 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_621_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_24_reg_988 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_627_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_25_reg_993 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_30_fu_477_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln37_30_fu_477_p2 : signal is "no";
    signal add_ln37_30_reg_998 : STD_LOGIC_VECTOR (7 downto 0);
    signal acc_10_fu_485_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal acc_10_reg_1003 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal acc_11_fu_494_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal acc_11_reg_1008 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln37_6_fu_418_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_537_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_6_fu_418_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_530_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_14_fu_433_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_552_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_14_fu_433_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_545_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_2_fu_455_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_580_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_2_fu_455_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln37_2_fu_455_p2 : signal is "no";
    signal add_ln37_10_fu_464_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_594_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_10_fu_464_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_587_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_10_fu_464_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln37_10_fu_464_p2 : signal is "no";
    signal add_ln37_22_fu_473_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_613_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_30_fu_477_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_633_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_18_fu_481_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln37_18_fu_481_p2 : signal is "no";
    signal add_ln37_26_fu_490_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln37_26_fu_490_p2 : signal is "no";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component conv2D0_mul_8s_8s_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv2D0_mac_muladd_8s_8s_8ns_8_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    mul_8s_8s_8_1_1_U1 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => reg_364,
        din1 => img_inT_9_reg_813,
        dout => grp_fu_368_p2);

    mul_8s_8s_8_1_1_U2 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => reg_364,
        din1 => reg_342,
        dout => grp_fu_373_p2);

    mul_8s_8s_8_1_1_U3 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weightsT_1_reg_830,
        din1 => img_inT_1_reg_681,
        dout => mul_ln37_fu_387_p2);

    mul_8s_8s_8_1_1_U4 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => reg_364,
        din1 => img_in_q0,
        dout => mul_ln37_24_fu_391_p2);

    mul_8s_8s_8_1_1_U5 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => reg_364,
        din1 => img_inT_14_reg_670,
        dout => mul_ln37_33_fu_397_p2);

    mul_8s_8s_8_1_1_U6 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => reg_364,
        din1 => img_inT_5_reg_713,
        dout => mul_ln37_3_fu_402_p2);

    mul_8s_8s_8_1_1_U7 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => reg_364,
        din1 => img_inT_6_reg_757,
        dout => mul_ln37_12_fu_407_p2);

    mul_8s_8s_8_1_1_U8 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => reg_360,
        din1 => reg_342,
        dout => mul_ln37_1_fu_412_p2);

    mul_8s_8s_8_1_1_U9 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weightsT_1_reg_830,
        din1 => reg_342,
        dout => mul_ln37_9_fu_422_p2);

    mul_8s_8s_8_1_1_U10 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => reg_360,
        din1 => reg_346,
        dout => mul_ln37_10_fu_427_p2);

    mul_8s_8s_8_1_1_U11 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weightsT_1_reg_830,
        din1 => img_inT_5_reg_713,
        dout => mul_ln37_18_fu_437_p2);

    mul_8s_8s_8_1_1_U12 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => reg_360,
        din1 => img_inT_6_reg_757,
        dout => mul_ln37_19_fu_441_p2);

    mul_8s_8s_8_1_1_U13 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weightsT_1_reg_830,
        din1 => img_inT_6_reg_757,
        dout => mul_ln37_27_fu_446_p2);

    mul_8s_8s_8_1_1_U14 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => reg_360,
        din1 => img_inT_7_reg_765,
        dout => mul_ln37_28_fu_450_p2);

    mac_muladd_8s_8s_8ns_8_4_1_U15 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weightsT_reg_731,
        din1 => reg_355,
        din2 => mul_ln37_fu_387_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_499_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U16 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_360,
        din1 => reg_342,
        din2 => grp_fu_368_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_506_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U17 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_360,
        din1 => reg_346,
        din2 => grp_fu_373_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_514_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U18 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_360,
        din1 => reg_350,
        din2 => mul_ln37_33_fu_397_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_522_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U19 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weightsT_5_reg_786,
        din1 => img_inT_6_reg_757,
        din2 => mul_ln37_3_fu_402_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_530_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U20 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weightsT_6_reg_794,
        din1 => img_in_q1,
        din2 => grp_fu_506_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_537_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U21 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weightsT_5_reg_786,
        din1 => img_inT_7_reg_765,
        din2 => mul_ln37_12_fu_407_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_545_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U22 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weightsT_6_reg_794,
        din1 => img_in_q0,
        din2 => grp_fu_514_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_552_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U23 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weightsT_5_reg_786,
        din1 => reg_342,
        din2 => grp_fu_368_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_560_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U24 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_360,
        din1 => img_inT_14_reg_670,
        din2 => mul_ln37_24_reg_863,
        ce => ap_const_logic_1,
        dout => grp_fu_567_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U25 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weightsT_5_reg_786,
        din1 => reg_346,
        din2 => grp_fu_373_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_573_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U26 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weightsT_3_reg_739,
        din1 => img_inT_4_reg_707,
        din2 => mul_ln37_1_fu_412_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_580_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U27 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weightsT_reg_731,
        din1 => img_inT_1_reg_681,
        din2 => mul_ln37_9_fu_422_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_587_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U28 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weightsT_3_reg_739,
        din1 => img_inT_5_reg_713,
        din2 => mul_ln37_10_fu_427_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_594_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U29 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weightsT_reg_731,
        din1 => img_inT_4_reg_707,
        din2 => mul_ln37_18_fu_437_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_601_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U30 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weightsT_3_reg_739,
        din1 => img_inT_8_reg_807,
        din2 => mul_ln37_19_fu_441_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_607_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U31 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weightsT_6_reg_794,
        din1 => img_in_q1,
        din2 => grp_fu_567_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_613_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U32 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weightsT_reg_731,
        din1 => img_inT_5_reg_713,
        din2 => mul_ln37_27_fu_446_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_621_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U33 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weightsT_3_reg_739,
        din1 => img_inT_9_reg_813,
        din2 => mul_ln37_28_fu_450_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_627_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U34 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weightsT_6_reg_794,
        din1 => img_in_q0,
        din2 => add_ln37_28_reg_898,
        ce => ap_const_logic_1,
        dout => grp_fu_633_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_350 <= img_in_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                reg_350 <= img_in_q0;
            end if; 
        end if;
    end process;

    reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_355 <= img_in_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_355 <= img_in_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                acc_10_reg_1003 <= acc_10_fu_485_p2;
                acc_11_reg_1008 <= acc_11_fu_494_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                acc_8_reg_963 <= acc_8_fu_459_p2;
                acc_9_reg_968 <= acc_9_fu_468_p2;
                add_ln37_16_reg_973 <= grp_fu_601_p3;
                add_ln37_17_reg_978 <= grp_fu_607_p3;
                add_ln37_22_reg_983 <= add_ln37_22_fu_473_p2;
                add_ln37_24_reg_988 <= grp_fu_621_p3;
                add_ln37_25_reg_993 <= grp_fu_627_p3;
                add_ln37_30_reg_998 <= add_ln37_30_fu_477_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln37_14_reg_923 <= add_ln37_14_fu_433_p2;
                add_ln37_19_reg_938 <= grp_fu_560_p3;
                add_ln37_27_reg_958 <= grp_fu_573_p3;
                add_ln37_6_reg_908 <= add_ln37_6_fu_418_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln37_28_reg_898 <= grp_fu_522_p3;
                add_ln37_reg_878 <= grp_fu_499_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                img_inT_14_reg_670 <= img_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                img_inT_1_reg_681 <= img_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                img_inT_4_reg_707 <= img_in_q1;
                img_inT_5_reg_713 <= img_in_q0;
                weightsT_3_reg_739 <= weights_q0;
                weightsT_reg_731 <= weights_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                img_inT_6_reg_757 <= img_in_q1;
                img_inT_7_reg_765 <= img_in_q0;
                weightsT_5_reg_786 <= weights_q0;
                weightsT_6_reg_794 <= weights_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                img_inT_8_reg_807 <= img_in_q1;
                img_inT_9_reg_813 <= img_in_q0;
                weightsT_1_reg_830 <= weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                mul_ln37_24_reg_863 <= mul_ln37_24_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_342 <= img_in_q1;
                reg_346 <= img_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_360 <= weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_364 <= weights_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    acc_10_fu_485_p2 <= std_logic_vector(unsigned(add_ln37_22_reg_983) + unsigned(add_ln37_18_fu_481_p2));
    acc_11_fu_494_p2 <= std_logic_vector(unsigned(add_ln37_30_reg_998) + unsigned(add_ln37_26_fu_490_p2));
    acc_8_fu_459_p2 <= std_logic_vector(unsigned(add_ln37_6_reg_908) + unsigned(add_ln37_2_fu_455_p2));
    acc_9_fu_468_p2 <= std_logic_vector(unsigned(add_ln37_14_reg_923) + unsigned(add_ln37_10_fu_464_p2));
    add_ln37_10_fu_464_p0 <= grp_fu_594_p3;
    add_ln37_10_fu_464_p1 <= grp_fu_587_p3;
    add_ln37_10_fu_464_p2 <= std_logic_vector(signed(add_ln37_10_fu_464_p0) + signed(add_ln37_10_fu_464_p1));
    add_ln37_14_fu_433_p0 <= grp_fu_552_p3;
    add_ln37_14_fu_433_p1 <= grp_fu_545_p3;
    add_ln37_14_fu_433_p2 <= std_logic_vector(signed(add_ln37_14_fu_433_p0) + signed(add_ln37_14_fu_433_p1));
    add_ln37_18_fu_481_p2 <= std_logic_vector(signed(add_ln37_17_reg_978) + signed(add_ln37_16_reg_973));
    add_ln37_22_fu_473_p0 <= grp_fu_613_p3;
    add_ln37_22_fu_473_p2 <= std_logic_vector(signed(add_ln37_22_fu_473_p0) + signed(add_ln37_19_reg_938));
    add_ln37_26_fu_490_p2 <= std_logic_vector(signed(add_ln37_25_reg_993) + signed(add_ln37_24_reg_988));
    add_ln37_2_fu_455_p0 <= grp_fu_580_p3;
    add_ln37_2_fu_455_p2 <= std_logic_vector(signed(add_ln37_2_fu_455_p0) + signed(add_ln37_reg_878));
    add_ln37_30_fu_477_p0 <= grp_fu_633_p3;
    add_ln37_30_fu_477_p2 <= std_logic_vector(signed(add_ln37_30_fu_477_p0) + signed(add_ln37_27_reg_958));
    add_ln37_6_fu_418_p0 <= grp_fu_537_p3;
    add_ln37_6_fu_418_p1 <= grp_fu_530_p3;
    add_ln37_6_fu_418_p2 <= std_logic_vector(signed(add_ln37_6_fu_418_p0) + signed(add_ln37_6_fu_418_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    img_in_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            img_in_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            img_in_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            img_in_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            img_in_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_in_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            img_in_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            img_in_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            img_in_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        else 
            img_in_address0 <= "XXXX";
        end if; 
    end process;


    img_in_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            img_in_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            img_in_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            img_in_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            img_in_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_in_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            img_in_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            img_in_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            img_in_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        else 
            img_in_address1 <= "XXXX";
        end if; 
    end process;


    img_in_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            img_in_ce0 <= ap_const_logic_1;
        else 
            img_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    img_in_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            img_in_ce1 <= ap_const_logic_1;
        else 
            img_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    img_out_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            img_out_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            img_out_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            img_out_address0 <= "XX";
        end if; 
    end process;


    img_out_address1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            img_out_address1 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            img_out_address1 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            img_out_address1 <= "XX";
        end if; 
    end process;


    img_out_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            img_out_ce0 <= ap_const_logic_1;
        else 
            img_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    img_out_ce1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            img_out_ce1 <= ap_const_logic_1;
        else 
            img_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    img_out_d0_assign_proc : process(acc_9_reg_968, ap_CS_fsm_state12, acc_11_reg_1008, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            img_out_d0 <= acc_11_reg_1008;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            img_out_d0 <= acc_9_reg_968;
        else 
            img_out_d0 <= "XXXXXXXX";
        end if; 
    end process;


    img_out_d1_assign_proc : process(acc_8_reg_963, acc_10_reg_1003, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            img_out_d1 <= acc_10_reg_1003;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            img_out_d1 <= acc_8_reg_963;
        else 
            img_out_d1 <= "XXXXXXXX";
        end if; 
    end process;


    img_out_we0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            img_out_we0 <= ap_const_logic_1;
        else 
            img_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    img_out_we1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            img_out_we1 <= ap_const_logic_1;
        else 
            img_out_we1 <= ap_const_logic_0;
        end if; 
    end process;


    weights_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weights_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weights_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        else 
            weights_address0 <= "XXXX";
        end if; 
    end process;


    weights_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weights_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weights_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            weights_address1 <= "XXXX";
        end if; 
    end process;


    weights_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            weights_ce0 <= ap_const_logic_1;
        else 
            weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            weights_ce1 <= ap_const_logic_1;
        else 
            weights_ce1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
