-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2D0_conv2D0_Pipeline_loop_orow_loop_ocol is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_inT_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    img_inT_ce0 : OUT STD_LOGIC;
    img_inT_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    img_inT_ce1 : OUT STD_LOGIC;
    img_inT_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_address2 : OUT STD_LOGIC_VECTOR (2 downto 0);
    img_inT_ce2 : OUT STD_LOGIC;
    img_inT_q2 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_address3 : OUT STD_LOGIC_VECTOR (2 downto 0);
    img_inT_ce3 : OUT STD_LOGIC;
    img_inT_q3 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_address4 : OUT STD_LOGIC_VECTOR (2 downto 0);
    img_inT_ce4 : OUT STD_LOGIC;
    img_inT_q4 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_address5 : OUT STD_LOGIC_VECTOR (2 downto 0);
    img_inT_ce5 : OUT STD_LOGIC;
    img_inT_q5 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    img_inT_1_ce0 : OUT STD_LOGIC;
    img_inT_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    img_inT_1_ce1 : OUT STD_LOGIC;
    img_inT_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_1_address2 : OUT STD_LOGIC_VECTOR (2 downto 0);
    img_inT_1_ce2 : OUT STD_LOGIC;
    img_inT_1_q2 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_1_address3 : OUT STD_LOGIC_VECTOR (2 downto 0);
    img_inT_1_ce3 : OUT STD_LOGIC;
    img_inT_1_q3 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_1_address4 : OUT STD_LOGIC_VECTOR (2 downto 0);
    img_inT_1_ce4 : OUT STD_LOGIC;
    img_inT_1_q4 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_1_address5 : OUT STD_LOGIC_VECTOR (2 downto 0);
    img_inT_1_ce5 : OUT STD_LOGIC;
    img_inT_1_q5 : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_load : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_load_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_load_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_load_3 : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_load_4 : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_1_load : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_1_load_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_1_load_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_1_load_3 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_outT_1_1_load15_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_outT_1_1_load15_out_ap_vld : OUT STD_LOGIC;
    img_outT_0_1_load11_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_outT_0_1_load11_out_ap_vld : OUT STD_LOGIC;
    img_outT_1_load7_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_outT_1_load7_out_ap_vld : OUT STD_LOGIC;
    img_outT_0_load3_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_outT_0_load3_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of conv2D0_conv2D0_Pipeline_loop_orow_loop_ocol is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln26_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln26_reg_803 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_803_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_803_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_803_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_803_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_396_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_807 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_807_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_807_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_807_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_807_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_807_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_841 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln36_fu_530_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln36_reg_878 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln36_reg_878_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln36_reg_878_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln36_reg_878_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln36_reg_878_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln36_reg_878_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_fu_549_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal acc_reg_886 : STD_LOGIC_VECTOR (7 downto 0);
    signal acc_reg_886_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln33_1_fu_554_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln33_1_reg_906 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln33_1_reg_906_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln33_fu_559_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln33_reg_911 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln33_2_fu_573_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln33_2_reg_921 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln33_5_fu_580_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln33_5_reg_926 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln33_5_reg_926_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln33_4_fu_585_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln33_4_reg_931 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_690_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_reg_936 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_reg_936_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_684_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_1_reg_941 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_1_reg_941_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_678_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_3_reg_946 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_696_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_6_fu_589_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln33_6_fu_589_p2 : signal is "no";
    signal add_ln33_6_reg_956 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln33_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln33_1_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_2_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_3_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_4_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_5_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ocol_fu_76 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal add_ln32_fu_426_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_ocol_load : STD_LOGIC_VECTOR (1 downto 0);
    signal orow_fu_80 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal select_ln26_1_fu_388_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_orow_load : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_fu_84 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln26_fu_356_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (2 downto 0);
    signal img_outT_0_load3_fu_88 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln36_3_fu_615_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_outT_1_load7_fu_92 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln36_2_fu_608_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_outT_0_1_load11_fu_96 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln36_1_fu_645_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_outT_1_1_load15_fu_100 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln36_fu_638_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln27_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_1_fu_382_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_400_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln26_fu_374_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln_fu_412_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln32_2_fu_432_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln32_fu_446_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln32_4_fu_452_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln32_fu_408_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_8_fu_466_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_472_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln32_5_cast_fu_480_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln32_6_cast_fu_502_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln32_7_cast_fu_516_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln33_6_fu_589_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_702_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_2_fu_593_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln33_2_fu_593_p2 : signal is "no";
    signal acc_1_fu_597_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_684_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component conv2D0_mul_8s_8s_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv2D0_mac_muladd_8s_8s_8ns_8_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv2D0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_8s_8s_8_1_1_U9 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => img_inT_q5,
        din1 => weightsT_load,
        dout => acc_fu_549_p2);

    mul_8s_8s_8_1_1_U10 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => img_inT_q3,
        din1 => weightsT_load_2,
        dout => mul_ln33_1_fu_554_p2);

    mul_8s_8s_8_1_1_U11 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => img_inT_1_q5,
        din1 => weightsT_1_load_1,
        dout => mul_ln33_5_fu_580_p2);

    mul_8s_8s_8_1_1_U12 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weightsT_1_load,
        din1 => select_ln33_2_reg_921,
        dout => mul_ln33_4_fu_585_p2);

    mac_muladd_8s_8s_8ns_8_4_1_U13 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => img_inT_q4,
        din1 => weightsT_load_1,
        din2 => acc_reg_886_pp0_iter2_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_678_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U14 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weightsT_load_4,
        din1 => grp_fu_684_p1,
        din2 => mul_ln33_4_reg_931,
        ce => ap_const_logic_1,
        dout => grp_fu_684_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U15 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => img_inT_1_q4,
        din1 => weightsT_1_load_2,
        din2 => mul_ln33_5_reg_926_pp0_iter2_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_690_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U16 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => img_inT_1_q3,
        din1 => weightsT_1_load_3,
        din2 => mul_ln33_1_reg_906_pp0_iter2_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_696_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U17 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weightsT_load_3,
        din1 => select_ln33_reg_911,
        din2 => grp_fu_696_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_702_p3);

    flow_control_loop_pipe_sequential_init_U : component conv2D0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln26_fu_350_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_84 <= add_ln26_fu_356_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_84 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    ocol_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln26_fu_350_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    ocol_fu_76 <= add_ln32_fu_426_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    ocol_fu_76 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    orow_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln26_fu_350_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    orow_fu_80 <= select_ln26_1_fu_388_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    orow_fu_80 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                acc_reg_886 <= acc_fu_549_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_reg_807 <= empty_fu_396_p1;
                empty_reg_807_pp0_iter1_reg <= empty_reg_807;
                icmp_ln26_reg_803 <= icmp_ln26_fu_350_p2;
                icmp_ln26_reg_803_pp0_iter1_reg <= icmp_ln26_reg_803;
                mul_ln33_1_reg_906 <= mul_ln33_1_fu_554_p2;
                mul_ln33_5_reg_926 <= mul_ln33_5_fu_580_p2;
                select_ln33_2_reg_921 <= select_ln33_2_fu_573_p3;
                select_ln33_reg_911 <= select_ln33_fu_559_p3;
                tmp_1_reg_841 <= empty_8_fu_466_p2(3 downto 3);
                trunc_ln36_reg_878 <= trunc_ln36_fu_530_p1;
                trunc_ln36_reg_878_pp0_iter1_reg <= trunc_ln36_reg_878;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                acc_reg_886_pp0_iter2_reg <= acc_reg_886;
                add_ln33_1_reg_941_pp0_iter5_reg <= add_ln33_1_reg_941;
                add_ln33_6_reg_956 <= add_ln33_6_fu_589_p2;
                add_ln33_reg_936_pp0_iter5_reg <= add_ln33_reg_936;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                empty_reg_807_pp0_iter2_reg <= empty_reg_807_pp0_iter1_reg;
                empty_reg_807_pp0_iter3_reg <= empty_reg_807_pp0_iter2_reg;
                empty_reg_807_pp0_iter4_reg <= empty_reg_807_pp0_iter3_reg;
                empty_reg_807_pp0_iter5_reg <= empty_reg_807_pp0_iter4_reg;
                icmp_ln26_reg_803_pp0_iter2_reg <= icmp_ln26_reg_803_pp0_iter1_reg;
                icmp_ln26_reg_803_pp0_iter3_reg <= icmp_ln26_reg_803_pp0_iter2_reg;
                icmp_ln26_reg_803_pp0_iter4_reg <= icmp_ln26_reg_803_pp0_iter3_reg;
                mul_ln33_1_reg_906_pp0_iter2_reg <= mul_ln33_1_reg_906;
                mul_ln33_4_reg_931 <= mul_ln33_4_fu_585_p2;
                mul_ln33_5_reg_926_pp0_iter2_reg <= mul_ln33_5_reg_926;
                trunc_ln36_reg_878_pp0_iter2_reg <= trunc_ln36_reg_878_pp0_iter1_reg;
                trunc_ln36_reg_878_pp0_iter3_reg <= trunc_ln36_reg_878_pp0_iter2_reg;
                trunc_ln36_reg_878_pp0_iter4_reg <= trunc_ln36_reg_878_pp0_iter3_reg;
                trunc_ln36_reg_878_pp0_iter5_reg <= trunc_ln36_reg_878_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                add_ln33_1_reg_941 <= grp_fu_684_p3;
                add_ln33_3_reg_946 <= grp_fu_678_p3;
                add_ln33_reg_936 <= grp_fu_690_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (empty_reg_807_pp0_iter5_reg = ap_const_lv1_1))) then
                img_outT_0_1_load11_fu_96 <= select_ln36_1_fu_645_p3;
                img_outT_1_1_load15_fu_100 <= select_ln36_fu_638_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (empty_reg_807_pp0_iter5_reg = ap_const_lv1_0))) then
                img_outT_0_load3_fu_88 <= select_ln36_3_fu_615_p3;
                img_outT_1_load7_fu_92 <= select_ln36_2_fu_608_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    acc_1_fu_597_p2 <= std_logic_vector(unsigned(add_ln33_6_reg_956) + unsigned(add_ln33_2_fu_593_p2));
    add_ln26_1_fu_382_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_orow_load) + unsigned(ap_const_lv2_1));
    add_ln26_fu_356_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv3_1));
    add_ln32_2_fu_432_p3 <= (empty_fu_396_p1 & add_ln32_fu_426_p2);
    add_ln32_4_fu_452_p3 <= (empty_fu_396_p1 & xor_ln32_fu_446_p2);
    add_ln32_5_cast_fu_480_p3 <= (tmp_fu_472_p3 & select_ln26_fu_374_p3);
    add_ln32_6_cast_fu_502_p3 <= (tmp_fu_472_p3 & add_ln32_fu_426_p2);
    add_ln32_7_cast_fu_516_p3 <= (tmp_fu_472_p3 & xor_ln32_fu_446_p2);
    add_ln32_fu_426_p2 <= std_logic_vector(unsigned(select_ln26_fu_374_p3) + unsigned(ap_const_lv2_1));
    add_ln33_2_fu_593_p2 <= std_logic_vector(signed(add_ln33_1_reg_941_pp0_iter5_reg) + signed(add_ln33_reg_936_pp0_iter5_reg));
    add_ln33_6_fu_589_p0 <= grp_fu_702_p3;
    add_ln33_6_fu_589_p2 <= std_logic_vector(signed(add_ln33_6_fu_589_p0) + signed(add_ln33_3_reg_946));
    add_ln_fu_412_p3 <= (empty_fu_396_p1 & select_ln26_fu_374_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln26_fu_350_p2)
    begin
        if (((icmp_ln26_fu_350_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_84)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_84;
        end if; 
    end process;


    ap_sig_allocacmp_ocol_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ocol_fu_76, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_ocol_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_ocol_load <= ocol_fu_76;
        end if; 
    end process;


    ap_sig_allocacmp_orow_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, orow_fu_80)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_orow_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_orow_load <= orow_fu_80;
        end if; 
    end process;

    empty_8_fu_466_p2 <= std_logic_vector(unsigned(zext_ln32_fu_408_p1) + unsigned(ap_const_lv4_4));
    empty_fu_396_p1 <= select_ln26_1_fu_388_p3(1 - 1 downto 0);
    grp_fu_684_p1 <= 
        img_inT_1_q1 when (tmp_1_reg_841(0) = '1') else 
        img_inT_q1;
    icmp_ln26_fu_350_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv3_4) else "0";
    icmp_ln27_fu_368_p2 <= "1" when (ap_sig_allocacmp_ocol_load = ap_const_lv2_2) else "0";
    img_inT_1_address0 <= zext_ln33_5_fu_524_p1(3 - 1 downto 0);
    img_inT_1_address1 <= zext_ln33_4_fu_510_p1(3 - 1 downto 0);
    img_inT_1_address2 <= zext_ln33_3_fu_488_p1(3 - 1 downto 0);
    img_inT_1_address3 <= zext_ln33_2_fu_460_p1(3 - 1 downto 0);
    img_inT_1_address4 <= zext_ln33_1_fu_440_p1(3 - 1 downto 0);
    img_inT_1_address5 <= zext_ln33_fu_420_p1(3 - 1 downto 0);

    img_inT_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_1_ce0 <= ap_const_logic_1;
        else 
            img_inT_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    img_inT_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_1_ce1 <= ap_const_logic_1;
        else 
            img_inT_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    img_inT_1_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_1_ce2 <= ap_const_logic_1;
        else 
            img_inT_1_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    img_inT_1_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_1_ce3 <= ap_const_logic_1;
        else 
            img_inT_1_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    img_inT_1_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_1_ce4 <= ap_const_logic_1;
        else 
            img_inT_1_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    img_inT_1_ce5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_1_ce5 <= ap_const_logic_1;
        else 
            img_inT_1_ce5 <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_address0 <= zext_ln33_5_fu_524_p1(3 - 1 downto 0);
    img_inT_address1 <= zext_ln33_4_fu_510_p1(3 - 1 downto 0);
    img_inT_address2 <= zext_ln33_3_fu_488_p1(3 - 1 downto 0);
    img_inT_address3 <= zext_ln33_2_fu_460_p1(3 - 1 downto 0);
    img_inT_address4 <= zext_ln33_1_fu_440_p1(3 - 1 downto 0);
    img_inT_address5 <= zext_ln33_fu_420_p1(3 - 1 downto 0);

    img_inT_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_ce0 <= ap_const_logic_1;
        else 
            img_inT_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    img_inT_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_ce1 <= ap_const_logic_1;
        else 
            img_inT_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    img_inT_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_ce2 <= ap_const_logic_1;
        else 
            img_inT_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    img_inT_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_ce3 <= ap_const_logic_1;
        else 
            img_inT_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    img_inT_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_ce4 <= ap_const_logic_1;
        else 
            img_inT_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    img_inT_ce5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_ce5 <= ap_const_logic_1;
        else 
            img_inT_ce5 <= ap_const_logic_0;
        end if; 
    end process;

    img_outT_0_1_load11_out <= img_outT_0_1_load11_fu_96;

    img_outT_0_1_load11_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln26_reg_803_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_reg_803_pp0_iter4_reg = ap_const_lv1_1))) then 
            img_outT_0_1_load11_out_ap_vld <= ap_const_logic_1;
        else 
            img_outT_0_1_load11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_outT_0_load3_out <= img_outT_0_load3_fu_88;

    img_outT_0_load3_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln26_reg_803_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_reg_803_pp0_iter4_reg = ap_const_lv1_1))) then 
            img_outT_0_load3_out_ap_vld <= ap_const_logic_1;
        else 
            img_outT_0_load3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_outT_1_1_load15_out <= img_outT_1_1_load15_fu_100;

    img_outT_1_1_load15_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln26_reg_803_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_reg_803_pp0_iter4_reg = ap_const_lv1_1))) then 
            img_outT_1_1_load15_out_ap_vld <= ap_const_logic_1;
        else 
            img_outT_1_1_load15_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_outT_1_load7_out <= img_outT_1_load7_fu_92;

    img_outT_1_load7_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln26_reg_803_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_reg_803_pp0_iter4_reg = ap_const_lv1_1))) then 
            img_outT_1_load7_out_ap_vld <= ap_const_logic_1;
        else 
            img_outT_1_load7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln26_1_fu_388_p3 <= 
        add_ln26_1_fu_382_p2 when (icmp_ln27_fu_368_p2(0) = '1') else 
        ap_sig_allocacmp_orow_load;
    select_ln26_fu_374_p3 <= 
        ap_const_lv2_0 when (icmp_ln27_fu_368_p2(0) = '1') else 
        ap_sig_allocacmp_ocol_load;
    select_ln33_2_fu_573_p3 <= 
        img_inT_1_q0 when (tmp_1_reg_841(0) = '1') else 
        img_inT_q0;
    select_ln33_fu_559_p3 <= 
        img_inT_1_q2 when (tmp_1_reg_841(0) = '1') else 
        img_inT_q2;
    select_ln36_1_fu_645_p3 <= 
        img_outT_0_1_load11_fu_96 when (trunc_ln36_reg_878_pp0_iter5_reg(0) = '1') else 
        acc_1_fu_597_p2;
    select_ln36_2_fu_608_p3 <= 
        acc_1_fu_597_p2 when (trunc_ln36_reg_878_pp0_iter5_reg(0) = '1') else 
        img_outT_1_load7_fu_92;
    select_ln36_3_fu_615_p3 <= 
        img_outT_0_load3_fu_88 when (trunc_ln36_reg_878_pp0_iter5_reg(0) = '1') else 
        acc_1_fu_597_p2;
    select_ln36_fu_638_p3 <= 
        acc_1_fu_597_p2 when (trunc_ln36_reg_878_pp0_iter5_reg(0) = '1') else 
        img_outT_1_1_load15_fu_100;
    tmp_2_fu_400_p3 <= (empty_fu_396_p1 & ap_const_lv2_0);
    tmp_fu_472_p3 <= empty_8_fu_466_p2(2 downto 2);
    trunc_ln36_fu_530_p1 <= select_ln26_fu_374_p3(1 - 1 downto 0);
    xor_ln32_fu_446_p2 <= (select_ln26_fu_374_p3 xor ap_const_lv2_2);
    zext_ln32_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_400_p3),4));
    zext_ln33_1_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_2_fu_432_p3),64));
    zext_ln33_2_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_4_fu_452_p3),64));
    zext_ln33_3_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_5_cast_fu_480_p3),64));
    zext_ln33_4_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_6_cast_fu_502_p3),64));
    zext_ln33_5_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_7_cast_fu_516_p3),64));
    zext_ln33_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln_fu_412_p3),64));
end behav;
