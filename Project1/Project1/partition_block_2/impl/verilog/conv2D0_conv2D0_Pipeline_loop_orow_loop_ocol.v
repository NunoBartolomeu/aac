// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module conv2D0_conv2D0_Pipeline_loop_orow_loop_ocol (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_inT_address0,
        img_inT_ce0,
        img_inT_q0,
        img_inT_address1,
        img_inT_ce1,
        img_inT_q1,
        img_inT_address2,
        img_inT_ce2,
        img_inT_q2,
        img_inT_address3,
        img_inT_ce3,
        img_inT_q3,
        img_inT_address4,
        img_inT_ce4,
        img_inT_q4,
        img_inT_address5,
        img_inT_ce5,
        img_inT_q5,
        img_inT_1_address0,
        img_inT_1_ce0,
        img_inT_1_q0,
        img_inT_1_address1,
        img_inT_1_ce1,
        img_inT_1_q1,
        img_inT_1_address2,
        img_inT_1_ce2,
        img_inT_1_q2,
        img_inT_1_address3,
        img_inT_1_ce3,
        img_inT_1_q3,
        img_inT_1_address4,
        img_inT_1_ce4,
        img_inT_1_q4,
        img_inT_1_address5,
        img_inT_1_ce5,
        img_inT_1_q5,
        weightsT_load,
        weightsT_load_1,
        weightsT_load_2,
        weightsT_load_3,
        weightsT_load_4,
        weightsT_1_load,
        weightsT_1_load_1,
        weightsT_1_load_2,
        weightsT_1_load_3,
        img_outT_1_1_load15_out,
        img_outT_1_1_load15_out_ap_vld,
        img_outT_0_1_load11_out,
        img_outT_0_1_load11_out_ap_vld,
        img_outT_1_load7_out,
        img_outT_1_load7_out_ap_vld,
        img_outT_0_load3_out,
        img_outT_0_load3_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] img_inT_address0;
output   img_inT_ce0;
input  [7:0] img_inT_q0;
output  [2:0] img_inT_address1;
output   img_inT_ce1;
input  [7:0] img_inT_q1;
output  [2:0] img_inT_address2;
output   img_inT_ce2;
input  [7:0] img_inT_q2;
output  [2:0] img_inT_address3;
output   img_inT_ce3;
input  [7:0] img_inT_q3;
output  [2:0] img_inT_address4;
output   img_inT_ce4;
input  [7:0] img_inT_q4;
output  [2:0] img_inT_address5;
output   img_inT_ce5;
input  [7:0] img_inT_q5;
output  [2:0] img_inT_1_address0;
output   img_inT_1_ce0;
input  [7:0] img_inT_1_q0;
output  [2:0] img_inT_1_address1;
output   img_inT_1_ce1;
input  [7:0] img_inT_1_q1;
output  [2:0] img_inT_1_address2;
output   img_inT_1_ce2;
input  [7:0] img_inT_1_q2;
output  [2:0] img_inT_1_address3;
output   img_inT_1_ce3;
input  [7:0] img_inT_1_q3;
output  [2:0] img_inT_1_address4;
output   img_inT_1_ce4;
input  [7:0] img_inT_1_q4;
output  [2:0] img_inT_1_address5;
output   img_inT_1_ce5;
input  [7:0] img_inT_1_q5;
input  [7:0] weightsT_load;
input  [7:0] weightsT_load_1;
input  [7:0] weightsT_load_2;
input  [7:0] weightsT_load_3;
input  [7:0] weightsT_load_4;
input  [7:0] weightsT_1_load;
input  [7:0] weightsT_1_load_1;
input  [7:0] weightsT_1_load_2;
input  [7:0] weightsT_1_load_3;
output  [7:0] img_outT_1_1_load15_out;
output   img_outT_1_1_load15_out_ap_vld;
output  [7:0] img_outT_0_1_load11_out;
output   img_outT_0_1_load11_out_ap_vld;
output  [7:0] img_outT_1_load7_out;
output   img_outT_1_load7_out_ap_vld;
output  [7:0] img_outT_0_load3_out;
output   img_outT_0_load3_out_ap_vld;

reg ap_idle;
reg img_inT_ce0;
reg img_inT_ce1;
reg img_inT_ce2;
reg img_inT_ce3;
reg img_inT_ce4;
reg img_inT_ce5;
reg img_inT_1_ce0;
reg img_inT_1_ce1;
reg img_inT_1_ce2;
reg img_inT_1_ce3;
reg img_inT_1_ce4;
reg img_inT_1_ce5;
reg img_outT_1_1_load15_out_ap_vld;
reg img_outT_0_1_load11_out_ap_vld;
reg img_outT_1_load7_out_ap_vld;
reg img_outT_0_load3_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln26_fu_350_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln26_reg_803;
reg   [0:0] icmp_ln26_reg_803_pp0_iter1_reg;
reg   [0:0] icmp_ln26_reg_803_pp0_iter2_reg;
reg   [0:0] icmp_ln26_reg_803_pp0_iter3_reg;
reg   [0:0] icmp_ln26_reg_803_pp0_iter4_reg;
wire   [0:0] empty_fu_396_p1;
reg   [0:0] empty_reg_807;
reg   [0:0] empty_reg_807_pp0_iter1_reg;
reg   [0:0] empty_reg_807_pp0_iter2_reg;
reg   [0:0] empty_reg_807_pp0_iter3_reg;
reg   [0:0] empty_reg_807_pp0_iter4_reg;
reg   [0:0] empty_reg_807_pp0_iter5_reg;
reg   [0:0] tmp_1_reg_841;
wire   [0:0] trunc_ln36_fu_530_p1;
reg   [0:0] trunc_ln36_reg_878;
reg   [0:0] trunc_ln36_reg_878_pp0_iter1_reg;
reg   [0:0] trunc_ln36_reg_878_pp0_iter2_reg;
reg   [0:0] trunc_ln36_reg_878_pp0_iter3_reg;
reg   [0:0] trunc_ln36_reg_878_pp0_iter4_reg;
reg   [0:0] trunc_ln36_reg_878_pp0_iter5_reg;
wire   [7:0] acc_fu_549_p2;
reg   [7:0] acc_reg_886;
reg   [7:0] acc_reg_886_pp0_iter2_reg;
wire   [7:0] mul_ln33_1_fu_554_p2;
reg   [7:0] mul_ln33_1_reg_906;
reg   [7:0] mul_ln33_1_reg_906_pp0_iter2_reg;
wire  signed [7:0] select_ln33_fu_559_p3;
reg  signed [7:0] select_ln33_reg_911;
wire  signed [7:0] select_ln33_2_fu_573_p3;
reg  signed [7:0] select_ln33_2_reg_921;
wire   [7:0] mul_ln33_5_fu_580_p2;
reg   [7:0] mul_ln33_5_reg_926;
reg   [7:0] mul_ln33_5_reg_926_pp0_iter2_reg;
wire   [7:0] mul_ln33_4_fu_585_p2;
reg   [7:0] mul_ln33_4_reg_931;
wire   [7:0] grp_fu_690_p3;
reg  signed [7:0] add_ln33_reg_936;
reg  signed [7:0] add_ln33_reg_936_pp0_iter5_reg;
wire   [7:0] grp_fu_684_p3;
reg  signed [7:0] add_ln33_1_reg_941;
reg  signed [7:0] add_ln33_1_reg_941_pp0_iter5_reg;
wire   [7:0] grp_fu_678_p3;
reg  signed [7:0] add_ln33_3_reg_946;
wire   [7:0] grp_fu_696_p3;
(* use_dsp48 = "no" *) wire   [7:0] add_ln33_6_fu_589_p2;
reg   [7:0] add_ln33_6_reg_956;
wire   [63:0] zext_ln33_fu_420_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln33_1_fu_440_p1;
wire   [63:0] zext_ln33_2_fu_460_p1;
wire   [63:0] zext_ln33_3_fu_488_p1;
wire   [63:0] zext_ln33_4_fu_510_p1;
wire   [63:0] zext_ln33_5_fu_524_p1;
reg   [1:0] ocol_fu_76;
wire   [1:0] add_ln32_fu_426_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_ocol_load;
reg   [1:0] orow_fu_80;
wire   [1:0] select_ln26_1_fu_388_p3;
reg   [1:0] ap_sig_allocacmp_orow_load;
reg   [2:0] indvar_flatten_fu_84;
wire   [2:0] add_ln26_fu_356_p2;
reg   [2:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [7:0] img_outT_0_load3_fu_88;
wire   [7:0] select_ln36_3_fu_615_p3;
reg   [7:0] img_outT_1_load7_fu_92;
wire   [7:0] select_ln36_2_fu_608_p3;
reg   [7:0] img_outT_0_1_load11_fu_96;
wire   [7:0] select_ln36_1_fu_645_p3;
reg   [7:0] img_outT_1_1_load15_fu_100;
wire   [7:0] select_ln36_fu_638_p3;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln27_fu_368_p2;
wire   [1:0] add_ln26_1_fu_382_p2;
wire   [2:0] tmp_2_fu_400_p3;
wire   [1:0] select_ln26_fu_374_p3;
wire   [2:0] add_ln_fu_412_p3;
wire   [2:0] add_ln32_2_fu_432_p3;
wire   [1:0] xor_ln32_fu_446_p2;
wire   [2:0] add_ln32_4_fu_452_p3;
wire   [3:0] zext_ln32_fu_408_p1;
wire   [3:0] empty_8_fu_466_p2;
wire   [0:0] tmp_fu_472_p3;
wire   [2:0] add_ln32_5_cast_fu_480_p3;
wire   [2:0] add_ln32_6_cast_fu_502_p3;
wire   [2:0] add_ln32_7_cast_fu_516_p3;
wire  signed [7:0] add_ln33_6_fu_589_p0;
wire   [7:0] grp_fu_702_p3;
(* use_dsp48 = "no" *) wire   [7:0] add_ln33_2_fu_593_p2;
wire   [7:0] acc_1_fu_597_p2;
wire  signed [7:0] grp_fu_684_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ocol_fu_76 = 2'd0;
#0 orow_fu_80 = 2'd0;
#0 indvar_flatten_fu_84 = 3'd0;
#0 img_outT_0_load3_fu_88 = 8'd0;
#0 img_outT_1_load7_fu_92 = 8'd0;
#0 img_outT_0_1_load11_fu_96 = 8'd0;
#0 img_outT_1_1_load15_fu_100 = 8'd0;
#0 ap_done_reg = 1'b0;
end

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U9(
    .din0(img_inT_q5),
    .din1(weightsT_load),
    .dout(acc_fu_549_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U10(
    .din0(img_inT_q3),
    .din1(weightsT_load_2),
    .dout(mul_ln33_1_fu_554_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U11(
    .din0(img_inT_1_q5),
    .din1(weightsT_1_load_1),
    .dout(mul_ln33_5_fu_580_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U12(
    .din0(weightsT_1_load),
    .din1(select_ln33_2_reg_921),
    .dout(mul_ln33_4_fu_585_p2)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(img_inT_q4),
    .din1(weightsT_load_1),
    .din2(acc_reg_886_pp0_iter2_reg),
    .ce(1'b1),
    .dout(grp_fu_678_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weightsT_load_4),
    .din1(grp_fu_684_p1),
    .din2(mul_ln33_4_reg_931),
    .ce(1'b1),
    .dout(grp_fu_684_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(img_inT_1_q4),
    .din1(weightsT_1_load_2),
    .din2(mul_ln33_5_reg_926_pp0_iter2_reg),
    .ce(1'b1),
    .dout(grp_fu_690_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(img_inT_1_q3),
    .din1(weightsT_1_load_3),
    .din2(mul_ln33_1_reg_906_pp0_iter2_reg),
    .ce(1'b1),
    .dout(grp_fu_696_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weightsT_load_3),
    .din1(select_ln33_reg_911),
    .din2(grp_fu_696_p3),
    .ce(1'b1),
    .dout(grp_fu_702_p3)
);

conv2D0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln26_fu_350_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_84 <= add_ln26_fu_356_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_84 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln26_fu_350_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            ocol_fu_76 <= add_ln32_fu_426_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            ocol_fu_76 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln26_fu_350_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            orow_fu_80 <= select_ln26_1_fu_388_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            orow_fu_80 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_reg_886 <= acc_fu_549_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_reg_807 <= empty_fu_396_p1;
        empty_reg_807_pp0_iter1_reg <= empty_reg_807;
        icmp_ln26_reg_803 <= icmp_ln26_fu_350_p2;
        icmp_ln26_reg_803_pp0_iter1_reg <= icmp_ln26_reg_803;
        mul_ln33_1_reg_906 <= mul_ln33_1_fu_554_p2;
        mul_ln33_5_reg_926 <= mul_ln33_5_fu_580_p2;
        select_ln33_2_reg_921 <= select_ln33_2_fu_573_p3;
        select_ln33_reg_911 <= select_ln33_fu_559_p3;
        tmp_1_reg_841 <= empty_8_fu_466_p2[32'd3];
        trunc_ln36_reg_878 <= trunc_ln36_fu_530_p1;
        trunc_ln36_reg_878_pp0_iter1_reg <= trunc_ln36_reg_878;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        acc_reg_886_pp0_iter2_reg <= acc_reg_886;
        add_ln33_1_reg_941_pp0_iter5_reg <= add_ln33_1_reg_941;
        add_ln33_6_reg_956 <= add_ln33_6_fu_589_p2;
        add_ln33_reg_936_pp0_iter5_reg <= add_ln33_reg_936;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        empty_reg_807_pp0_iter2_reg <= empty_reg_807_pp0_iter1_reg;
        empty_reg_807_pp0_iter3_reg <= empty_reg_807_pp0_iter2_reg;
        empty_reg_807_pp0_iter4_reg <= empty_reg_807_pp0_iter3_reg;
        empty_reg_807_pp0_iter5_reg <= empty_reg_807_pp0_iter4_reg;
        icmp_ln26_reg_803_pp0_iter2_reg <= icmp_ln26_reg_803_pp0_iter1_reg;
        icmp_ln26_reg_803_pp0_iter3_reg <= icmp_ln26_reg_803_pp0_iter2_reg;
        icmp_ln26_reg_803_pp0_iter4_reg <= icmp_ln26_reg_803_pp0_iter3_reg;
        mul_ln33_1_reg_906_pp0_iter2_reg <= mul_ln33_1_reg_906;
        mul_ln33_4_reg_931 <= mul_ln33_4_fu_585_p2;
        mul_ln33_5_reg_926_pp0_iter2_reg <= mul_ln33_5_reg_926;
        trunc_ln36_reg_878_pp0_iter2_reg <= trunc_ln36_reg_878_pp0_iter1_reg;
        trunc_ln36_reg_878_pp0_iter3_reg <= trunc_ln36_reg_878_pp0_iter2_reg;
        trunc_ln36_reg_878_pp0_iter4_reg <= trunc_ln36_reg_878_pp0_iter3_reg;
        trunc_ln36_reg_878_pp0_iter5_reg <= trunc_ln36_reg_878_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        add_ln33_1_reg_941 <= grp_fu_684_p3;
        add_ln33_3_reg_946 <= grp_fu_678_p3;
        add_ln33_reg_936 <= grp_fu_690_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (empty_reg_807_pp0_iter5_reg == 1'd1))) begin
        img_outT_0_1_load11_fu_96 <= select_ln36_1_fu_645_p3;
        img_outT_1_1_load15_fu_100 <= select_ln36_fu_638_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (empty_reg_807_pp0_iter5_reg == 1'd0))) begin
        img_outT_0_load3_fu_88 <= select_ln36_3_fu_615_p3;
        img_outT_1_load7_fu_92 <= select_ln36_2_fu_608_p3;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 3'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_ocol_load = 2'd0;
    end else begin
        ap_sig_allocacmp_ocol_load = ocol_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_orow_load = 2'd0;
    end else begin
        ap_sig_allocacmp_orow_load = orow_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_inT_1_ce0 = 1'b1;
    end else begin
        img_inT_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_inT_1_ce1 = 1'b1;
    end else begin
        img_inT_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_inT_1_ce2 = 1'b1;
    end else begin
        img_inT_1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_inT_1_ce3 = 1'b1;
    end else begin
        img_inT_1_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_inT_1_ce4 = 1'b1;
    end else begin
        img_inT_1_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_inT_1_ce5 = 1'b1;
    end else begin
        img_inT_1_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_inT_ce0 = 1'b1;
    end else begin
        img_inT_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_inT_ce1 = 1'b1;
    end else begin
        img_inT_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_inT_ce2 = 1'b1;
    end else begin
        img_inT_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_inT_ce3 = 1'b1;
    end else begin
        img_inT_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_inT_ce4 = 1'b1;
    end else begin
        img_inT_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_inT_ce5 = 1'b1;
    end else begin
        img_inT_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_reg_803_pp0_iter4_reg == 1'd1))) begin
        img_outT_0_1_load11_out_ap_vld = 1'b1;
    end else begin
        img_outT_0_1_load11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_reg_803_pp0_iter4_reg == 1'd1))) begin
        img_outT_0_load3_out_ap_vld = 1'b1;
    end else begin
        img_outT_0_load3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_reg_803_pp0_iter4_reg == 1'd1))) begin
        img_outT_1_1_load15_out_ap_vld = 1'b1;
    end else begin
        img_outT_1_1_load15_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_reg_803_pp0_iter4_reg == 1'd1))) begin
        img_outT_1_load7_out_ap_vld = 1'b1;
    end else begin
        img_outT_1_load7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_fu_597_p2 = (add_ln33_6_reg_956 + add_ln33_2_fu_593_p2);

assign add_ln26_1_fu_382_p2 = (ap_sig_allocacmp_orow_load + 2'd1);

assign add_ln26_fu_356_p2 = (ap_sig_allocacmp_indvar_flatten_load + 3'd1);

assign add_ln32_2_fu_432_p3 = {{empty_fu_396_p1}, {add_ln32_fu_426_p2}};

assign add_ln32_4_fu_452_p3 = {{empty_fu_396_p1}, {xor_ln32_fu_446_p2}};

assign add_ln32_5_cast_fu_480_p3 = {{tmp_fu_472_p3}, {select_ln26_fu_374_p3}};

assign add_ln32_6_cast_fu_502_p3 = {{tmp_fu_472_p3}, {add_ln32_fu_426_p2}};

assign add_ln32_7_cast_fu_516_p3 = {{tmp_fu_472_p3}, {xor_ln32_fu_446_p2}};

assign add_ln32_fu_426_p2 = (select_ln26_fu_374_p3 + 2'd1);

assign add_ln33_2_fu_593_p2 = ($signed(add_ln33_1_reg_941_pp0_iter5_reg) + $signed(add_ln33_reg_936_pp0_iter5_reg));

assign add_ln33_6_fu_589_p0 = grp_fu_702_p3;

assign add_ln33_6_fu_589_p2 = ($signed(add_ln33_6_fu_589_p0) + $signed(add_ln33_3_reg_946));

assign add_ln_fu_412_p3 = {{empty_fu_396_p1}, {select_ln26_fu_374_p3}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_8_fu_466_p2 = (zext_ln32_fu_408_p1 + 4'd4);

assign empty_fu_396_p1 = select_ln26_1_fu_388_p3[0:0];

assign grp_fu_684_p1 = ((tmp_1_reg_841[0:0] == 1'b1) ? img_inT_1_q1 : img_inT_q1);

assign icmp_ln26_fu_350_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_368_p2 = ((ap_sig_allocacmp_ocol_load == 2'd2) ? 1'b1 : 1'b0);

assign img_inT_1_address0 = zext_ln33_5_fu_524_p1;

assign img_inT_1_address1 = zext_ln33_4_fu_510_p1;

assign img_inT_1_address2 = zext_ln33_3_fu_488_p1;

assign img_inT_1_address3 = zext_ln33_2_fu_460_p1;

assign img_inT_1_address4 = zext_ln33_1_fu_440_p1;

assign img_inT_1_address5 = zext_ln33_fu_420_p1;

assign img_inT_address0 = zext_ln33_5_fu_524_p1;

assign img_inT_address1 = zext_ln33_4_fu_510_p1;

assign img_inT_address2 = zext_ln33_3_fu_488_p1;

assign img_inT_address3 = zext_ln33_2_fu_460_p1;

assign img_inT_address4 = zext_ln33_1_fu_440_p1;

assign img_inT_address5 = zext_ln33_fu_420_p1;

assign img_outT_0_1_load11_out = img_outT_0_1_load11_fu_96;

assign img_outT_0_load3_out = img_outT_0_load3_fu_88;

assign img_outT_1_1_load15_out = img_outT_1_1_load15_fu_100;

assign img_outT_1_load7_out = img_outT_1_load7_fu_92;

assign select_ln26_1_fu_388_p3 = ((icmp_ln27_fu_368_p2[0:0] == 1'b1) ? add_ln26_1_fu_382_p2 : ap_sig_allocacmp_orow_load);

assign select_ln26_fu_374_p3 = ((icmp_ln27_fu_368_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_ocol_load);

assign select_ln33_2_fu_573_p3 = ((tmp_1_reg_841[0:0] == 1'b1) ? img_inT_1_q0 : img_inT_q0);

assign select_ln33_fu_559_p3 = ((tmp_1_reg_841[0:0] == 1'b1) ? img_inT_1_q2 : img_inT_q2);

assign select_ln36_1_fu_645_p3 = ((trunc_ln36_reg_878_pp0_iter5_reg[0:0] == 1'b1) ? img_outT_0_1_load11_fu_96 : acc_1_fu_597_p2);

assign select_ln36_2_fu_608_p3 = ((trunc_ln36_reg_878_pp0_iter5_reg[0:0] == 1'b1) ? acc_1_fu_597_p2 : img_outT_1_load7_fu_92);

assign select_ln36_3_fu_615_p3 = ((trunc_ln36_reg_878_pp0_iter5_reg[0:0] == 1'b1) ? img_outT_0_load3_fu_88 : acc_1_fu_597_p2);

assign select_ln36_fu_638_p3 = ((trunc_ln36_reg_878_pp0_iter5_reg[0:0] == 1'b1) ? acc_1_fu_597_p2 : img_outT_1_1_load15_fu_100);

assign tmp_2_fu_400_p3 = {{empty_fu_396_p1}, {2'd0}};

assign tmp_fu_472_p3 = empty_8_fu_466_p2[32'd2];

assign trunc_ln36_fu_530_p1 = select_ln26_fu_374_p3[0:0];

assign xor_ln32_fu_446_p2 = (select_ln26_fu_374_p3 ^ 2'd2);

assign zext_ln32_fu_408_p1 = tmp_2_fu_400_p3;

assign zext_ln33_1_fu_440_p1 = add_ln32_2_fu_432_p3;

assign zext_ln33_2_fu_460_p1 = add_ln32_4_fu_452_p3;

assign zext_ln33_3_fu_488_p1 = add_ln32_5_cast_fu_480_p3;

assign zext_ln33_4_fu_510_p1 = add_ln32_6_cast_fu_502_p3;

assign zext_ln33_5_fu_524_p1 = add_ln32_7_cast_fu_516_p3;

assign zext_ln33_fu_420_p1 = add_ln_fu_412_p3;

endmodule //conv2D0_conv2D0_Pipeline_loop_orow_loop_ocol
