-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2D0_conv2D0_Pipeline_loop_orow_loop_ocol is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_inT_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_1_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_2_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_3_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_4_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_5_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_0_1_lcssa : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_6_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_1_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_7_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_2_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_8_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_9_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_3_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_10_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_4_1_lcssa : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_11_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_5_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_12_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_13_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_6_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_14_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_7_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_15_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_8_1_lcssa : IN STD_LOGIC_VECTOR (7 downto 0);
    img_outT_3_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_outT_3_1_out_ap_vld : OUT STD_LOGIC;
    img_outT_2_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_outT_2_1_out_ap_vld : OUT STD_LOGIC;
    img_outT_1_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_outT_1_1_out_ap_vld : OUT STD_LOGIC;
    img_outT_0_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_outT_0_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of conv2D0_conv2D0_Pipeline_loop_orow_loop_ocol is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln21_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln21_reg_953 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_953_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_953_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_953_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln_fu_378_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln_reg_957 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_392_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_424_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_456_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_488_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln31_fu_526_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln31_reg_986 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln31_reg_986_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln31_reg_986_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln31_reg_986_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln31_reg_986_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal acc_fu_572_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal acc_reg_990 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln28_1_fu_602_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln28_1_reg_995 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_607_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln28_4_fu_657_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln28_4_reg_1005 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln28_5_fu_687_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln28_5_reg_1010 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_755_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_reg_1015 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_reg_1015_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_748_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_1_reg_1020 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_1_reg_1020_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_741_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_3_reg_1025 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_762_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_6_fu_692_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln28_6_fu_692_p2 : signal is "no";
    signal add_ln28_6_reg_1035 : STD_LOGIC_VECTOR (7 downto 0);
    signal ocol_fu_104 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal add_ln27_fu_386_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_ocol_load : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal orow_fu_108 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal select_ln21_1_fu_366_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_orow_load : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_fu_112 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln21_fu_334_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (2 downto 0);
    signal img_outT_0_1_fu_116 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_outT_1_fu_700_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_outT_1_1_fu_120 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_outT_2_1_fu_124 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_outT_3_1_fu_128 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln22_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln21_1_fu_360_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln27_fu_374_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_fu_352_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_392_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_424_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_456_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_488_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln31_fu_520_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_547_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_547_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_577_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_577_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_607_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_632_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_632_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_662_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_662_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_6_fu_692_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_769_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_2_fu_696_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln28_2_fu_696_p2 : signal is "no";
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal tmp_1_fu_392_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_392_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_392_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_392_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_392_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_392_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_424_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_424_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_424_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_424_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_424_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_424_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_456_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_456_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_456_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_456_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_456_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_456_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_488_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_488_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_488_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_488_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_488_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_488_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_547_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_547_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_547_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_547_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_547_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_547_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_577_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_577_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_577_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_577_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_577_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_577_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_607_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_607_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_607_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_607_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_607_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_607_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_632_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_632_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_632_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_632_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_632_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_632_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_662_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_662_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_662_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_662_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_662_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_662_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component conv2D0_sparsemux_13_3_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv2D0_mul_8s_8s_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv2D0_mac_muladd_8s_8s_8ns_8_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv2D0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_13_3_8_1_1_U31 : component conv2D0_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 8,
        CASE1 => "001",
        din1_WIDTH => 8,
        CASE2 => "010",
        din2_WIDTH => 8,
        CASE3 => "011",
        din3_WIDTH => 8,
        CASE4 => "100",
        din4_WIDTH => 8,
        CASE5 => "101",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => img_inT_1_reload,
        din1 => img_inT_2_reload,
        din2 => img_inT_3_reload,
        din3 => img_inT_4_reload,
        din4 => img_inT_5_reload,
        din5 => img_inT_6_reload,
        def => tmp_1_fu_392_p13,
        sel => add_ln_fu_378_p3,
        dout => tmp_1_fu_392_p15);

    sparsemux_13_3_8_1_1_U32 : component conv2D0_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 8,
        CASE1 => "001",
        din1_WIDTH => 8,
        CASE2 => "010",
        din2_WIDTH => 8,
        CASE3 => "011",
        din3_WIDTH => 8,
        CASE4 => "100",
        din4_WIDTH => 8,
        CASE5 => "101",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => img_inT_5_reload,
        din1 => img_inT_6_reload,
        din2 => img_inT_7_reload,
        din3 => img_inT_8_reload,
        din4 => img_inT_9_reload,
        din5 => img_inT_10_reload,
        def => tmp_4_fu_424_p13,
        sel => add_ln_fu_378_p3,
        dout => tmp_4_fu_424_p15);

    sparsemux_13_3_8_1_1_U33 : component conv2D0_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 8,
        CASE1 => "001",
        din1_WIDTH => 8,
        CASE2 => "010",
        din2_WIDTH => 8,
        CASE3 => "011",
        din3_WIDTH => 8,
        CASE4 => "100",
        din4_WIDTH => 8,
        CASE5 => "101",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => img_inT_9_reload,
        din1 => img_inT_10_reload,
        din2 => img_inT_11_reload,
        din3 => img_inT_12_reload,
        din4 => img_inT_13_reload,
        din5 => img_inT_14_reload,
        def => tmp_7_fu_456_p13,
        sel => add_ln_fu_378_p3,
        dout => tmp_7_fu_456_p15);

    sparsemux_13_3_8_1_1_U34 : component conv2D0_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 8,
        CASE1 => "001",
        din1_WIDTH => 8,
        CASE2 => "010",
        din2_WIDTH => 8,
        CASE3 => "011",
        din3_WIDTH => 8,
        CASE4 => "100",
        din4_WIDTH => 8,
        CASE5 => "101",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => img_inT_10_reload,
        din1 => img_inT_11_reload,
        din2 => img_inT_12_reload,
        din3 => img_inT_13_reload,
        din4 => img_inT_14_reload,
        din5 => img_inT_15_reload,
        def => tmp_8_fu_488_p13,
        sel => add_ln_fu_378_p3,
        dout => tmp_8_fu_488_p15);

    sparsemux_13_3_8_1_1_U35 : component conv2D0_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 8,
        CASE1 => "001",
        din1_WIDTH => 8,
        CASE2 => "010",
        din2_WIDTH => 8,
        CASE3 => "011",
        din3_WIDTH => 8,
        CASE4 => "100",
        din4_WIDTH => 8,
        CASE5 => "101",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => img_inT_reload,
        din1 => img_inT_1_reload,
        din2 => img_inT_2_reload,
        din3 => img_inT_3_reload,
        din4 => img_inT_4_reload,
        din5 => img_inT_5_reload,
        def => tmp_fu_547_p13,
        sel => add_ln_reg_957,
        dout => tmp_fu_547_p15);

    mul_8s_8s_8_1_1_U36 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_fu_547_p15,
        din1 => weightsT_0_1_lcssa,
        dout => acc_fu_572_p2);

    sparsemux_13_3_8_1_1_U37 : component conv2D0_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 8,
        CASE1 => "001",
        din1_WIDTH => 8,
        CASE2 => "010",
        din2_WIDTH => 8,
        CASE3 => "011",
        din3_WIDTH => 8,
        CASE4 => "100",
        din4_WIDTH => 8,
        CASE5 => "101",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => img_inT_2_reload,
        din1 => img_inT_3_reload,
        din2 => img_inT_4_reload,
        din3 => img_inT_5_reload,
        din4 => img_inT_6_reload,
        din5 => img_inT_7_reload,
        def => tmp_2_fu_577_p13,
        sel => add_ln_reg_957,
        dout => tmp_2_fu_577_p15);

    mul_8s_8s_8_1_1_U38 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_2_fu_577_p15,
        din1 => weightsT_2_reload,
        dout => mul_ln28_1_fu_602_p2);

    sparsemux_13_3_8_1_1_U39 : component conv2D0_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 8,
        CASE1 => "001",
        din1_WIDTH => 8,
        CASE2 => "010",
        din2_WIDTH => 8,
        CASE3 => "011",
        din3_WIDTH => 8,
        CASE4 => "100",
        din4_WIDTH => 8,
        CASE5 => "101",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => img_inT_4_reload,
        din1 => img_inT_5_reload,
        din2 => img_inT_6_reload,
        din3 => img_inT_7_reload,
        din4 => img_inT_8_reload,
        din5 => img_inT_9_reload,
        def => tmp_3_fu_607_p13,
        sel => add_ln_reg_957,
        dout => tmp_3_fu_607_p15);

    sparsemux_13_3_8_1_1_U40 : component conv2D0_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 8,
        CASE1 => "001",
        din1_WIDTH => 8,
        CASE2 => "010",
        din2_WIDTH => 8,
        CASE3 => "011",
        din3_WIDTH => 8,
        CASE4 => "100",
        din4_WIDTH => 8,
        CASE5 => "101",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => img_inT_6_reload,
        din1 => img_inT_7_reload,
        din2 => img_inT_8_reload,
        din3 => img_inT_9_reload,
        din4 => img_inT_10_reload,
        din5 => img_inT_11_reload,
        def => tmp_5_fu_632_p13,
        sel => add_ln_reg_957,
        dout => tmp_5_fu_632_p15);

    mul_8s_8s_8_1_1_U41 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_5_fu_632_p15,
        din1 => weightsT_5_reload,
        dout => mul_ln28_4_fu_657_p2);

    sparsemux_13_3_8_1_1_U42 : component conv2D0_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 8,
        CASE1 => "001",
        din1_WIDTH => 8,
        CASE2 => "010",
        din2_WIDTH => 8,
        CASE3 => "011",
        din3_WIDTH => 8,
        CASE4 => "100",
        din4_WIDTH => 8,
        CASE5 => "101",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => img_inT_8_reload,
        din1 => img_inT_9_reload,
        din2 => img_inT_10_reload,
        din3 => img_inT_11_reload,
        din4 => img_inT_12_reload,
        din5 => img_inT_13_reload,
        def => tmp_6_fu_662_p13,
        sel => add_ln_reg_957,
        dout => tmp_6_fu_662_p15);

    mul_8s_8s_8_1_1_U43 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_6_fu_662_p15,
        din1 => weightsT_6_reload,
        dout => mul_ln28_5_fu_687_p2);

    mac_muladd_8s_8s_8ns_8_4_1_U44 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_fu_392_p15,
        din1 => weightsT_1_reload,
        din2 => acc_reg_990,
        ce => ap_const_logic_1,
        dout => grp_fu_741_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U45 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_fu_424_p15,
        din1 => weightsT_4_1_lcssa,
        din2 => mul_ln28_4_reg_1005,
        ce => ap_const_logic_1,
        dout => grp_fu_748_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U46 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_7_fu_456_p15,
        din1 => weightsT_7_reload,
        din2 => mul_ln28_5_reg_1010,
        ce => ap_const_logic_1,
        dout => grp_fu_755_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U47 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_8_fu_488_p15,
        din1 => weightsT_8_1_lcssa,
        din2 => mul_ln28_1_reg_995,
        ce => ap_const_logic_1,
        dout => grp_fu_762_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U48 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_3_fu_607_p15,
        din1 => weightsT_3_reload,
        din2 => grp_fu_762_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_769_p3);

    flow_control_loop_pipe_sequential_init_U : component conv2D0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln21_fu_328_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_112 <= add_ln21_fu_334_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_112 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    ocol_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln21_fu_328_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    ocol_fu_104 <= add_ln27_fu_386_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    ocol_fu_104 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    orow_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln21_fu_328_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    orow_fu_108 <= select_ln21_1_fu_366_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    orow_fu_108 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                acc_reg_990 <= acc_fu_572_p2;
                add_ln_reg_957 <= add_ln_fu_378_p3;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln21_reg_953 <= icmp_ln21_fu_328_p2;
                icmp_ln21_reg_953_pp0_iter1_reg <= icmp_ln21_reg_953;
                mul_ln28_1_reg_995 <= mul_ln28_1_fu_602_p2;
                mul_ln28_4_reg_1005 <= mul_ln28_4_fu_657_p2;
                mul_ln28_5_reg_1010 <= mul_ln28_5_fu_687_p2;
                sub_ln31_reg_986 <= sub_ln31_fu_526_p2;
                sub_ln31_reg_986_pp0_iter1_reg <= sub_ln31_reg_986;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                add_ln28_1_reg_1020 <= grp_fu_748_p3;
                add_ln28_3_reg_1025 <= grp_fu_741_p3;
                add_ln28_reg_1015 <= grp_fu_755_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln28_1_reg_1020_pp0_iter4_reg <= add_ln28_1_reg_1020;
                add_ln28_6_reg_1035 <= add_ln28_6_fu_692_p2;
                add_ln28_reg_1015_pp0_iter4_reg <= add_ln28_reg_1015;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                icmp_ln21_reg_953_pp0_iter2_reg <= icmp_ln21_reg_953_pp0_iter1_reg;
                icmp_ln21_reg_953_pp0_iter3_reg <= icmp_ln21_reg_953_pp0_iter2_reg;
                sub_ln31_reg_986_pp0_iter2_reg <= sub_ln31_reg_986_pp0_iter1_reg;
                sub_ln31_reg_986_pp0_iter3_reg <= sub_ln31_reg_986_pp0_iter2_reg;
                sub_ln31_reg_986_pp0_iter4_reg <= sub_ln31_reg_986_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (sub_ln31_reg_986_pp0_iter4_reg = ap_const_lv2_0))) then
                img_outT_0_1_fu_116 <= img_outT_1_fu_700_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (sub_ln31_reg_986_pp0_iter4_reg = ap_const_lv2_1))) then
                img_outT_1_1_fu_120 <= img_outT_1_fu_700_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (sub_ln31_reg_986_pp0_iter4_reg = ap_const_lv2_2))) then
                img_outT_2_1_fu_124 <= img_outT_1_fu_700_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (sub_ln31_reg_986_pp0_iter4_reg = ap_const_lv2_3))) then
                img_outT_3_1_fu_128 <= img_outT_1_fu_700_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln21_1_fu_360_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_orow_load) + unsigned(ap_const_lv2_1));
    add_ln21_fu_334_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv3_1));
    add_ln27_fu_386_p2 <= std_logic_vector(unsigned(select_ln21_fu_352_p3) + unsigned(ap_const_lv2_1));
    add_ln28_2_fu_696_p2 <= std_logic_vector(signed(add_ln28_1_reg_1020_pp0_iter4_reg) + signed(add_ln28_reg_1015_pp0_iter4_reg));
    add_ln28_6_fu_692_p0 <= grp_fu_769_p3;
    add_ln28_6_fu_692_p2 <= std_logic_vector(signed(add_ln28_6_fu_692_p0) + signed(add_ln28_3_reg_1025));
    add_ln_fu_378_p3 <= (trunc_ln27_fu_374_p1 & select_ln21_fu_352_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln21_fu_328_p2)
    begin
        if (((icmp_ln21_fu_328_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, indvar_flatten_fu_112)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_112;
        end if; 
    end process;


    ap_sig_allocacmp_ocol_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ocol_fu_104, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_ocol_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_ocol_load <= ocol_fu_104;
        end if; 
    end process;


    ap_sig_allocacmp_orow_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, orow_fu_108)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_orow_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_orow_load <= orow_fu_108;
        end if; 
    end process;

    icmp_ln21_fu_328_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv3_4) else "0";
    icmp_ln22_fu_346_p2 <= "1" when (ap_sig_allocacmp_ocol_load = ap_const_lv2_2) else "0";
    img_outT_0_1_out <= img_outT_0_1_fu_116;

    img_outT_0_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln21_reg_953_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln21_reg_953_pp0_iter3_reg = ap_const_lv1_1))) then 
            img_outT_0_1_out_ap_vld <= ap_const_logic_1;
        else 
            img_outT_0_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_outT_1_1_out <= img_outT_1_1_fu_120;

    img_outT_1_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln21_reg_953_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln21_reg_953_pp0_iter3_reg = ap_const_lv1_1))) then 
            img_outT_1_1_out_ap_vld <= ap_const_logic_1;
        else 
            img_outT_1_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_outT_1_fu_700_p2 <= std_logic_vector(unsigned(add_ln28_6_reg_1035) + unsigned(add_ln28_2_fu_696_p2));
    img_outT_2_1_out <= img_outT_2_1_fu_124;

    img_outT_2_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln21_reg_953_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln21_reg_953_pp0_iter3_reg = ap_const_lv1_1))) then 
            img_outT_2_1_out_ap_vld <= ap_const_logic_1;
        else 
            img_outT_2_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_outT_3_1_out <= img_outT_3_1_fu_128;

    img_outT_3_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln21_reg_953_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln21_reg_953_pp0_iter3_reg = ap_const_lv1_1))) then 
            img_outT_3_1_out_ap_vld <= ap_const_logic_1;
        else 
            img_outT_3_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln21_1_fu_366_p3 <= 
        add_ln21_1_fu_360_p2 when (icmp_ln22_fu_346_p2(0) = '1') else 
        ap_sig_allocacmp_orow_load;
    select_ln21_fu_352_p3 <= 
        ap_const_lv2_0 when (icmp_ln22_fu_346_p2(0) = '1') else 
        ap_sig_allocacmp_ocol_load;
    shl_ln31_fu_520_p2 <= std_logic_vector(shift_left(unsigned(select_ln21_1_fu_366_p3),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    sub_ln31_fu_526_p2 <= std_logic_vector(unsigned(select_ln21_fu_352_p3) - unsigned(shl_ln31_fu_520_p2));
    tmp_1_fu_392_p13 <= "XXXXXXXX";
    tmp_2_fu_577_p13 <= "XXXXXXXX";
    tmp_3_fu_607_p13 <= "XXXXXXXX";
    tmp_4_fu_424_p13 <= "XXXXXXXX";
    tmp_5_fu_632_p13 <= "XXXXXXXX";
    tmp_6_fu_662_p13 <= "XXXXXXXX";
    tmp_7_fu_456_p13 <= "XXXXXXXX";
    tmp_8_fu_488_p13 <= "XXXXXXXX";
    tmp_fu_547_p13 <= "XXXXXXXX";
    trunc_ln27_fu_374_p1 <= select_ln21_1_fu_366_p3(1 - 1 downto 0);
end behav;
