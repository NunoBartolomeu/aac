-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2D0_conv2D0_Pipeline_readweights is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weights_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weights_ce0 : OUT STD_LOGIC;
    weights_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weights_ce1 : OUT STD_LOGIC;
    weights_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_8_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_8_out_ap_vld : OUT STD_LOGIC;
    weightsT_7_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_7_out_ap_vld : OUT STD_LOGIC;
    weightsT_6_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_6_out_ap_vld : OUT STD_LOGIC;
    weightsT_5_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_5_out_ap_vld : OUT STD_LOGIC;
    weightsT_4_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_4_out_ap_vld : OUT STD_LOGIC;
    weightsT_3_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_3_out_ap_vld : OUT STD_LOGIC;
    weightsT_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_2_out_ap_vld : OUT STD_LOGIC;
    weightsT_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_1_out_ap_vld : OUT STD_LOGIC;
    weightsT_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_out_ap_vld : OUT STD_LOGIC;
    weightsT_10_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_10_out_ap_vld : OUT STD_LOGIC;
    weightsT_11_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_11_out_ap_vld : OUT STD_LOGIC;
    weightsT_12_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_12_out_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of conv2D0_conv2D0_Pipeline_readweights is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_574 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln16_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_582 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln16_1_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_1_reg_591 : STD_LOGIC_VECTOR (0 downto 0);
    signal weightsT_load_1_reg_600 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal weightsT_4_load_1_reg_605 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_8_load_1_reg_610 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln19_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_615 : STD_LOGIC_VECTOR (0 downto 0);
    signal weightsT_10_fu_341_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_10_reg_623 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_11_fu_349_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_11_reg_628 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_12_fu_357_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_12_reg_633 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_predicate_tran3to5_state3 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_phi_mux_UnifiedRetVal_phi_fu_237_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal UnifiedRetVal_reg_233 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln16_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln16_1_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln19_1_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_fu_68 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln16_fu_305_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal weightsT_fu_72 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_1_fu_76 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_16_fu_399_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_2_fu_80 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_17_fu_465_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_3_fu_84 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_18_fu_458_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_4_fu_88 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_5_fu_92 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_19_fu_391_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_6_fu_96 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_20_fu_451_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_7_fu_100 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_21_fu_444_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_8_fu_104 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal or_ln16_fu_288_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln19_1_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln16_1_fu_371_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln16_2_fu_381_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_237_p4;
                end if; 
            end if;
        end if;
    end process;


    UnifiedRetVal_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_582 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                UnifiedRetVal_reg_233 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                UnifiedRetVal_reg_233 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    i_1_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_1_fu_68 <= ap_const_lv4_0;
            elsif (((icmp_ln16_1_fu_299_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln16_fu_277_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_1_fu_68 <= add_ln16_fu_305_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_574 <= i_1_fu_68;
                icmp_ln16_1_reg_591 <= icmp_ln16_1_fu_299_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln16_reg_582 <= icmp_ln16_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln19_reg_615 <= icmp_ln19_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                weightsT_10_reg_623 <= weightsT_10_fu_341_p3;
                weightsT_11_reg_628 <= weightsT_11_fu_349_p3;
                weightsT_12_reg_633 <= weightsT_12_fu_357_p3;
                weightsT_4_load_1_reg_605 <= weightsT_4_fu_88;
                weightsT_8_load_1_reg_610 <= weightsT_8_fu_104;
                weightsT_load_1_reg_600 <= weightsT_fu_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_1_reg_591 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln16_reg_582 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                weightsT_1_fu_76 <= weightsT_16_fu_399_p3;
                weightsT_4_fu_88 <= weightsT_11_fu_349_p3;
                weightsT_5_fu_92 <= weightsT_19_fu_391_p3;
                weightsT_8_fu_104 <= weightsT_10_fu_341_p3;
                weightsT_fu_72 <= weightsT_12_fu_357_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                weightsT_2_fu_80 <= weightsT_17_fu_465_p3;
                weightsT_3_fu_84 <= weightsT_18_fu_458_p3;
                weightsT_6_fu_96 <= weightsT_20_fu_451_p3;
                weightsT_7_fu_100 <= weightsT_21_fu_444_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln16_reg_582, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_subdone, ap_predicate_tran3to5_state3, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln16_reg_582 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_predicate_tran3to5_state3 = ap_const_boolean_1)))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln16_reg_582 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_predicate_tran3to5_state3 = ap_const_boolean_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln16_fu_305_p2 <= std_logic_vector(unsigned(i_1_fu_68) + unsigned(ap_const_lv4_4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln16_reg_582, ap_predicate_tran3to5_state3)
    begin
        if (((icmp_ln16_reg_582 = ap_const_lv1_0) or (ap_predicate_tran3to5_state3 = ap_const_boolean_1))) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_UnifiedRetVal_phi_fu_237_p4_assign_proc : process(icmp_ln16_reg_582, UnifiedRetVal_reg_233, ap_CS_fsm_state5)
    begin
        if (((icmp_ln16_reg_582 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_237_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_UnifiedRetVal_phi_fu_237_p4 <= UnifiedRetVal_reg_233;
        end if; 
    end process;


    ap_predicate_tran3to5_state3_assign_proc : process(icmp_ln16_reg_582, icmp_ln16_1_reg_591)
    begin
                ap_predicate_tran3to5_state3 <= ((icmp_ln16_1_reg_591 = ap_const_lv1_0) and (icmp_ln16_reg_582 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_UnifiedRetVal_phi_fu_237_p4, ap_CS_fsm_state5, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_return <= ap_phi_mux_UnifiedRetVal_phi_fu_237_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    icmp_ln16_1_fu_299_p2 <= "1" when (unsigned(or_ln16_fu_288_p2) < unsigned(ap_const_lv4_9)) else "0";
    icmp_ln16_fu_277_p2 <= "1" when (unsigned(i_1_fu_68) < unsigned(ap_const_lv4_9)) else "0";
    icmp_ln19_1_fu_330_p2 <= "1" when (i_reg_574 = ap_const_lv4_4) else "0";
    icmp_ln19_fu_325_p2 <= "1" when (i_reg_574 = ap_const_lv4_0) else "0";
    or_ln16_1_fu_371_p2 <= (i_reg_574 or ap_const_lv4_2);
    or_ln16_2_fu_381_p2 <= (i_reg_574 or ap_const_lv4_3);
    or_ln16_fu_288_p2 <= (i_1_fu_68 or ap_const_lv4_1);
    or_ln19_fu_335_p2 <= (icmp_ln19_fu_325_p2 or icmp_ln19_1_fu_330_p2);
    weightsT_10_fu_341_p3 <= 
        weightsT_8_fu_104 when (or_ln19_fu_335_p2(0) = '1') else 
        weights_q1;
    weightsT_10_out <= weightsT_10_reg_623;

    weightsT_10_out_ap_vld_assign_proc : process(icmp_ln16_reg_582, ap_CS_fsm_state5)
    begin
        if (((icmp_ln16_reg_582 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            weightsT_10_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_10_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_11_fu_349_p3 <= 
        weights_q1 when (icmp_ln19_1_fu_330_p2(0) = '1') else 
        weightsT_4_fu_88;
    weightsT_11_out <= weightsT_11_reg_628;

    weightsT_11_out_ap_vld_assign_proc : process(icmp_ln16_reg_582, ap_CS_fsm_state5)
    begin
        if (((icmp_ln16_reg_582 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            weightsT_11_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_12_fu_357_p3 <= 
        weights_q1 when (icmp_ln19_fu_325_p2(0) = '1') else 
        weightsT_fu_72;
    weightsT_12_out <= weightsT_12_reg_633;

    weightsT_12_out_ap_vld_assign_proc : process(icmp_ln16_reg_582, ap_CS_fsm_state5)
    begin
        if (((icmp_ln16_reg_582 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            weightsT_12_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_12_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_16_fu_399_p3 <= 
        weights_q0 when (icmp_ln19_fu_325_p2(0) = '1') else 
        weightsT_1_fu_76;
    weightsT_17_fu_465_p3 <= 
        weights_q1 when (icmp_ln19_reg_615(0) = '1') else 
        weightsT_2_fu_80;
    weightsT_18_fu_458_p3 <= 
        weights_q0 when (icmp_ln19_reg_615(0) = '1') else 
        weightsT_3_fu_84;
    weightsT_19_fu_391_p3 <= 
        weightsT_5_fu_92 when (icmp_ln19_fu_325_p2(0) = '1') else 
        weights_q0;
    weightsT_1_out <= weightsT_1_fu_76;

    weightsT_1_out_ap_vld_assign_proc : process(icmp_ln16_reg_582, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln16_reg_582 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            weightsT_1_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_20_fu_451_p3 <= 
        weightsT_6_fu_96 when (icmp_ln19_reg_615(0) = '1') else 
        weights_q1;
    weightsT_21_fu_444_p3 <= 
        weightsT_7_fu_100 when (icmp_ln19_reg_615(0) = '1') else 
        weights_q0;
    weightsT_2_out <= weightsT_2_fu_80;

    weightsT_2_out_ap_vld_assign_proc : process(icmp_ln16_reg_582, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln16_reg_582 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            weightsT_2_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_3_out <= weightsT_3_fu_84;

    weightsT_3_out_ap_vld_assign_proc : process(icmp_ln16_reg_582, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln16_reg_582 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            weightsT_3_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    weightsT_4_out_assign_proc : process(icmp_ln16_reg_582, weightsT_4_load_1_reg_605, ap_CS_fsm_state6, ap_CS_fsm_state5, weightsT_4_fu_88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weightsT_4_out <= weightsT_4_fu_88;
        elsif (((icmp_ln16_reg_582 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            weightsT_4_out <= weightsT_4_load_1_reg_605;
        else 
            weightsT_4_out <= "XXXXXXXX";
        end if; 
    end process;


    weightsT_4_out_ap_vld_assign_proc : process(icmp_ln16_reg_582, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln16_reg_582 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            weightsT_4_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_5_out <= weightsT_5_fu_92;

    weightsT_5_out_ap_vld_assign_proc : process(icmp_ln16_reg_582, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln16_reg_582 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            weightsT_5_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_6_out <= weightsT_6_fu_96;

    weightsT_6_out_ap_vld_assign_proc : process(icmp_ln16_reg_582, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln16_reg_582 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            weightsT_6_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_7_out <= weightsT_7_fu_100;

    weightsT_7_out_ap_vld_assign_proc : process(icmp_ln16_reg_582, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln16_reg_582 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            weightsT_7_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    weightsT_8_out_assign_proc : process(icmp_ln16_reg_582, weightsT_8_load_1_reg_610, ap_CS_fsm_state6, ap_CS_fsm_state5, weightsT_8_fu_104)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weightsT_8_out <= weightsT_8_fu_104;
        elsif (((icmp_ln16_reg_582 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            weightsT_8_out <= weightsT_8_load_1_reg_610;
        else 
            weightsT_8_out <= "XXXXXXXX";
        end if; 
    end process;


    weightsT_8_out_ap_vld_assign_proc : process(icmp_ln16_reg_582, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln16_reg_582 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            weightsT_8_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    weightsT_out_assign_proc : process(icmp_ln16_reg_582, weightsT_load_1_reg_600, ap_CS_fsm_state6, ap_CS_fsm_state5, weightsT_fu_72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weightsT_out <= weightsT_fu_72;
        elsif (((icmp_ln16_reg_582 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            weightsT_out <= weightsT_load_1_reg_600;
        else 
            weightsT_out <= "XXXXXXXX";
        end if; 
    end process;


    weightsT_out_ap_vld_assign_proc : process(icmp_ln16_reg_582, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln16_reg_582 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            weightsT_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    weights_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln16_1_fu_294_p1, ap_block_pp0_stage1, zext_ln19_1_fu_386_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                weights_address0 <= zext_ln19_1_fu_386_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                weights_address0 <= zext_ln16_1_fu_294_p1(4 - 1 downto 0);
            else 
                weights_address0 <= "XXXX";
            end if;
        else 
            weights_address0 <= "XXXX";
        end if; 
    end process;


    weights_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, zext_ln16_fu_283_p1, ap_block_pp0_stage0, zext_ln19_fu_376_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                weights_address1 <= zext_ln19_fu_376_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                weights_address1 <= zext_ln16_fu_283_p1(4 - 1 downto 0);
            else 
                weights_address1 <= "XXXX";
            end if;
        else 
            weights_address1 <= "XXXX";
        end if; 
    end process;


    weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            weights_ce0 <= ap_const_logic_1;
        else 
            weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            weights_ce1 <= ap_const_logic_1;
        else 
            weights_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln16_1_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln16_fu_288_p2),64));
    zext_ln16_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_68),64));
    zext_ln19_1_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln16_2_fu_381_p2),64));
    zext_ln19_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln16_1_fu_371_p2),64));
end behav;
