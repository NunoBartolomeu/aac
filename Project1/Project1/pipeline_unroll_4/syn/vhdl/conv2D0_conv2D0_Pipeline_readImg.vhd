-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2D0_conv2D0_Pipeline_readImg is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_in_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    img_in_ce0 : OUT STD_LOGIC;
    img_in_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    img_in_ce1 : OUT STD_LOGIC;
    img_in_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_15_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_15_out_ap_vld : OUT STD_LOGIC;
    img_inT_14_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_14_out_ap_vld : OUT STD_LOGIC;
    img_inT_13_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_13_out_ap_vld : OUT STD_LOGIC;
    img_inT_12_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_12_out_ap_vld : OUT STD_LOGIC;
    img_inT_11_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_11_out_ap_vld : OUT STD_LOGIC;
    img_inT_10_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_10_out_ap_vld : OUT STD_LOGIC;
    img_inT_9_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_9_out_ap_vld : OUT STD_LOGIC;
    img_inT_8_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_8_out_ap_vld : OUT STD_LOGIC;
    img_inT_7_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_7_out_ap_vld : OUT STD_LOGIC;
    img_inT_6_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_6_out_ap_vld : OUT STD_LOGIC;
    img_inT_5_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_5_out_ap_vld : OUT STD_LOGIC;
    img_inT_4_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_4_out_ap_vld : OUT STD_LOGIC;
    img_inT_3_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_3_out_ap_vld : OUT STD_LOGIC;
    img_inT_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_2_out_ap_vld : OUT STD_LOGIC;
    img_inT_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_1_out_ap_vld : OUT STD_LOGIC;
    img_inT_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of conv2D0_conv2D0_Pipeline_readImg is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_fu_309_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal tmp_reg_615 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln12_fu_322_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln12_reg_619 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln12_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln12_1_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln15_1_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_80 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln12_fu_337_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (4 downto 0);
    signal img_inT_fu_84 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_1_fu_88 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_2_fu_92 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_3_fu_96 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_4_fu_100 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_5_fu_104 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_6_fu_108 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_7_fu_112 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_8_fu_116 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_9_fu_120 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_10_fu_124 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_11_fu_128 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_12_fu_132 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_13_fu_136 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_14_fu_140 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_15_fu_144 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal or_ln12_fu_326_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln12_1_fu_348_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln12_2_fu_358_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component conv2D0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component conv2D0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((tmp_fu_309_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_80 <= add_ln12_fu_337_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_80 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln12_reg_619 = ap_const_lv4_8))) then
                img_inT_10_fu_124 <= img_in_q1;
                img_inT_11_fu_128 <= img_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((trunc_ln12_reg_619 = ap_const_lv4_8)) and not((trunc_ln12_reg_619 = ap_const_lv4_4)) and not((trunc_ln12_reg_619 = ap_const_lv4_0)) and (tmp_reg_615 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                img_inT_12_fu_132 <= img_in_q1;
                img_inT_13_fu_136 <= img_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((trunc_ln12_reg_619 = ap_const_lv4_8)) and not((trunc_ln12_reg_619 = ap_const_lv4_4)) and not((trunc_ln12_reg_619 = ap_const_lv4_0)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                img_inT_14_fu_140 <= img_in_q1;
                img_inT_15_fu_144 <= img_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_615 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln12_reg_619 = ap_const_lv4_0))) then
                img_inT_1_fu_88 <= img_in_q0;
                img_inT_fu_84 <= img_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln12_reg_619 = ap_const_lv4_0))) then
                img_inT_2_fu_92 <= img_in_q1;
                img_inT_3_fu_96 <= img_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_615 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln12_reg_619 = ap_const_lv4_4))) then
                img_inT_4_fu_100 <= img_in_q1;
                img_inT_5_fu_104 <= img_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln12_reg_619 = ap_const_lv4_4))) then
                img_inT_6_fu_108 <= img_in_q1;
                img_inT_7_fu_112 <= img_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_615 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln12_reg_619 = ap_const_lv4_8))) then
                img_inT_8_fu_116 <= img_in_q1;
                img_inT_9_fu_120 <= img_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_reg_615 <= ap_sig_allocacmp_i_2(4 downto 4);
                trunc_ln12_reg_619 <= trunc_ln12_fu_322_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0, ap_block_pp0_stage1_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln12_fu_337_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv5_4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, tmp_fu_309_p3)
    begin
        if (((tmp_fu_309_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_80, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_80;
        end if; 
    end process;

    img_inT_10_out <= img_inT_10_fu_124;

    img_inT_10_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_309_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_309_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_10_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_10_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_11_out <= img_inT_11_fu_128;

    img_inT_11_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_309_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_309_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_11_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_12_out <= img_inT_12_fu_132;

    img_inT_12_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_309_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_309_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_12_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_12_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_13_out <= img_inT_13_fu_136;

    img_inT_13_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_309_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_309_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_13_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_13_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_14_out <= img_inT_14_fu_140;

    img_inT_14_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_309_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_309_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_14_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_14_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_15_out <= img_inT_15_fu_144;

    img_inT_15_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_309_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_309_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_15_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_15_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_1_out <= img_inT_1_fu_88;

    img_inT_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_309_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_309_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_1_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_2_out <= img_inT_2_fu_92;

    img_inT_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_309_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_309_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_2_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_3_out <= img_inT_3_fu_96;

    img_inT_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_309_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_309_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_3_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_4_out <= img_inT_4_fu_100;

    img_inT_4_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_309_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_309_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_4_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_5_out <= img_inT_5_fu_104;

    img_inT_5_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_309_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_309_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_5_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_6_out <= img_inT_6_fu_108;

    img_inT_6_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_309_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_309_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_6_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_7_out <= img_inT_7_fu_112;

    img_inT_7_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_309_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_309_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_7_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_8_out <= img_inT_8_fu_116;

    img_inT_8_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_309_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_309_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_8_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_9_out <= img_inT_9_fu_120;

    img_inT_9_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_309_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_309_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_9_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_9_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_out <= img_inT_fu_84;

    img_inT_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_309_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_309_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_inT_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    img_in_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln12_1_fu_332_p1, ap_block_pp0_stage1, zext_ln15_1_fu_363_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                img_in_address0 <= zext_ln15_1_fu_363_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                img_in_address0 <= zext_ln12_1_fu_332_p1(4 - 1 downto 0);
            else 
                img_in_address0 <= "XXXX";
            end if;
        else 
            img_in_address0 <= "XXXX";
        end if; 
    end process;


    img_in_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, zext_ln12_fu_317_p1, ap_block_pp0_stage0, zext_ln15_fu_353_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                img_in_address1 <= zext_ln15_fu_353_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                img_in_address1 <= zext_ln12_fu_317_p1(4 - 1 downto 0);
            else 
                img_in_address1 <= "XXXX";
            end if;
        else 
            img_in_address1 <= "XXXX";
        end if; 
    end process;


    img_in_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            img_in_ce0 <= ap_const_logic_1;
        else 
            img_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    img_in_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            img_in_ce1 <= ap_const_logic_1;
        else 
            img_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln12_1_fu_348_p2 <= (trunc_ln12_reg_619 or ap_const_lv4_2);
    or_ln12_2_fu_358_p2 <= (trunc_ln12_reg_619 or ap_const_lv4_3);
    or_ln12_fu_326_p2 <= (trunc_ln12_fu_322_p1 or ap_const_lv4_1);
    tmp_fu_309_p3 <= ap_sig_allocacmp_i_2(4 downto 4);
    trunc_ln12_fu_322_p1 <= ap_sig_allocacmp_i_2(4 - 1 downto 0);
    zext_ln12_1_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln12_fu_326_p2),64));
    zext_ln12_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_2),64));
    zext_ln15_1_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln12_2_fu_358_p2),64));
    zext_ln15_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln12_1_fu_348_p2),64));
end behav;
