// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv2D0_conv2D0,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.270000,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=71,HLS_SYN_LUT=836,HLS_VERSION=2023_2}" *)

module conv2D0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_in_0,
        img_in_1,
        img_in_2,
        img_in_3,
        img_in_4,
        img_in_5,
        img_in_6,
        img_in_7,
        img_in_8,
        img_in_9,
        img_in_10,
        img_in_11,
        img_in_12,
        img_in_13,
        img_in_14,
        img_in_15,
        img_out_0,
        img_out_0_ap_vld,
        img_out_1,
        img_out_1_ap_vld,
        img_out_2,
        img_out_2_ap_vld,
        img_out_3,
        img_out_3_ap_vld,
        weights_0_address0,
        weights_0_ce0,
        weights_0_q0,
        weights_1_address0,
        weights_1_ce0,
        weights_1_q0,
        weights_2_address0,
        weights_2_ce0,
        weights_2_q0,
        weights_3_address0,
        weights_3_ce0,
        weights_3_q0,
        weights_4_address0,
        weights_4_ce0,
        weights_4_q0,
        weights_5_address0,
        weights_5_ce0,
        weights_5_q0,
        weights_6_address0,
        weights_6_ce0,
        weights_6_q0,
        weights_7_address0,
        weights_7_ce0,
        weights_7_q0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] img_in_0;
input  [7:0] img_in_1;
input  [7:0] img_in_2;
input  [7:0] img_in_3;
input  [7:0] img_in_4;
input  [7:0] img_in_5;
input  [7:0] img_in_6;
input  [7:0] img_in_7;
input  [7:0] img_in_8;
input  [7:0] img_in_9;
input  [7:0] img_in_10;
input  [7:0] img_in_11;
input  [7:0] img_in_12;
input  [7:0] img_in_13;
input  [7:0] img_in_14;
input  [7:0] img_in_15;
output  [7:0] img_out_0;
output   img_out_0_ap_vld;
output  [7:0] img_out_1;
output   img_out_1_ap_vld;
output  [7:0] img_out_2;
output   img_out_2_ap_vld;
output  [7:0] img_out_3;
output   img_out_3_ap_vld;
output  [0:0] weights_0_address0;
output   weights_0_ce0;
input  [7:0] weights_0_q0;
output  [0:0] weights_1_address0;
output   weights_1_ce0;
input  [7:0] weights_1_q0;
output  [0:0] weights_2_address0;
output   weights_2_ce0;
input  [7:0] weights_2_q0;
output  [0:0] weights_3_address0;
output   weights_3_ce0;
input  [7:0] weights_3_q0;
output  [0:0] weights_4_address0;
output   weights_4_ce0;
input  [7:0] weights_4_q0;
output  [0:0] weights_5_address0;
output   weights_5_ce0;
input  [7:0] weights_5_q0;
output  [0:0] weights_6_address0;
output   weights_6_ce0;
input  [7:0] weights_6_q0;
output  [0:0] weights_7_address0;
output   weights_7_ce0;
input  [7:0] weights_7_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_out_0_ap_vld;
reg img_out_1_ap_vld;
reg img_out_2_ap_vld;
reg img_out_3_ap_vld;
reg[0:0] weights_0_address0;
reg weights_0_ce0;
reg weights_1_ce0;
reg weights_2_ce0;
reg weights_3_ce0;
reg weights_4_ce0;
reg weights_5_ce0;
reg weights_6_ce0;
reg weights_7_ce0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state3;
reg  signed [7:0] weights_7_load_reg_745;
reg  signed [7:0] weights_4_load_reg_796;
wire   [7:0] mul_ln42_6_fu_335_p2;
wire   [7:0] mul_ln42_15_fu_339_p2;
wire   [7:0] mul_ln42_24_fu_343_p2;
wire   [7:0] mul_ln42_33_fu_347_p2;
reg  signed [7:0] weights_1_load_reg_824;
wire    ap_CS_fsm_state5;
reg  signed [7:0] weights_2_load_reg_832;
wire   [7:0] mul_ln42_3_fu_351_p2;
wire   [7:0] grp_fu_458_p3;
wire   [7:0] mul_ln42_12_fu_355_p2;
wire   [7:0] grp_fu_466_p3;
wire   [7:0] mul_ln42_21_fu_359_p2;
wire   [7:0] grp_fu_474_p3;
wire   [7:0] mul_ln42_30_fu_363_p2;
wire   [7:0] grp_fu_482_p3;
wire   [7:0] mul_ln42_fu_367_p2;
wire    ap_CS_fsm_state6;
wire   [7:0] mul_ln42_1_fu_371_p2;
(* use_dsp48 = "no" *) wire   [7:0] add_ln42_6_fu_376_p2;
reg   [7:0] add_ln42_6_reg_890;
wire   [7:0] mul_ln42_9_fu_380_p2;
wire   [7:0] mul_ln42_10_fu_385_p2;
(* use_dsp48 = "no" *) wire   [7:0] add_ln42_14_fu_390_p2;
reg   [7:0] add_ln42_14_reg_905;
wire   [7:0] mul_ln42_18_fu_394_p2;
wire   [7:0] mul_ln42_19_fu_398_p2;
(* use_dsp48 = "no" *) wire   [7:0] add_ln42_22_fu_402_p2;
reg   [7:0] add_ln42_22_reg_920;
wire   [7:0] mul_ln42_27_fu_406_p2;
wire   [7:0] mul_ln42_28_fu_410_p2;
(* use_dsp48 = "no" *) wire   [7:0] add_ln42_30_fu_414_p2;
reg   [7:0] add_ln42_30_reg_935;
wire    ap_CS_fsm_state7;
wire  signed [7:0] add_ln42_6_fu_376_p0;
wire   [7:0] grp_fu_499_p3;
wire  signed [7:0] add_ln42_6_fu_376_p1;
wire   [7:0] grp_fu_490_p3;
wire  signed [7:0] add_ln42_14_fu_390_p0;
wire   [7:0] grp_fu_517_p3;
wire  signed [7:0] add_ln42_14_fu_390_p1;
wire   [7:0] grp_fu_508_p3;
wire  signed [7:0] add_ln42_22_fu_402_p0;
wire   [7:0] grp_fu_534_p3;
wire  signed [7:0] add_ln42_22_fu_402_p1;
wire   [7:0] grp_fu_526_p3;
wire  signed [7:0] add_ln42_30_fu_414_p0;
wire   [7:0] grp_fu_551_p3;
wire  signed [7:0] add_ln42_30_fu_414_p1;
wire   [7:0] grp_fu_543_p3;
wire  signed [7:0] add_ln42_2_fu_418_p0;
wire   [7:0] grp_fu_569_p3;
wire  signed [7:0] add_ln42_2_fu_418_p1;
wire   [7:0] grp_fu_560_p3;
(* use_dsp48 = "no" *) wire   [7:0] add_ln42_2_fu_418_p2;
wire  signed [7:0] add_ln42_10_fu_428_p0;
wire   [7:0] grp_fu_587_p3;
wire  signed [7:0] add_ln42_10_fu_428_p1;
wire   [7:0] grp_fu_578_p3;
(* use_dsp48 = "no" *) wire   [7:0] add_ln42_10_fu_428_p2;
wire  signed [7:0] add_ln42_18_fu_438_p0;
wire   [7:0] grp_fu_605_p3;
wire  signed [7:0] add_ln42_18_fu_438_p1;
wire   [7:0] grp_fu_596_p3;
(* use_dsp48 = "no" *) wire   [7:0] add_ln42_18_fu_438_p2;
wire  signed [7:0] add_ln42_26_fu_448_p0;
wire   [7:0] grp_fu_622_p3;
wire  signed [7:0] add_ln42_26_fu_448_p1;
wire   [7:0] grp_fu_613_p3;
(* use_dsp48 = "no" *) wire   [7:0] add_ln42_26_fu_448_p2;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U1(
    .din0(weights_7_load_reg_745),
    .din1(img_in_9),
    .dout(mul_ln42_6_fu_335_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U2(
    .din0(weights_7_load_reg_745),
    .din1(img_in_10),
    .dout(mul_ln42_15_fu_339_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U3(
    .din0(weights_7_load_reg_745),
    .din1(img_in_13),
    .dout(mul_ln42_24_fu_343_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U4(
    .din0(weights_7_load_reg_745),
    .din1(img_in_14),
    .dout(mul_ln42_33_fu_347_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U5(
    .din0(weights_4_load_reg_796),
    .din1(img_in_5),
    .dout(mul_ln42_3_fu_351_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U6(
    .din0(weights_4_load_reg_796),
    .din1(img_in_6),
    .dout(mul_ln42_12_fu_355_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U7(
    .din0(weights_4_load_reg_796),
    .din1(img_in_9),
    .dout(mul_ln42_21_fu_359_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U8(
    .din0(weights_4_load_reg_796),
    .din1(img_in_10),
    .dout(mul_ln42_30_fu_363_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U9(
    .din0(weights_1_load_reg_824),
    .din1(img_in_1),
    .dout(mul_ln42_fu_367_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U10(
    .din0(weights_2_load_reg_832),
    .din1(img_in_2),
    .dout(mul_ln42_1_fu_371_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U11(
    .din0(weights_1_load_reg_824),
    .din1(img_in_2),
    .dout(mul_ln42_9_fu_380_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U12(
    .din0(weights_2_load_reg_832),
    .din1(img_in_3),
    .dout(mul_ln42_10_fu_385_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U13(
    .din0(weights_1_load_reg_824),
    .din1(img_in_5),
    .dout(mul_ln42_18_fu_394_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U14(
    .din0(weights_2_load_reg_832),
    .din1(img_in_6),
    .dout(mul_ln42_19_fu_398_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U15(
    .din0(weights_1_load_reg_824),
    .din1(img_in_6),
    .dout(mul_ln42_27_fu_406_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U16(
    .din0(weights_2_load_reg_832),
    .din1(img_in_7),
    .dout(mul_ln42_28_fu_410_p2)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_0_q0),
    .din1(img_in_10),
    .din2(mul_ln42_6_fu_335_p2),
    .ce(1'b1),
    .dout(grp_fu_458_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_0_q0),
    .din1(img_in_11),
    .din2(mul_ln42_15_fu_339_p2),
    .ce(1'b1),
    .dout(grp_fu_466_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_0_q0),
    .din1(img_in_14),
    .din2(mul_ln42_24_fu_343_p2),
    .ce(1'b1),
    .dout(grp_fu_474_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_0_q0),
    .din1(img_in_15),
    .din2(mul_ln42_33_fu_347_p2),
    .ce(1'b1),
    .dout(grp_fu_482_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_5_q0),
    .din1(img_in_6),
    .din2(mul_ln42_3_fu_351_p2),
    .ce(1'b1),
    .dout(grp_fu_490_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_6_q0),
    .din1(img_in_8),
    .din2(grp_fu_458_p3),
    .ce(1'b1),
    .dout(grp_fu_499_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_5_q0),
    .din1(img_in_7),
    .din2(mul_ln42_12_fu_355_p2),
    .ce(1'b1),
    .dout(grp_fu_508_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_6_q0),
    .din1(img_in_9),
    .din2(grp_fu_466_p3),
    .ce(1'b1),
    .dout(grp_fu_517_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_5_q0),
    .din1(img_in_10),
    .din2(mul_ln42_21_fu_359_p2),
    .ce(1'b1),
    .dout(grp_fu_526_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_6_q0),
    .din1(img_in_12),
    .din2(grp_fu_474_p3),
    .ce(1'b1),
    .dout(grp_fu_534_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_5_q0),
    .din1(img_in_11),
    .din2(mul_ln42_30_fu_363_p2),
    .ce(1'b1),
    .dout(grp_fu_543_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_6_q0),
    .din1(img_in_13),
    .din2(grp_fu_482_p3),
    .ce(1'b1),
    .dout(grp_fu_551_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_0_q0),
    .din1(img_in_0),
    .din2(mul_ln42_fu_367_p2),
    .ce(1'b1),
    .dout(grp_fu_560_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_3_q0),
    .din1(img_in_4),
    .din2(mul_ln42_1_fu_371_p2),
    .ce(1'b1),
    .dout(grp_fu_569_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_0_q0),
    .din1(img_in_1),
    .din2(mul_ln42_9_fu_380_p2),
    .ce(1'b1),
    .dout(grp_fu_578_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_3_q0),
    .din1(img_in_5),
    .din2(mul_ln42_10_fu_385_p2),
    .ce(1'b1),
    .dout(grp_fu_587_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_0_q0),
    .din1(img_in_4),
    .din2(mul_ln42_18_fu_394_p2),
    .ce(1'b1),
    .dout(grp_fu_596_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_3_q0),
    .din1(img_in_8),
    .din2(mul_ln42_19_fu_398_p2),
    .ce(1'b1),
    .dout(grp_fu_605_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_0_q0),
    .din1(img_in_5),
    .din2(mul_ln42_27_fu_406_p2),
    .ce(1'b1),
    .dout(grp_fu_613_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_3_q0),
    .din1(img_in_9),
    .din2(mul_ln42_28_fu_410_p2),
    .ce(1'b1),
    .dout(grp_fu_622_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln42_14_reg_905 <= add_ln42_14_fu_390_p2;
        add_ln42_22_reg_920 <= add_ln42_22_fu_402_p2;
        add_ln42_30_reg_935 <= add_ln42_30_fu_414_p2;
        add_ln42_6_reg_890 <= add_ln42_6_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights_1_load_reg_824 <= weights_1_q0;
        weights_2_load_reg_832 <= weights_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weights_4_load_reg_796 <= weights_4_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weights_7_load_reg_745 <= weights_7_q0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        img_out_0_ap_vld = 1'b1;
    end else begin
        img_out_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        img_out_1_ap_vld = 1'b1;
    end else begin
        img_out_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        img_out_2_ap_vld = 1'b1;
    end else begin
        img_out_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        img_out_3_ap_vld = 1'b1;
    end else begin
        img_out_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weights_0_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        weights_0_address0 = 64'd1;
    end else begin
        weights_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        weights_0_ce0 = 1'b1;
    end else begin
        weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weights_1_ce0 = 1'b1;
    end else begin
        weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weights_2_ce0 = 1'b1;
    end else begin
        weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weights_3_ce0 = 1'b1;
    end else begin
        weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weights_4_ce0 = 1'b1;
    end else begin
        weights_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        weights_5_ce0 = 1'b1;
    end else begin
        weights_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        weights_6_ce0 = 1'b1;
    end else begin
        weights_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        weights_7_ce0 = 1'b1;
    end else begin
        weights_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln42_10_fu_428_p0 = grp_fu_587_p3;

assign add_ln42_10_fu_428_p1 = grp_fu_578_p3;

assign add_ln42_10_fu_428_p2 = ($signed(add_ln42_10_fu_428_p0) + $signed(add_ln42_10_fu_428_p1));

assign add_ln42_14_fu_390_p0 = grp_fu_517_p3;

assign add_ln42_14_fu_390_p1 = grp_fu_508_p3;

assign add_ln42_14_fu_390_p2 = ($signed(add_ln42_14_fu_390_p0) + $signed(add_ln42_14_fu_390_p1));

assign add_ln42_18_fu_438_p0 = grp_fu_605_p3;

assign add_ln42_18_fu_438_p1 = grp_fu_596_p3;

assign add_ln42_18_fu_438_p2 = ($signed(add_ln42_18_fu_438_p0) + $signed(add_ln42_18_fu_438_p1));

assign add_ln42_22_fu_402_p0 = grp_fu_534_p3;

assign add_ln42_22_fu_402_p1 = grp_fu_526_p3;

assign add_ln42_22_fu_402_p2 = ($signed(add_ln42_22_fu_402_p0) + $signed(add_ln42_22_fu_402_p1));

assign add_ln42_26_fu_448_p0 = grp_fu_622_p3;

assign add_ln42_26_fu_448_p1 = grp_fu_613_p3;

assign add_ln42_26_fu_448_p2 = ($signed(add_ln42_26_fu_448_p0) + $signed(add_ln42_26_fu_448_p1));

assign add_ln42_2_fu_418_p0 = grp_fu_569_p3;

assign add_ln42_2_fu_418_p1 = grp_fu_560_p3;

assign add_ln42_2_fu_418_p2 = ($signed(add_ln42_2_fu_418_p0) + $signed(add_ln42_2_fu_418_p1));

assign add_ln42_30_fu_414_p0 = grp_fu_551_p3;

assign add_ln42_30_fu_414_p1 = grp_fu_543_p3;

assign add_ln42_30_fu_414_p2 = ($signed(add_ln42_30_fu_414_p0) + $signed(add_ln42_30_fu_414_p1));

assign add_ln42_6_fu_376_p0 = grp_fu_499_p3;

assign add_ln42_6_fu_376_p1 = grp_fu_490_p3;

assign add_ln42_6_fu_376_p2 = ($signed(add_ln42_6_fu_376_p0) + $signed(add_ln42_6_fu_376_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign img_out_0 = (add_ln42_6_reg_890 + add_ln42_2_fu_418_p2);

assign img_out_1 = (add_ln42_14_reg_905 + add_ln42_10_fu_428_p2);

assign img_out_2 = (add_ln42_22_reg_920 + add_ln42_18_fu_438_p2);

assign img_out_3 = (add_ln42_30_reg_935 + add_ln42_26_fu_448_p2);

assign weights_1_address0 = 64'd0;

assign weights_2_address0 = 64'd0;

assign weights_3_address0 = 64'd0;

assign weights_4_address0 = 64'd0;

assign weights_5_address0 = 64'd0;

assign weights_6_address0 = 64'd0;

assign weights_7_address0 = 64'd0;

endmodule //conv2D0
