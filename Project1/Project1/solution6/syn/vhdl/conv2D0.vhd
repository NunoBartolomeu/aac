-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2D0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_in_0 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_3 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_4 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_6 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_7 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_8 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_9 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_10 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_11 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_12 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_13 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_14 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_15 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_out_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_out_0_ap_vld : OUT STD_LOGIC;
    img_out_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_out_1_ap_vld : OUT STD_LOGIC;
    img_out_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_out_2_ap_vld : OUT STD_LOGIC;
    img_out_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_out_3_ap_vld : OUT STD_LOGIC;
    weights_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    weights_0_ce0 : OUT STD_LOGIC;
    weights_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    weights_1_ce0 : OUT STD_LOGIC;
    weights_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_2_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    weights_2_ce0 : OUT STD_LOGIC;
    weights_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_3_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    weights_3_ce0 : OUT STD_LOGIC;
    weights_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_4_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    weights_4_ce0 : OUT STD_LOGIC;
    weights_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_5_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    weights_5_ce0 : OUT STD_LOGIC;
    weights_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_6_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    weights_6_ce0 : OUT STD_LOGIC;
    weights_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_7_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    weights_7_ce0 : OUT STD_LOGIC;
    weights_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of conv2D0 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2D0_conv2D0,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.270000,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=71,HLS_SYN_LUT=836,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal weights_7_load_reg_745 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_4_load_reg_796 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln42_6_fu_335_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln42_15_fu_339_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln42_24_fu_343_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln42_33_fu_347_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_1_load_reg_824 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal weights_2_load_reg_832 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln42_3_fu_351_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_458_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln42_12_fu_355_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_466_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln42_21_fu_359_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_474_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln42_30_fu_363_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_482_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln42_fu_367_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal mul_ln42_1_fu_371_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_6_fu_376_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln42_6_fu_376_p2 : signal is "no";
    signal add_ln42_6_reg_890 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln42_9_fu_380_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln42_10_fu_385_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_14_fu_390_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln42_14_fu_390_p2 : signal is "no";
    signal add_ln42_14_reg_905 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln42_18_fu_394_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln42_19_fu_398_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_22_fu_402_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln42_22_fu_402_p2 : signal is "no";
    signal add_ln42_22_reg_920 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln42_27_fu_406_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln42_28_fu_410_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_30_fu_414_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln42_30_fu_414_p2 : signal is "no";
    signal add_ln42_30_reg_935 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln42_6_fu_376_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_499_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_6_fu_376_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_490_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_14_fu_390_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_517_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_14_fu_390_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_508_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_22_fu_402_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_534_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_22_fu_402_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_526_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_30_fu_414_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_551_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_30_fu_414_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_543_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_2_fu_418_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_569_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_2_fu_418_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_560_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_2_fu_418_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln42_2_fu_418_p2 : signal is "no";
    signal add_ln42_10_fu_428_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_587_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_10_fu_428_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_578_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_10_fu_428_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln42_10_fu_428_p2 : signal is "no";
    signal add_ln42_18_fu_438_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_605_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_18_fu_438_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_596_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_18_fu_438_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln42_18_fu_438_p2 : signal is "no";
    signal add_ln42_26_fu_448_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_622_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_26_fu_448_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_613_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_26_fu_448_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln42_26_fu_448_p2 : signal is "no";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component conv2D0_mul_8s_8s_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv2D0_mac_muladd_8s_8s_8ns_8_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    mul_8s_8s_8_1_1_U1 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_7_load_reg_745,
        din1 => img_in_9,
        dout => mul_ln42_6_fu_335_p2);

    mul_8s_8s_8_1_1_U2 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_7_load_reg_745,
        din1 => img_in_10,
        dout => mul_ln42_15_fu_339_p2);

    mul_8s_8s_8_1_1_U3 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_7_load_reg_745,
        din1 => img_in_13,
        dout => mul_ln42_24_fu_343_p2);

    mul_8s_8s_8_1_1_U4 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_7_load_reg_745,
        din1 => img_in_14,
        dout => mul_ln42_33_fu_347_p2);

    mul_8s_8s_8_1_1_U5 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_4_load_reg_796,
        din1 => img_in_5,
        dout => mul_ln42_3_fu_351_p2);

    mul_8s_8s_8_1_1_U6 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_4_load_reg_796,
        din1 => img_in_6,
        dout => mul_ln42_12_fu_355_p2);

    mul_8s_8s_8_1_1_U7 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_4_load_reg_796,
        din1 => img_in_9,
        dout => mul_ln42_21_fu_359_p2);

    mul_8s_8s_8_1_1_U8 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_4_load_reg_796,
        din1 => img_in_10,
        dout => mul_ln42_30_fu_363_p2);

    mul_8s_8s_8_1_1_U9 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_1_load_reg_824,
        din1 => img_in_1,
        dout => mul_ln42_fu_367_p2);

    mul_8s_8s_8_1_1_U10 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_2_load_reg_832,
        din1 => img_in_2,
        dout => mul_ln42_1_fu_371_p2);

    mul_8s_8s_8_1_1_U11 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_1_load_reg_824,
        din1 => img_in_2,
        dout => mul_ln42_9_fu_380_p2);

    mul_8s_8s_8_1_1_U12 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_2_load_reg_832,
        din1 => img_in_3,
        dout => mul_ln42_10_fu_385_p2);

    mul_8s_8s_8_1_1_U13 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_1_load_reg_824,
        din1 => img_in_5,
        dout => mul_ln42_18_fu_394_p2);

    mul_8s_8s_8_1_1_U14 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_2_load_reg_832,
        din1 => img_in_6,
        dout => mul_ln42_19_fu_398_p2);

    mul_8s_8s_8_1_1_U15 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_1_load_reg_824,
        din1 => img_in_6,
        dout => mul_ln42_27_fu_406_p2);

    mul_8s_8s_8_1_1_U16 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_2_load_reg_832,
        din1 => img_in_7,
        dout => mul_ln42_28_fu_410_p2);

    mac_muladd_8s_8s_8ns_8_4_1_U17 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_0_q0,
        din1 => img_in_10,
        din2 => mul_ln42_6_fu_335_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_458_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U18 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_0_q0,
        din1 => img_in_11,
        din2 => mul_ln42_15_fu_339_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_466_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U19 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_0_q0,
        din1 => img_in_14,
        din2 => mul_ln42_24_fu_343_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_474_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U20 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_0_q0,
        din1 => img_in_15,
        din2 => mul_ln42_33_fu_347_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_482_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U21 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_5_q0,
        din1 => img_in_6,
        din2 => mul_ln42_3_fu_351_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_490_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U22 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_6_q0,
        din1 => img_in_8,
        din2 => grp_fu_458_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_499_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U23 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_5_q0,
        din1 => img_in_7,
        din2 => mul_ln42_12_fu_355_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_508_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U24 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_6_q0,
        din1 => img_in_9,
        din2 => grp_fu_466_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_517_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U25 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_5_q0,
        din1 => img_in_10,
        din2 => mul_ln42_21_fu_359_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_526_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U26 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_6_q0,
        din1 => img_in_12,
        din2 => grp_fu_474_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_534_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U27 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_5_q0,
        din1 => img_in_11,
        din2 => mul_ln42_30_fu_363_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_543_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U28 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_6_q0,
        din1 => img_in_13,
        din2 => grp_fu_482_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_551_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U29 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_0_q0,
        din1 => img_in_0,
        din2 => mul_ln42_fu_367_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_560_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U30 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_3_q0,
        din1 => img_in_4,
        din2 => mul_ln42_1_fu_371_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_569_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U31 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_0_q0,
        din1 => img_in_1,
        din2 => mul_ln42_9_fu_380_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_578_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U32 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_3_q0,
        din1 => img_in_5,
        din2 => mul_ln42_10_fu_385_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_587_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U33 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_0_q0,
        din1 => img_in_4,
        din2 => mul_ln42_18_fu_394_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_596_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U34 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_3_q0,
        din1 => img_in_8,
        din2 => mul_ln42_19_fu_398_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_605_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U35 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_0_q0,
        din1 => img_in_5,
        din2 => mul_ln42_27_fu_406_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_613_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U36 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_3_q0,
        din1 => img_in_9,
        din2 => mul_ln42_28_fu_410_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_622_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln42_14_reg_905 <= add_ln42_14_fu_390_p2;
                add_ln42_22_reg_920 <= add_ln42_22_fu_402_p2;
                add_ln42_30_reg_935 <= add_ln42_30_fu_414_p2;
                add_ln42_6_reg_890 <= add_ln42_6_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                weights_1_load_reg_824 <= weights_1_q0;
                weights_2_load_reg_832 <= weights_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                weights_4_load_reg_796 <= weights_4_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                weights_7_load_reg_745 <= weights_7_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln42_10_fu_428_p0 <= grp_fu_587_p3;
    add_ln42_10_fu_428_p1 <= grp_fu_578_p3;
    add_ln42_10_fu_428_p2 <= std_logic_vector(signed(add_ln42_10_fu_428_p0) + signed(add_ln42_10_fu_428_p1));
    add_ln42_14_fu_390_p0 <= grp_fu_517_p3;
    add_ln42_14_fu_390_p1 <= grp_fu_508_p3;
    add_ln42_14_fu_390_p2 <= std_logic_vector(signed(add_ln42_14_fu_390_p0) + signed(add_ln42_14_fu_390_p1));
    add_ln42_18_fu_438_p0 <= grp_fu_605_p3;
    add_ln42_18_fu_438_p1 <= grp_fu_596_p3;
    add_ln42_18_fu_438_p2 <= std_logic_vector(signed(add_ln42_18_fu_438_p0) + signed(add_ln42_18_fu_438_p1));
    add_ln42_22_fu_402_p0 <= grp_fu_534_p3;
    add_ln42_22_fu_402_p1 <= grp_fu_526_p3;
    add_ln42_22_fu_402_p2 <= std_logic_vector(signed(add_ln42_22_fu_402_p0) + signed(add_ln42_22_fu_402_p1));
    add_ln42_26_fu_448_p0 <= grp_fu_622_p3;
    add_ln42_26_fu_448_p1 <= grp_fu_613_p3;
    add_ln42_26_fu_448_p2 <= std_logic_vector(signed(add_ln42_26_fu_448_p0) + signed(add_ln42_26_fu_448_p1));
    add_ln42_2_fu_418_p0 <= grp_fu_569_p3;
    add_ln42_2_fu_418_p1 <= grp_fu_560_p3;
    add_ln42_2_fu_418_p2 <= std_logic_vector(signed(add_ln42_2_fu_418_p0) + signed(add_ln42_2_fu_418_p1));
    add_ln42_30_fu_414_p0 <= grp_fu_551_p3;
    add_ln42_30_fu_414_p1 <= grp_fu_543_p3;
    add_ln42_30_fu_414_p2 <= std_logic_vector(signed(add_ln42_30_fu_414_p0) + signed(add_ln42_30_fu_414_p1));
    add_ln42_6_fu_376_p0 <= grp_fu_499_p3;
    add_ln42_6_fu_376_p1 <= grp_fu_490_p3;
    add_ln42_6_fu_376_p2 <= std_logic_vector(signed(add_ln42_6_fu_376_p0) + signed(add_ln42_6_fu_376_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    img_out_0 <= std_logic_vector(unsigned(add_ln42_6_reg_890) + unsigned(add_ln42_2_fu_418_p2));

    img_out_0_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            img_out_0_ap_vld <= ap_const_logic_1;
        else 
            img_out_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_out_1 <= std_logic_vector(unsigned(add_ln42_14_reg_905) + unsigned(add_ln42_10_fu_428_p2));

    img_out_1_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            img_out_1_ap_vld <= ap_const_logic_1;
        else 
            img_out_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_out_2 <= std_logic_vector(unsigned(add_ln42_22_reg_920) + unsigned(add_ln42_18_fu_438_p2));

    img_out_2_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            img_out_2_ap_vld <= ap_const_logic_1;
        else 
            img_out_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_out_3 <= std_logic_vector(unsigned(add_ln42_30_reg_935) + unsigned(add_ln42_26_fu_448_p2));

    img_out_3_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            img_out_3_ap_vld <= ap_const_logic_1;
        else 
            img_out_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    weights_0_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weights_0_address0 <= ap_const_lv64_0(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            weights_0_address0 <= ap_const_lv64_1(1 - 1 downto 0);
        else 
            weights_0_address0 <= "X";
        end if; 
    end process;


    weights_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            weights_0_ce0 <= ap_const_logic_1;
        else 
            weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_1_address0 <= ap_const_lv64_0(1 - 1 downto 0);

    weights_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_1_ce0 <= ap_const_logic_1;
        else 
            weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_2_address0 <= ap_const_lv64_0(1 - 1 downto 0);

    weights_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_2_ce0 <= ap_const_logic_1;
        else 
            weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_3_address0 <= ap_const_lv64_0(1 - 1 downto 0);

    weights_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weights_3_ce0 <= ap_const_logic_1;
        else 
            weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_4_address0 <= ap_const_lv64_0(1 - 1 downto 0);

    weights_4_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weights_4_ce0 <= ap_const_logic_1;
        else 
            weights_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_5_address0 <= ap_const_lv64_0(1 - 1 downto 0);

    weights_5_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            weights_5_ce0 <= ap_const_logic_1;
        else 
            weights_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_6_address0 <= ap_const_lv64_0(1 - 1 downto 0);

    weights_6_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            weights_6_ce0 <= ap_const_logic_1;
        else 
            weights_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_7_address0 <= ap_const_lv64_0(1 - 1 downto 0);

    weights_7_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            weights_7_ce0 <= ap_const_logic_1;
        else 
            weights_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
