// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module conv2D0_conv2D0_Pipeline_readweights (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weights_0_address0,
        weights_0_ce0,
        weights_0_q0,
        weights_1_address0,
        weights_1_ce0,
        weights_1_q0,
        weights_2_address0,
        weights_2_ce0,
        weights_2_q0,
        weights_3_address0,
        weights_3_ce0,
        weights_3_q0,
        weights_4_address0,
        weights_4_ce0,
        weights_4_q0,
        weightsT_0_4_load_out,
        weightsT_0_4_load_out_ap_vld,
        weightsT_1_3_load_out,
        weightsT_1_3_load_out_ap_vld,
        weightsT_0_3_load_out,
        weightsT_0_3_load_out_ap_vld,
        weightsT_1_2_load_out,
        weightsT_1_2_load_out_ap_vld,
        weightsT_0_2_load_out,
        weightsT_0_2_load_out_ap_vld,
        weightsT_1_1_load_out,
        weightsT_1_1_load_out_ap_vld,
        weightsT_0_1_load_out,
        weightsT_0_1_load_out_ap_vld,
        weightsT_1_load_out,
        weightsT_1_load_out_ap_vld,
        weightsT_0_load_out,
        weightsT_0_load_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] weights_0_address0;
output   weights_0_ce0;
input  [7:0] weights_0_q0;
output  [0:0] weights_1_address0;
output   weights_1_ce0;
input  [7:0] weights_1_q0;
output  [0:0] weights_2_address0;
output   weights_2_ce0;
input  [7:0] weights_2_q0;
output  [0:0] weights_3_address0;
output   weights_3_ce0;
input  [7:0] weights_3_q0;
output  [0:0] weights_4_address0;
output   weights_4_ce0;
input  [7:0] weights_4_q0;
output  [7:0] weightsT_0_4_load_out;
output   weightsT_0_4_load_out_ap_vld;
output  [7:0] weightsT_1_3_load_out;
output   weightsT_1_3_load_out_ap_vld;
output  [7:0] weightsT_0_3_load_out;
output   weightsT_0_3_load_out_ap_vld;
output  [7:0] weightsT_1_2_load_out;
output   weightsT_1_2_load_out_ap_vld;
output  [7:0] weightsT_0_2_load_out;
output   weightsT_0_2_load_out_ap_vld;
output  [7:0] weightsT_1_1_load_out;
output   weightsT_1_1_load_out_ap_vld;
output  [7:0] weightsT_0_1_load_out;
output   weightsT_0_1_load_out_ap_vld;
output  [7:0] weightsT_1_load_out;
output   weightsT_1_load_out_ap_vld;
output  [7:0] weightsT_0_load_out;
output   weightsT_0_load_out_ap_vld;

reg ap_idle;
reg weights_0_ce0;
reg weights_1_ce0;
reg weights_2_ce0;
reg weights_3_ce0;
reg weights_4_ce0;
reg weightsT_0_4_load_out_ap_vld;
reg weightsT_1_3_load_out_ap_vld;
reg weightsT_0_3_load_out_ap_vld;
reg weightsT_1_2_load_out_ap_vld;
reg weightsT_0_2_load_out_ap_vld;
reg weightsT_1_1_load_out_ap_vld;
reg weightsT_0_1_load_out_ap_vld;
reg weightsT_1_load_out_ap_vld;
reg weightsT_0_load_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln23_fu_254_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [0:0] trunc_ln23_fu_266_p1;
reg   [0:0] trunc_ln23_reg_565;
wire    ap_block_pp0_stage0_11001;
reg   [2:0] trunc_ln1_reg_578;
wire   [63:0] zext_ln23_fu_270_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] i_1_fu_78;
wire   [3:0] add_ln23_fu_260_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i;
reg   [7:0] weightsT_0_load_fu_82;
wire   [7:0] select_ln24_2_fu_424_p3;
reg   [7:0] weightsT_1_load_fu_86;
wire   [7:0] select_ln24_1_fu_417_p3;
reg   [7:0] weightsT_0_1_load_fu_90;
wire   [7:0] select_ln24_4_fu_394_p3;
reg   [7:0] weightsT_1_1_load_fu_94;
wire   [7:0] select_ln24_3_fu_387_p3;
reg   [7:0] weightsT_0_2_load_fu_98;
wire   [7:0] select_ln24_6_fu_364_p3;
reg   [7:0] weightsT_1_2_load_fu_102;
wire   [7:0] select_ln24_5_fu_357_p3;
reg   [7:0] weightsT_0_3_load_fu_106;
wire   [7:0] select_ln24_8_fu_334_p3;
reg   [7:0] weightsT_1_3_load_fu_110;
wire   [7:0] select_ln24_7_fu_327_p3;
reg   [7:0] weightsT_0_4_load_fu_114;
wire   [7:0] select_ln24_fu_444_p3;
wire    ap_block_pp0_stage0_01001;
wire   [7:0] weightsT_1_fu_294_p11;
wire   [7:0] weightsT_1_fu_294_p13;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [2:0] weightsT_1_fu_294_p1;
wire   [2:0] weightsT_1_fu_294_p3;
wire   [2:0] weightsT_1_fu_294_p5;
wire   [2:0] weightsT_1_fu_294_p7;
wire  signed [2:0] weightsT_1_fu_294_p9;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i_1_fu_78 = 4'd0;
#0 weightsT_0_load_fu_82 = 8'd0;
#0 weightsT_1_load_fu_86 = 8'd0;
#0 weightsT_0_1_load_fu_90 = 8'd0;
#0 weightsT_1_1_load_fu_94 = 8'd0;
#0 weightsT_0_2_load_fu_98 = 8'd0;
#0 weightsT_1_2_load_fu_102 = 8'd0;
#0 weightsT_0_3_load_fu_106 = 8'd0;
#0 weightsT_1_3_load_fu_110 = 8'd0;
#0 weightsT_0_4_load_fu_114 = 8'd0;
#0 ap_done_reg = 1'b0;
end

conv2D0_sparsemux_11_3_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 8 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 8 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
sparsemux_11_3_8_1_1_U35(
    .din0(weights_0_q0),
    .din1(weights_1_q0),
    .din2(weights_2_q0),
    .din3(weights_3_q0),
    .din4(weights_4_q0),
    .def(weightsT_1_fu_294_p11),
    .sel(trunc_ln1_reg_578),
    .dout(weightsT_1_fu_294_p13)
);

conv2D0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln23_fu_254_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_1_fu_78 <= add_ln23_fu_260_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_78 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln1_reg_578 <= {{ap_sig_allocacmp_i[3:1]}};
        trunc_ln23_reg_565 <= trunc_ln23_fu_266_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1_reg_578 == 3'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weightsT_0_1_load_fu_90 <= select_ln24_4_fu_394_p3;
        weightsT_1_1_load_fu_94 <= select_ln24_3_fu_387_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1_reg_578 == 3'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weightsT_0_2_load_fu_98 <= select_ln24_6_fu_364_p3;
        weightsT_1_2_load_fu_102 <= select_ln24_5_fu_357_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1_reg_578 == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weightsT_0_3_load_fu_106 <= select_ln24_8_fu_334_p3;
        weightsT_1_3_load_fu_110 <= select_ln24_7_fu_327_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~(trunc_ln1_reg_578 == 3'd3) & ~(trunc_ln1_reg_578 == 3'd2) & ~(trunc_ln1_reg_578 == 3'd1) & ~(trunc_ln1_reg_578 == 3'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weightsT_0_4_load_fu_114 <= select_ln24_fu_444_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1_reg_578 == 3'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weightsT_0_load_fu_82 <= select_ln24_2_fu_424_p3;
        weightsT_1_load_fu_86 <= select_ln24_1_fu_417_p3;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_254_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_78;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_254_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weightsT_0_1_load_out_ap_vld = 1'b1;
    end else begin
        weightsT_0_1_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_254_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weightsT_0_2_load_out_ap_vld = 1'b1;
    end else begin
        weightsT_0_2_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_254_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weightsT_0_3_load_out_ap_vld = 1'b1;
    end else begin
        weightsT_0_3_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_254_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weightsT_0_4_load_out_ap_vld = 1'b1;
    end else begin
        weightsT_0_4_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_254_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weightsT_0_load_out_ap_vld = 1'b1;
    end else begin
        weightsT_0_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_254_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weightsT_1_1_load_out_ap_vld = 1'b1;
    end else begin
        weightsT_1_1_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_254_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weightsT_1_2_load_out_ap_vld = 1'b1;
    end else begin
        weightsT_1_2_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_254_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weightsT_1_3_load_out_ap_vld = 1'b1;
    end else begin
        weightsT_1_3_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_254_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weightsT_1_load_out_ap_vld = 1'b1;
    end else begin
        weightsT_1_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_ce0 = 1'b1;
    end else begin
        weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_1_ce0 = 1'b1;
    end else begin
        weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_2_ce0 = 1'b1;
    end else begin
        weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_3_ce0 = 1'b1;
    end else begin
        weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_4_ce0 = 1'b1;
    end else begin
        weights_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_fu_260_p2 = (ap_sig_allocacmp_i + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln23_fu_254_p2 = ((ap_sig_allocacmp_i == 4'd9) ? 1'b1 : 1'b0);

assign select_ln24_1_fu_417_p3 = ((trunc_ln23_reg_565[0:0] == 1'b1) ? weightsT_1_fu_294_p13 : weightsT_1_load_fu_86);

assign select_ln24_2_fu_424_p3 = ((trunc_ln23_reg_565[0:0] == 1'b1) ? weightsT_0_load_fu_82 : weightsT_1_fu_294_p13);

assign select_ln24_3_fu_387_p3 = ((trunc_ln23_reg_565[0:0] == 1'b1) ? weightsT_1_fu_294_p13 : weightsT_1_1_load_fu_94);

assign select_ln24_4_fu_394_p3 = ((trunc_ln23_reg_565[0:0] == 1'b1) ? weightsT_0_1_load_fu_90 : weightsT_1_fu_294_p13);

assign select_ln24_5_fu_357_p3 = ((trunc_ln23_reg_565[0:0] == 1'b1) ? weightsT_1_fu_294_p13 : weightsT_1_2_load_fu_102);

assign select_ln24_6_fu_364_p3 = ((trunc_ln23_reg_565[0:0] == 1'b1) ? weightsT_0_2_load_fu_98 : weightsT_1_fu_294_p13);

assign select_ln24_7_fu_327_p3 = ((trunc_ln23_reg_565[0:0] == 1'b1) ? weightsT_1_fu_294_p13 : weightsT_1_3_load_fu_110);

assign select_ln24_8_fu_334_p3 = ((trunc_ln23_reg_565[0:0] == 1'b1) ? weightsT_0_3_load_fu_106 : weightsT_1_fu_294_p13);

assign select_ln24_fu_444_p3 = ((trunc_ln23_reg_565[0:0] == 1'b1) ? weightsT_0_4_load_fu_114 : weightsT_1_fu_294_p13);

assign trunc_ln23_fu_266_p1 = ap_sig_allocacmp_i[0:0];

assign weightsT_0_1_load_out = weightsT_0_1_load_fu_90;

assign weightsT_0_2_load_out = weightsT_0_2_load_fu_98;

assign weightsT_0_3_load_out = weightsT_0_3_load_fu_106;

assign weightsT_0_4_load_out = weightsT_0_4_load_fu_114;

assign weightsT_0_load_out = weightsT_0_load_fu_82;

assign weightsT_1_1_load_out = weightsT_1_1_load_fu_94;

assign weightsT_1_2_load_out = weightsT_1_2_load_fu_102;

assign weightsT_1_3_load_out = weightsT_1_3_load_fu_110;

assign weightsT_1_fu_294_p11 = 'bx;

assign weightsT_1_load_out = weightsT_1_load_fu_86;

assign weights_0_address0 = zext_ln23_fu_270_p1;

assign weights_1_address0 = zext_ln23_fu_270_p1;

assign weights_2_address0 = zext_ln23_fu_270_p1;

assign weights_3_address0 = zext_ln23_fu_270_p1;

assign weights_4_address0 = zext_ln23_fu_270_p1;

assign zext_ln23_fu_270_p1 = trunc_ln23_fu_266_p1;

endmodule //conv2D0_conv2D0_Pipeline_readweights
