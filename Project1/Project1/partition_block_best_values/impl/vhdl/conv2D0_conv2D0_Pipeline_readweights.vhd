-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2D0_conv2D0_Pipeline_readweights is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weights_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    weights_0_ce0 : OUT STD_LOGIC;
    weights_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    weights_1_ce0 : OUT STD_LOGIC;
    weights_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_2_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    weights_2_ce0 : OUT STD_LOGIC;
    weights_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_3_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    weights_3_ce0 : OUT STD_LOGIC;
    weights_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_4_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    weights_4_ce0 : OUT STD_LOGIC;
    weights_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_0_4_load_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_0_4_load_out_ap_vld : OUT STD_LOGIC;
    weightsT_1_3_load_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_1_3_load_out_ap_vld : OUT STD_LOGIC;
    weightsT_0_3_load_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_0_3_load_out_ap_vld : OUT STD_LOGIC;
    weightsT_1_2_load_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_1_2_load_out_ap_vld : OUT STD_LOGIC;
    weightsT_0_2_load_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_0_2_load_out_ap_vld : OUT STD_LOGIC;
    weightsT_1_1_load_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_1_1_load_out_ap_vld : OUT STD_LOGIC;
    weightsT_0_1_load_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_0_1_load_out_ap_vld : OUT STD_LOGIC;
    weightsT_1_load_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_1_load_out_ap_vld : OUT STD_LOGIC;
    weightsT_0_load_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_0_load_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of conv2D0_conv2D0_Pipeline_readweights is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln23_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal trunc_ln23_fu_266_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln23_reg_565 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln1_reg_578 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln23_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_1_fu_78 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln23_fu_260_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (3 downto 0);
    signal weightsT_0_load_fu_82 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln24_2_fu_424_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_1_load_fu_86 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln24_1_fu_417_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_0_1_load_fu_90 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln24_4_fu_394_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_1_1_load_fu_94 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln24_3_fu_387_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_0_2_load_fu_98 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln24_6_fu_364_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_1_2_load_fu_102 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln24_5_fu_357_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_0_3_load_fu_106 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln24_8_fu_334_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_1_3_load_fu_110 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln24_7_fu_327_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_0_4_load_fu_114 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln24_fu_444_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal weightsT_1_fu_294_p11 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_1_fu_294_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal weightsT_1_fu_294_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal weightsT_1_fu_294_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal weightsT_1_fu_294_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal weightsT_1_fu_294_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal weightsT_1_fu_294_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component conv2D0_sparsemux_11_3_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv2D0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_11_3_8_1_1_U35 : component conv2D0_sparsemux_11_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 8,
        CASE1 => "001",
        din1_WIDTH => 8,
        CASE2 => "010",
        din2_WIDTH => 8,
        CASE3 => "011",
        din3_WIDTH => 8,
        CASE4 => "100",
        din4_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weights_0_q0,
        din1 => weights_1_q0,
        din2 => weights_2_q0,
        din3 => weights_3_q0,
        din4 => weights_4_q0,
        def => weightsT_1_fu_294_p11,
        sel => trunc_ln1_reg_578,
        dout => weightsT_1_fu_294_p13);

    flow_control_loop_pipe_sequential_init_U : component conv2D0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln23_fu_254_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_1_fu_78 <= add_ln23_fu_260_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_78 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln1_reg_578 <= ap_sig_allocacmp_i(3 downto 1);
                trunc_ln23_reg_565 <= trunc_ln23_fu_266_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln1_reg_578 = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                weightsT_0_1_load_fu_90 <= select_ln24_4_fu_394_p3;
                weightsT_1_1_load_fu_94 <= select_ln24_3_fu_387_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln1_reg_578 = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                weightsT_0_2_load_fu_98 <= select_ln24_6_fu_364_p3;
                weightsT_1_2_load_fu_102 <= select_ln24_5_fu_357_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln1_reg_578 = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                weightsT_0_3_load_fu_106 <= select_ln24_8_fu_334_p3;
                weightsT_1_3_load_fu_110 <= select_ln24_7_fu_327_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((trunc_ln1_reg_578 = ap_const_lv3_3)) and not((trunc_ln1_reg_578 = ap_const_lv3_2)) and not((trunc_ln1_reg_578 = ap_const_lv3_1)) and not((trunc_ln1_reg_578 = ap_const_lv3_0)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                weightsT_0_4_load_fu_114 <= select_ln24_fu_444_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln1_reg_578 = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                weightsT_0_load_fu_82 <= select_ln24_2_fu_424_p3;
                weightsT_1_load_fu_86 <= select_ln24_1_fu_417_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln23_fu_260_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln23_fu_254_p2)
    begin
        if (((icmp_ln23_fu_254_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_1_fu_78, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i <= i_1_fu_78;
        end if; 
    end process;

    icmp_ln23_fu_254_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv4_9) else "0";
    select_ln24_1_fu_417_p3 <= 
        weightsT_1_fu_294_p13 when (trunc_ln23_reg_565(0) = '1') else 
        weightsT_1_load_fu_86;
    select_ln24_2_fu_424_p3 <= 
        weightsT_0_load_fu_82 when (trunc_ln23_reg_565(0) = '1') else 
        weightsT_1_fu_294_p13;
    select_ln24_3_fu_387_p3 <= 
        weightsT_1_fu_294_p13 when (trunc_ln23_reg_565(0) = '1') else 
        weightsT_1_1_load_fu_94;
    select_ln24_4_fu_394_p3 <= 
        weightsT_0_1_load_fu_90 when (trunc_ln23_reg_565(0) = '1') else 
        weightsT_1_fu_294_p13;
    select_ln24_5_fu_357_p3 <= 
        weightsT_1_fu_294_p13 when (trunc_ln23_reg_565(0) = '1') else 
        weightsT_1_2_load_fu_102;
    select_ln24_6_fu_364_p3 <= 
        weightsT_0_2_load_fu_98 when (trunc_ln23_reg_565(0) = '1') else 
        weightsT_1_fu_294_p13;
    select_ln24_7_fu_327_p3 <= 
        weightsT_1_fu_294_p13 when (trunc_ln23_reg_565(0) = '1') else 
        weightsT_1_3_load_fu_110;
    select_ln24_8_fu_334_p3 <= 
        weightsT_0_3_load_fu_106 when (trunc_ln23_reg_565(0) = '1') else 
        weightsT_1_fu_294_p13;
    select_ln24_fu_444_p3 <= 
        weightsT_0_4_load_fu_114 when (trunc_ln23_reg_565(0) = '1') else 
        weightsT_1_fu_294_p13;
    trunc_ln23_fu_266_p1 <= ap_sig_allocacmp_i(1 - 1 downto 0);
    weightsT_0_1_load_out <= weightsT_0_1_load_fu_90;

    weightsT_0_1_load_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln23_fu_254_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln23_fu_254_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weightsT_0_1_load_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_0_1_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_0_2_load_out <= weightsT_0_2_load_fu_98;

    weightsT_0_2_load_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln23_fu_254_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln23_fu_254_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weightsT_0_2_load_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_0_2_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_0_3_load_out <= weightsT_0_3_load_fu_106;

    weightsT_0_3_load_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln23_fu_254_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln23_fu_254_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weightsT_0_3_load_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_0_3_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_0_4_load_out <= weightsT_0_4_load_fu_114;

    weightsT_0_4_load_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln23_fu_254_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln23_fu_254_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weightsT_0_4_load_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_0_4_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_0_load_out <= weightsT_0_load_fu_82;

    weightsT_0_load_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln23_fu_254_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln23_fu_254_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weightsT_0_load_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_0_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_1_1_load_out <= weightsT_1_1_load_fu_94;

    weightsT_1_1_load_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln23_fu_254_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln23_fu_254_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weightsT_1_1_load_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_1_1_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_1_2_load_out <= weightsT_1_2_load_fu_102;

    weightsT_1_2_load_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln23_fu_254_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln23_fu_254_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weightsT_1_2_load_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_1_2_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_1_3_load_out <= weightsT_1_3_load_fu_110;

    weightsT_1_3_load_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln23_fu_254_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln23_fu_254_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weightsT_1_3_load_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_1_3_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_1_fu_294_p11 <= "XXXXXXXX";
    weightsT_1_load_out <= weightsT_1_load_fu_86;

    weightsT_1_load_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln23_fu_254_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln23_fu_254_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weightsT_1_load_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_1_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weights_0_address0 <= zext_ln23_fu_270_p1(1 - 1 downto 0);

    weights_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weights_0_ce0 <= ap_const_logic_1;
        else 
            weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_1_address0 <= zext_ln23_fu_270_p1(1 - 1 downto 0);

    weights_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weights_1_ce0 <= ap_const_logic_1;
        else 
            weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_2_address0 <= zext_ln23_fu_270_p1(1 - 1 downto 0);

    weights_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weights_2_ce0 <= ap_const_logic_1;
        else 
            weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_3_address0 <= zext_ln23_fu_270_p1(1 - 1 downto 0);

    weights_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weights_3_ce0 <= ap_const_logic_1;
        else 
            weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_4_address0 <= zext_ln23_fu_270_p1(1 - 1 downto 0);

    weights_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weights_4_ce0 <= ap_const_logic_1;
        else 
            weights_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln23_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln23_fu_266_p1),64));
end behav;
