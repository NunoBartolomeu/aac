-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2D0_conv2D0_Pipeline_loop_orow_loop_ocol is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_inT_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_1_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_4_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_5_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_2_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_3_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_6_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_1_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_7_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_2_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_8_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_9_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_3_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_10_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_4_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_11_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_5_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_12_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_13_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_6_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_14_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_7_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_15_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_8_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    img_outT_3_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_outT_3_out_ap_vld : OUT STD_LOGIC;
    img_outT_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_outT_2_out_ap_vld : OUT STD_LOGIC;
    img_outT_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_outT_1_out_ap_vld : OUT STD_LOGIC;
    img_outT_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_outT_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of conv2D0_conv2D0_Pipeline_loop_orow_loop_ocol is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln26_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln26_reg_1076 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1076_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1076_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1076_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_434_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_1080 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln32_fu_438_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln32_reg_1088 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln32_fu_442_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln32_reg_1097 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_456_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_498_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_542_p11 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln_fu_566_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln_reg_1117 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln_reg_1117_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln_reg_1117_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln_reg_1117_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln_reg_1117_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal img_outT_5_fu_628_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_outT_5_reg_1121 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln33_1_fu_661_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln33_1_reg_1126 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_689_p11 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_726_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_761_p11 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_1141 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln33_5_fu_811_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln33_5_reg_1146 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln33_4_fu_816_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln33_4_reg_1151 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_876_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_reg_1156 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_reg_1156_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_869_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_11_reg_1161 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_883_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_898_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_6_reg_1171 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_14_fu_820_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln33_14_fu_820_p2 : signal is "no";
    signal add_ln33_14_reg_1176 : STD_LOGIC_VECTOR (7 downto 0);
    signal ocol_fu_164 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_ocol_load : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal orow_fu_168 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal select_ln26_fu_426_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_orow_load : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_fu_172 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln26_fu_394_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (2 downto 0);
    signal img_outT_fu_176 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal acc_1_fu_828_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_outT_1_fu_180 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_outT_2_fu_184 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_outT_3_fu_188 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln27_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_1_fu_420_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln14_fu_412_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_456_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_456_p14 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_498_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_498_p14 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_542_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_542_p10 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_589_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_608_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_608_p10 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_608_p11 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_641_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_641_p10 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_641_p11 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln32_fu_596_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln32_1_fu_666_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_672_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_689_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_689_p10 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_709_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_726_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_726_p14 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_761_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_761_p10 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_791_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_791_p10 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_791_p11 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_14_fu_820_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_890_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_10_fu_824_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln33_10_fu_824_p2 : signal is "no";
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal tmp_2_fu_456_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_456_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_456_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_456_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_456_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_456_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_498_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_498_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_498_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_498_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_498_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_498_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_542_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_542_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_542_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_542_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_608_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_608_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_608_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_608_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_641_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_641_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_641_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_641_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_689_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_689_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_689_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_689_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_726_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_726_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_726_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_726_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_726_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_726_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_761_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_761_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_761_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_761_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_791_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_791_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_791_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_791_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component conv2D0_sparsemux_13_3_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv2D0_sparsemux_13_4_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv2D0_sparsemux_9_4_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv2D0_sparsemux_9_3_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv2D0_mul_8s_8s_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv2D0_mac_muladd_8s_8s_8ns_8_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv2D0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_13_3_8_1_1_U55 : component conv2D0_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "001",
        din0_WIDTH => 8,
        CASE1 => "010",
        din1_WIDTH => 8,
        CASE2 => "011",
        din2_WIDTH => 8,
        CASE3 => "100",
        din3_WIDTH => 8,
        CASE4 => "101",
        din4_WIDTH => 8,
        CASE5 => "110",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => img_inT_1_reload,
        din1 => img_inT_2_reload,
        din2 => img_inT_3_reload,
        din3 => img_inT_4_reload,
        din4 => img_inT_5_reload,
        din5 => img_inT_6_reload,
        def => tmp_2_fu_456_p13,
        sel => tmp_2_fu_456_p14,
        dout => tmp_2_fu_456_p15);

    sparsemux_13_4_8_1_1_U56 : component conv2D0_sparsemux_13_4_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "1001",
        din0_WIDTH => 8,
        CASE1 => "1010",
        din1_WIDTH => 8,
        CASE2 => "1011",
        din2_WIDTH => 8,
        CASE3 => "1100",
        din3_WIDTH => 8,
        CASE4 => "1101",
        din4_WIDTH => 8,
        CASE5 => "1110",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => img_inT_9_reload,
        din1 => img_inT_10_reload,
        din2 => img_inT_11_reload,
        din3 => img_inT_12_reload,
        din4 => img_inT_13_reload,
        din5 => img_inT_14_reload,
        def => tmp_8_fu_498_p13,
        sel => tmp_8_fu_498_p14,
        dout => tmp_8_fu_498_p15);

    sparsemux_9_4_8_1_1_U57 : component conv2D0_sparsemux_9_4_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "1010",
        din0_WIDTH => 8,
        CASE1 => "1011",
        din1_WIDTH => 8,
        CASE2 => "1110",
        din2_WIDTH => 8,
        CASE3 => "1111",
        din3_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => img_inT_10_reload,
        din1 => img_inT_11_reload,
        din2 => img_inT_14_reload,
        din3 => img_inT_15_reload,
        def => tmp_9_fu_542_p9,
        sel => tmp_9_fu_542_p10,
        dout => tmp_9_fu_542_p11);

    sparsemux_9_3_8_1_1_U58 : component conv2D0_sparsemux_9_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 8,
        CASE1 => "001",
        din1_WIDTH => 8,
        CASE2 => "100",
        din2_WIDTH => 8,
        CASE3 => "101",
        din3_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => img_inT_reload,
        din1 => img_inT_1_reload,
        din2 => img_inT_4_reload,
        din3 => img_inT_5_reload,
        def => tmp_1_fu_608_p9,
        sel => tmp_1_fu_608_p10,
        dout => tmp_1_fu_608_p11);

    mul_8s_8s_8_1_1_U59 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_1_fu_608_p11,
        din1 => weightsT_reload,
        dout => img_outT_5_fu_628_p2);

    sparsemux_9_3_8_1_1_U60 : component conv2D0_sparsemux_9_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "010",
        din0_WIDTH => 8,
        CASE1 => "011",
        din1_WIDTH => 8,
        CASE2 => "110",
        din2_WIDTH => 8,
        CASE3 => "111",
        din3_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => img_inT_2_reload,
        din1 => img_inT_3_reload,
        din2 => img_inT_6_reload,
        din3 => img_inT_7_reload,
        def => tmp_3_fu_641_p9,
        sel => tmp_3_fu_641_p10,
        dout => tmp_3_fu_641_p11);

    mul_8s_8s_8_1_1_U61 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_3_fu_641_p11,
        din1 => weightsT_2_reload,
        dout => mul_ln33_1_fu_661_p2);

    sparsemux_9_4_8_1_1_U62 : component conv2D0_sparsemux_9_4_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0100",
        din0_WIDTH => 8,
        CASE1 => "0101",
        din1_WIDTH => 8,
        CASE2 => "1000",
        din2_WIDTH => 8,
        CASE3 => "1001",
        din3_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => img_inT_4_reload,
        din1 => img_inT_5_reload,
        din2 => img_inT_8_reload,
        din3 => img_inT_9_reload,
        def => tmp_4_fu_689_p9,
        sel => tmp_4_fu_689_p10,
        dout => tmp_4_fu_689_p11);

    sparsemux_13_4_8_1_1_U63 : component conv2D0_sparsemux_13_4_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0101",
        din0_WIDTH => 8,
        CASE1 => "0110",
        din1_WIDTH => 8,
        CASE2 => "0111",
        din2_WIDTH => 8,
        CASE3 => "1000",
        din3_WIDTH => 8,
        CASE4 => "1001",
        din4_WIDTH => 8,
        CASE5 => "1010",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => img_inT_5_reload,
        din1 => img_inT_6_reload,
        din2 => img_inT_7_reload,
        din3 => img_inT_8_reload,
        din4 => img_inT_9_reload,
        din5 => img_inT_10_reload,
        def => tmp_5_fu_726_p13,
        sel => tmp_5_fu_726_p14,
        dout => tmp_5_fu_726_p15);

    sparsemux_9_4_8_1_1_U64 : component conv2D0_sparsemux_9_4_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0110",
        din0_WIDTH => 8,
        CASE1 => "0111",
        din1_WIDTH => 8,
        CASE2 => "1010",
        din2_WIDTH => 8,
        CASE3 => "1011",
        din3_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => img_inT_6_reload,
        din1 => img_inT_7_reload,
        din2 => img_inT_10_reload,
        din3 => img_inT_11_reload,
        def => tmp_6_fu_761_p9,
        sel => tmp_6_fu_761_p10,
        dout => tmp_6_fu_761_p11);

    sparsemux_9_4_8_1_1_U65 : component conv2D0_sparsemux_9_4_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "1000",
        din0_WIDTH => 8,
        CASE1 => "1001",
        din1_WIDTH => 8,
        CASE2 => "1100",
        din2_WIDTH => 8,
        CASE3 => "1101",
        din3_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => img_inT_8_reload,
        din1 => img_inT_9_reload,
        din2 => img_inT_12_reload,
        din3 => img_inT_13_reload,
        def => tmp_7_fu_791_p9,
        sel => tmp_7_fu_791_p10,
        dout => tmp_7_fu_791_p11);

    mul_8s_8s_8_1_1_U66 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_7_fu_791_p11,
        din1 => weightsT_6_reload,
        dout => mul_ln33_5_fu_811_p2);

    mul_8s_8s_8_1_1_U67 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_6_reg_1141,
        din1 => weightsT_5_reload,
        dout => mul_ln33_4_fu_816_p2);

    mac_muladd_8s_8s_8ns_8_4_1_U68 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_fu_456_p15,
        din1 => weightsT_1_reload,
        din2 => img_outT_5_reg_1121,
        ce => ap_const_logic_1,
        dout => grp_fu_869_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U69 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_8_fu_498_p15,
        din1 => weightsT_7_reload,
        din2 => mul_ln33_5_reg_1146,
        ce => ap_const_logic_1,
        dout => grp_fu_876_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U70 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_9_fu_542_p11,
        din1 => weightsT_8_reload,
        din2 => mul_ln33_1_reg_1126,
        ce => ap_const_logic_1,
        dout => grp_fu_883_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U71 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_fu_689_p11,
        din1 => weightsT_3_reload,
        din2 => grp_fu_883_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_890_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U72 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_5_fu_726_p15,
        din1 => weightsT_4_reload,
        din2 => mul_ln33_4_reg_1151,
        ce => ap_const_logic_1,
        dout => grp_fu_898_p3);

    flow_control_loop_pipe_sequential_init_U : component conv2D0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln26_fu_388_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_172 <= add_ln26_fu_394_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_172 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    ocol_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln26_fu_388_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    ocol_fu_164 <= add_ln32_fu_442_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    ocol_fu_164 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    orow_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln26_fu_388_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    orow_fu_168 <= select_ln26_fu_426_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    orow_fu_168 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln32_reg_1097 <= add_ln32_fu_442_p2;
                add_ln_reg_1117 <= add_ln_fu_566_p3;
                add_ln_reg_1117_pp0_iter1_reg <= add_ln_reg_1117;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_reg_1080 <= empty_fu_434_p1;
                icmp_ln26_reg_1076 <= icmp_ln26_fu_388_p2;
                icmp_ln26_reg_1076_pp0_iter1_reg <= icmp_ln26_reg_1076;
                img_outT_5_reg_1121 <= img_outT_5_fu_628_p2;
                mul_ln33_1_reg_1126 <= mul_ln33_1_fu_661_p2;
                mul_ln33_5_reg_1146 <= mul_ln33_5_fu_811_p2;
                tmp_6_reg_1141 <= tmp_6_fu_761_p11;
                trunc_ln32_reg_1088 <= trunc_ln32_fu_438_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                add_ln33_11_reg_1161 <= grp_fu_869_p3;
                add_ln33_reg_1156 <= grp_fu_876_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln33_14_reg_1176 <= add_ln33_14_fu_820_p2;
                add_ln33_reg_1156_pp0_iter4_reg <= add_ln33_reg_1156;
                add_ln_reg_1117_pp0_iter2_reg <= add_ln_reg_1117_pp0_iter1_reg;
                add_ln_reg_1117_pp0_iter3_reg <= add_ln_reg_1117_pp0_iter2_reg;
                add_ln_reg_1117_pp0_iter4_reg <= add_ln_reg_1117_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                icmp_ln26_reg_1076_pp0_iter2_reg <= icmp_ln26_reg_1076_pp0_iter1_reg;
                icmp_ln26_reg_1076_pp0_iter3_reg <= icmp_ln26_reg_1076_pp0_iter2_reg;
                mul_ln33_4_reg_1151 <= mul_ln33_4_fu_816_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                add_ln33_6_reg_1171 <= grp_fu_898_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_lv2_1 = add_ln_reg_1117_pp0_iter4_reg))) then
                img_outT_1_fu_180 <= acc_1_fu_828_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_lv2_2 = add_ln_reg_1117_pp0_iter4_reg))) then
                img_outT_2_fu_184 <= acc_1_fu_828_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_lv2_3 = add_ln_reg_1117_pp0_iter4_reg))) then
                img_outT_3_fu_188 <= acc_1_fu_828_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_lv2_0 = add_ln_reg_1117_pp0_iter4_reg))) then
                img_outT_fu_176 <= acc_1_fu_828_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    acc_1_fu_828_p2 <= std_logic_vector(unsigned(add_ln33_14_reg_1176) + unsigned(add_ln33_10_fu_824_p2));
    add_ln26_1_fu_420_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_orow_load) + unsigned(ap_const_lv2_1));
    add_ln26_fu_394_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv3_1));
    add_ln32_1_fu_666_p2 <= std_logic_vector(unsigned(zext_ln32_fu_596_p1) + unsigned(ap_const_lv4_4));
    add_ln32_fu_442_p2 <= std_logic_vector(unsigned(select_ln14_fu_412_p3) + unsigned(ap_const_lv2_1));
    add_ln33_10_fu_824_p2 <= std_logic_vector(signed(add_ln33_6_reg_1171) + signed(add_ln33_reg_1156_pp0_iter4_reg));
    add_ln33_14_fu_820_p0 <= grp_fu_890_p3;
    add_ln33_14_fu_820_p2 <= std_logic_vector(signed(add_ln33_14_fu_820_p0) + signed(add_ln33_11_reg_1161));
    add_ln_fu_566_p3 <= (empty_fu_434_p1 & trunc_ln32_fu_438_p1);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln26_fu_388_p2)
    begin
        if (((icmp_ln26_fu_388_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, indvar_flatten_fu_172)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_172;
        end if; 
    end process;


    ap_sig_allocacmp_ocol_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ocol_fu_164, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_ocol_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_ocol_load <= ocol_fu_164;
        end if; 
    end process;


    ap_sig_allocacmp_orow_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, orow_fu_168)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_orow_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_orow_load <= orow_fu_168;
        end if; 
    end process;

    empty_fu_434_p1 <= select_ln26_fu_426_p3(1 - 1 downto 0);
    icmp_ln26_fu_388_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv3_4) else "0";
    icmp_ln27_fu_406_p2 <= "1" when (ap_sig_allocacmp_ocol_load = ap_const_lv2_2) else "0";
    img_outT_1_out <= img_outT_1_fu_180;

    img_outT_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln26_reg_1076_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_reg_1076_pp0_iter3_reg = ap_const_lv1_1))) then 
            img_outT_1_out_ap_vld <= ap_const_logic_1;
        else 
            img_outT_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_outT_2_out <= img_outT_2_fu_184;

    img_outT_2_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln26_reg_1076_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_reg_1076_pp0_iter3_reg = ap_const_lv1_1))) then 
            img_outT_2_out_ap_vld <= ap_const_logic_1;
        else 
            img_outT_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_outT_3_out <= img_outT_3_fu_188;

    img_outT_3_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln26_reg_1076_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_reg_1076_pp0_iter3_reg = ap_const_lv1_1))) then 
            img_outT_3_out_ap_vld <= ap_const_logic_1;
        else 
            img_outT_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_outT_out <= img_outT_fu_176;

    img_outT_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln26_reg_1076_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_reg_1076_pp0_iter3_reg = ap_const_lv1_1))) then 
            img_outT_out_ap_vld <= ap_const_logic_1;
        else 
            img_outT_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln14_fu_412_p3 <= 
        ap_const_lv2_0 when (icmp_ln27_fu_406_p2(0) = '1') else 
        ap_sig_allocacmp_ocol_load;
    select_ln26_fu_426_p3 <= 
        add_ln26_1_fu_420_p2 when (icmp_ln27_fu_406_p2(0) = '1') else 
        ap_sig_allocacmp_orow_load;
    shl_ln_fu_589_p3 <= (empty_reg_1080 & ap_const_lv2_0);
    tmp_10_fu_709_p4 <= add_ln32_1_fu_666_p2(3 downto 2);
    tmp_1_fu_608_p10 <= ((empty_reg_1080 & ap_const_lv1_0) & trunc_ln32_reg_1088);
    tmp_1_fu_608_p9 <= "XXXXXXXX";
    tmp_2_fu_456_p13 <= "XXXXXXXX";
    tmp_2_fu_456_p14 <= (empty_fu_434_p1 & add_ln32_fu_442_p2);
    tmp_3_fu_641_p10 <= ((empty_reg_1080 & ap_const_lv1_1) & trunc_ln32_reg_1088);
    tmp_3_fu_641_p9 <= "XXXXXXXX";
    tmp_4_fu_689_p10 <= (tmp_s_fu_672_p4 & trunc_ln32_reg_1088);
    tmp_4_fu_689_p9 <= "XXXXXXXX";
    tmp_5_fu_726_p13 <= "XXXXXXXX";
    tmp_5_fu_726_p14 <= (tmp_10_fu_709_p4 & add_ln32_reg_1097);
    tmp_6_fu_761_p10 <= ((tmp_10_fu_709_p4 & ap_const_lv1_1) & trunc_ln32_reg_1088);
    tmp_6_fu_761_p9 <= "XXXXXXXX";
    tmp_7_fu_791_p10 <= (((ap_const_lv1_1 & empty_reg_1080) & ap_const_lv1_0) & trunc_ln32_reg_1088);
    tmp_7_fu_791_p9 <= "XXXXXXXX";
    tmp_8_fu_498_p13 <= "XXXXXXXX";
    tmp_8_fu_498_p14 <= ((ap_const_lv1_1 & empty_fu_434_p1) & add_ln32_fu_442_p2);
    tmp_9_fu_542_p10 <= (((ap_const_lv1_1 & empty_fu_434_p1) & ap_const_lv1_1) & trunc_ln32_fu_438_p1);
    tmp_9_fu_542_p9 <= "XXXXXXXX";
    tmp_s_fu_672_p4 <= add_ln32_1_fu_666_p2(3 downto 1);
    trunc_ln32_fu_438_p1 <= select_ln14_fu_412_p3(1 - 1 downto 0);
    zext_ln32_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_589_p3),4));
end behav;
