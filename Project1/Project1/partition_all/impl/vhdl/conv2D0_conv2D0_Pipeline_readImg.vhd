-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2D0_conv2D0_Pipeline_readImg is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_in_0_load : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_1_load : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_2_load : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_3_load : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_4_load : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_5_load : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_6_load : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_7_load : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_8_load : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_9_load : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_10_load : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_11_load : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_12_load : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_13_load : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_14_load : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_15_load : IN STD_LOGIC_VECTOR (7 downto 0);
    img_inT_15_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_15_out_ap_vld : OUT STD_LOGIC;
    img_inT_14_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_14_out_ap_vld : OUT STD_LOGIC;
    img_inT_13_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_13_out_ap_vld : OUT STD_LOGIC;
    img_inT_12_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_12_out_ap_vld : OUT STD_LOGIC;
    img_inT_11_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_11_out_ap_vld : OUT STD_LOGIC;
    img_inT_10_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_10_out_ap_vld : OUT STD_LOGIC;
    img_inT_9_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_9_out_ap_vld : OUT STD_LOGIC;
    img_inT_8_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_8_out_ap_vld : OUT STD_LOGIC;
    img_inT_7_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_7_out_ap_vld : OUT STD_LOGIC;
    img_inT_6_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_6_out_ap_vld : OUT STD_LOGIC;
    img_inT_5_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_5_out_ap_vld : OUT STD_LOGIC;
    img_inT_4_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_4_out_ap_vld : OUT STD_LOGIC;
    img_inT_3_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_3_out_ap_vld : OUT STD_LOGIC;
    img_inT_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_2_out_ap_vld : OUT STD_LOGIC;
    img_inT_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_1_out_ap_vld : OUT STD_LOGIC;
    img_inT_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_inT_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of conv2D0_conv2D0_Pipeline_readImg is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln21_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_fu_128 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln21_fu_418_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (4 downto 0);
    signal img_inT_fu_132 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_16_fu_428_p35 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln21_fu_424_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal img_inT_1_fu_136 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_2_fu_140 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_3_fu_144 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_4_fu_148 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_5_fu_152 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_6_fu_156 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_7_fu_160 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_8_fu_164 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_9_fu_168 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_10_fu_172 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_11_fu_176 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_12_fu_180 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_13_fu_184 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_14_fu_188 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_15_fu_192 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal img_inT_16_fu_428_p33 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_inT_16_fu_428_p34 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal img_inT_16_fu_428_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal img_inT_16_fu_428_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal img_inT_16_fu_428_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal img_inT_16_fu_428_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal img_inT_16_fu_428_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal img_inT_16_fu_428_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal img_inT_16_fu_428_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal img_inT_16_fu_428_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal img_inT_16_fu_428_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal img_inT_16_fu_428_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal img_inT_16_fu_428_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal img_inT_16_fu_428_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal img_inT_16_fu_428_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal img_inT_16_fu_428_p27 : STD_LOGIC_VECTOR (3 downto 0);
    signal img_inT_16_fu_428_p29 : STD_LOGIC_VECTOR (3 downto 0);
    signal img_inT_16_fu_428_p31 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component conv2D0_sparsemux_33_4_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (3 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (3 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (3 downto 0);
        din15_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv2D0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_33_4_8_1_1_U1 : component conv2D0_sparsemux_33_4_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 8,
        CASE1 => "0001",
        din1_WIDTH => 8,
        CASE2 => "0010",
        din2_WIDTH => 8,
        CASE3 => "0011",
        din3_WIDTH => 8,
        CASE4 => "0100",
        din4_WIDTH => 8,
        CASE5 => "0101",
        din5_WIDTH => 8,
        CASE6 => "0110",
        din6_WIDTH => 8,
        CASE7 => "0111",
        din7_WIDTH => 8,
        CASE8 => "1000",
        din8_WIDTH => 8,
        CASE9 => "1001",
        din9_WIDTH => 8,
        CASE10 => "1010",
        din10_WIDTH => 8,
        CASE11 => "1011",
        din11_WIDTH => 8,
        CASE12 => "1100",
        din12_WIDTH => 8,
        CASE13 => "1101",
        din13_WIDTH => 8,
        CASE14 => "1110",
        din14_WIDTH => 8,
        CASE15 => "1111",
        din15_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => img_in_0_load,
        din1 => img_in_1_load,
        din2 => img_in_2_load,
        din3 => img_in_3_load,
        din4 => img_in_4_load,
        din5 => img_in_5_load,
        din6 => img_in_6_load,
        din7 => img_in_7_load,
        din8 => img_in_8_load,
        din9 => img_in_9_load,
        din10 => img_in_10_load,
        din11 => img_in_11_load,
        din12 => img_in_12_load,
        din13 => img_in_13_load,
        din14 => img_in_14_load,
        din15 => img_in_15_load,
        def => img_inT_16_fu_428_p33,
        sel => img_inT_16_fu_428_p34,
        dout => img_inT_16_fu_428_p35);

    flow_control_loop_pipe_sequential_init_U : component conv2D0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln21_fu_412_p2 = ap_const_lv1_0)) then 
                    i_fu_128 <= add_ln21_fu_418_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_128 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln21_fu_424_p1 = ap_const_lv4_A) and (icmp_ln21_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                img_inT_10_fu_172 <= img_inT_16_fu_428_p35;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln21_fu_424_p1 = ap_const_lv4_B) and (icmp_ln21_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                img_inT_11_fu_176 <= img_inT_16_fu_428_p35;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln21_fu_424_p1 = ap_const_lv4_C) and (icmp_ln21_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                img_inT_12_fu_180 <= img_inT_16_fu_428_p35;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln21_fu_424_p1 = ap_const_lv4_D) and (icmp_ln21_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                img_inT_13_fu_184 <= img_inT_16_fu_428_p35;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln21_fu_424_p1 = ap_const_lv4_E) and (icmp_ln21_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                img_inT_14_fu_188 <= img_inT_16_fu_428_p35;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln21_fu_424_p1 = ap_const_lv4_F) and (icmp_ln21_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                img_inT_15_fu_192 <= img_inT_16_fu_428_p35;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln21_fu_424_p1 = ap_const_lv4_1) and (icmp_ln21_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                img_inT_1_fu_136 <= img_inT_16_fu_428_p35;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln21_fu_424_p1 = ap_const_lv4_2) and (icmp_ln21_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                img_inT_2_fu_140 <= img_inT_16_fu_428_p35;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln21_fu_424_p1 = ap_const_lv4_3) and (icmp_ln21_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                img_inT_3_fu_144 <= img_inT_16_fu_428_p35;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln21_fu_424_p1 = ap_const_lv4_4) and (icmp_ln21_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                img_inT_4_fu_148 <= img_inT_16_fu_428_p35;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln21_fu_424_p1 = ap_const_lv4_5) and (icmp_ln21_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                img_inT_5_fu_152 <= img_inT_16_fu_428_p35;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln21_fu_424_p1 = ap_const_lv4_6) and (icmp_ln21_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                img_inT_6_fu_156 <= img_inT_16_fu_428_p35;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln21_fu_424_p1 = ap_const_lv4_7) and (icmp_ln21_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                img_inT_7_fu_160 <= img_inT_16_fu_428_p35;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln21_fu_424_p1 = ap_const_lv4_8) and (icmp_ln21_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                img_inT_8_fu_164 <= img_inT_16_fu_428_p35;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln21_fu_424_p1 = ap_const_lv4_9) and (icmp_ln21_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                img_inT_9_fu_168 <= img_inT_16_fu_428_p35;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln21_fu_424_p1 = ap_const_lv4_0) and (icmp_ln21_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                img_inT_fu_132 <= img_inT_16_fu_428_p35;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln21_fu_418_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln21_fu_412_p2)
    begin
        if (((icmp_ln21_fu_412_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_state1, i_fu_128, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_128;
        end if; 
    end process;

    icmp_ln21_fu_412_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv5_10) else "0";
    img_inT_10_out <= img_inT_10_fu_172;

    img_inT_10_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln21_fu_412_p2)
    begin
        if (((icmp_ln21_fu_412_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_inT_10_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_10_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_11_out <= img_inT_11_fu_176;

    img_inT_11_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln21_fu_412_p2)
    begin
        if (((icmp_ln21_fu_412_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_inT_11_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_12_out <= img_inT_12_fu_180;

    img_inT_12_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln21_fu_412_p2)
    begin
        if (((icmp_ln21_fu_412_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_inT_12_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_12_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_13_out <= img_inT_13_fu_184;

    img_inT_13_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln21_fu_412_p2)
    begin
        if (((icmp_ln21_fu_412_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_inT_13_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_13_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_14_out <= img_inT_14_fu_188;

    img_inT_14_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln21_fu_412_p2)
    begin
        if (((icmp_ln21_fu_412_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_inT_14_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_14_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_15_out <= img_inT_15_fu_192;

    img_inT_15_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln21_fu_412_p2)
    begin
        if (((icmp_ln21_fu_412_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_inT_15_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_15_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_16_fu_428_p33 <= "XXXXXXXX";
    img_inT_16_fu_428_p34 <= ap_sig_allocacmp_i_2(4 - 1 downto 0);
    img_inT_1_out <= img_inT_1_fu_136;

    img_inT_1_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln21_fu_412_p2)
    begin
        if (((icmp_ln21_fu_412_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_inT_1_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_2_out <= img_inT_2_fu_140;

    img_inT_2_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln21_fu_412_p2)
    begin
        if (((icmp_ln21_fu_412_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_inT_2_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_3_out <= img_inT_3_fu_144;

    img_inT_3_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln21_fu_412_p2)
    begin
        if (((icmp_ln21_fu_412_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_inT_3_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_4_out <= img_inT_4_fu_148;

    img_inT_4_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln21_fu_412_p2)
    begin
        if (((icmp_ln21_fu_412_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_inT_4_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_5_out <= img_inT_5_fu_152;

    img_inT_5_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln21_fu_412_p2)
    begin
        if (((icmp_ln21_fu_412_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_inT_5_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_6_out <= img_inT_6_fu_156;

    img_inT_6_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln21_fu_412_p2)
    begin
        if (((icmp_ln21_fu_412_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_inT_6_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_7_out <= img_inT_7_fu_160;

    img_inT_7_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln21_fu_412_p2)
    begin
        if (((icmp_ln21_fu_412_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_inT_7_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_8_out <= img_inT_8_fu_164;

    img_inT_8_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln21_fu_412_p2)
    begin
        if (((icmp_ln21_fu_412_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_inT_8_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_9_out <= img_inT_9_fu_168;

    img_inT_9_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln21_fu_412_p2)
    begin
        if (((icmp_ln21_fu_412_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_inT_9_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_9_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_inT_out <= img_inT_fu_132;

    img_inT_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln21_fu_412_p2)
    begin
        if (((icmp_ln21_fu_412_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_inT_out_ap_vld <= ap_const_logic_1;
        else 
            img_inT_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln21_fu_424_p1 <= ap_sig_allocacmp_i_2(4 - 1 downto 0);
end behav;
