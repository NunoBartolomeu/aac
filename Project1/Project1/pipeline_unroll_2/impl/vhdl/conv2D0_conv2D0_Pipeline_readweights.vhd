-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2D0_conv2D0_Pipeline_readweights is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weights_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weights_ce0 : OUT STD_LOGIC;
    weights_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weights_ce1 : OUT STD_LOGIC;
    weights_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    weightsT_8_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_8_out_ap_vld : OUT STD_LOGIC;
    weightsT_7_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_7_out_ap_vld : OUT STD_LOGIC;
    weightsT_6_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_6_out_ap_vld : OUT STD_LOGIC;
    weightsT_5_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_5_out_ap_vld : OUT STD_LOGIC;
    weightsT_4_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_4_out_ap_vld : OUT STD_LOGIC;
    weightsT_3_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_3_out_ap_vld : OUT STD_LOGIC;
    weightsT_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_2_out_ap_vld : OUT STD_LOGIC;
    weightsT_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_1_out_ap_vld : OUT STD_LOGIC;
    weightsT_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_out_ap_vld : OUT STD_LOGIC;
    weightsT_14_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_14_out_ap_vld : OUT STD_LOGIC;
    weightsT_13_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_13_out_ap_vld : OUT STD_LOGIC;
    weightsT_12_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_12_out_ap_vld : OUT STD_LOGIC;
    weightsT_11_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_11_out_ap_vld : OUT STD_LOGIC;
    weightsT_10_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    weightsT_10_out_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of conv2D0_conv2D0_Pipeline_readweights is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_528 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln16_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_532 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln16_1_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_1_reg_541 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_550 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_1_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_1_reg_556 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_2_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_2_reg_562 : STD_LOGIC_VECTOR (0 downto 0);
    signal weightsT_10_reg_568 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal weightsT_11_reg_573 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_12_reg_578 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_13_reg_583 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_14_reg_588 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_predicate_tran3to4_state2 : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_phi_mux_UnifiedRetVal_phi_fu_239_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal UnifiedRetVal_reg_235 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln16_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln16_1_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_fu_72 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln16_fu_317_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal weightsT_1_fu_76 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_25_fu_411_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_3_fu_80 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_24_fu_404_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_5_fu_84 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_23_fu_397_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_7_fu_88 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_22_fu_389_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsT_fu_92 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_2_fu_96 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_4_fu_100 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_6_fu_104 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal weightsT_8_fu_108 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal or_ln16_fu_282_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln19_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_1_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_exit_tran_regpp0 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_239_p4;
                end if; 
            end if;
        end if;
    end process;


    UnifiedRetVal_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                UnifiedRetVal_reg_235 <= ap_const_lv1_0;
            elsif (((icmp_ln16_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                UnifiedRetVal_reg_235 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    ap_exit_tran_regpp0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                if ((icmp_ln16_fu_271_p2 = ap_const_lv1_0)) then 
                    ap_exit_tran_regpp0(0) <= '1';
                elsif ((ap_predicate_tran3to4_state2 = ap_const_boolean_1)) then 
                    ap_exit_tran_regpp0(0) <= '0';
                end if;
            end if; 
        end if;
    end process;

    i_1_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_1_fu_72 <= ap_const_lv4_0;
            elsif (((icmp_ln16_1_fu_293_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln16_fu_271_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_1_fu_72 <= add_ln16_fu_317_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_528 <= i_1_fu_72;
                icmp_ln16_1_reg_541 <= icmp_ln16_1_fu_293_p2;
                icmp_ln19_1_reg_556 <= icmp_ln19_1_fu_305_p2;
                icmp_ln19_2_reg_562 <= icmp_ln19_2_fu_311_p2;
                icmp_ln19_reg_550 <= icmp_ln19_fu_299_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln16_reg_532 <= icmp_ln16_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                weightsT_10_reg_568 <= weightsT_fu_92;
                weightsT_11_reg_573 <= weightsT_2_fu_96;
                weightsT_12_reg_578 <= weightsT_4_fu_100;
                weightsT_13_reg_583 <= weightsT_6_fu_104;
                weightsT_14_reg_588 <= weightsT_8_fu_108;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln16_1_reg_541 = ap_const_lv1_1) and (icmp_ln16_reg_532 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                weightsT_1_fu_76 <= weightsT_25_fu_411_p3;
                weightsT_3_fu_80 <= weightsT_24_fu_404_p3;
                weightsT_5_fu_84 <= weightsT_23_fu_397_p3;
                weightsT_7_fu_88 <= weightsT_22_fu_389_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln16_reg_532 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (i_reg_528 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                weightsT_2_fu_96 <= weights_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln16_reg_532 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (i_reg_528 = ap_const_lv4_4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                weightsT_4_fu_100 <= weights_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln16_reg_532 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (i_reg_528 = ap_const_lv4_6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                weightsT_6_fu_104 <= weights_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_reg_528 = ap_const_lv4_6)) and not((i_reg_528 = ap_const_lv4_4)) and not((i_reg_528 = ap_const_lv4_2)) and not((i_reg_528 = ap_const_lv4_0)) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln16_reg_532 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                weightsT_8_fu_108 <= weights_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln16_reg_532 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (i_reg_528 = ap_const_lv4_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                weightsT_fu_92 <= weights_q1;
            end if;
        end if;
    end process;
    ap_exit_tran_regpp0(1) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_exit_tran_regpp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_exit_tran_regpp0 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_exit_tran_regpp0 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln16_fu_317_p2 <= std_logic_vector(unsigned(i_1_fu_72) + unsigned(ap_const_lv4_2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln16_fu_271_p2, ap_block_pp0_stage0_subdone, ap_predicate_tran3to4_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((icmp_ln16_fu_271_p2 = ap_const_lv1_0) or (ap_predicate_tran3to4_state2 = ap_const_boolean_1)))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_UnifiedRetVal_phi_fu_239_p4_assign_proc : process(icmp_ln16_reg_532, UnifiedRetVal_reg_235, ap_CS_fsm_state5)
    begin
        if (((icmp_ln16_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_239_p4 <= ap_const_lv1_1;
        else 
            ap_phi_mux_UnifiedRetVal_phi_fu_239_p4 <= UnifiedRetVal_reg_235;
        end if; 
    end process;


    ap_predicate_tran3to4_state2_assign_proc : process(icmp_ln16_fu_271_p2, icmp_ln16_1_fu_293_p2)
    begin
                ap_predicate_tran3to4_state2 <= ((icmp_ln16_1_fu_293_p2 = ap_const_lv1_0) and (icmp_ln16_fu_271_p2 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_UnifiedRetVal_phi_fu_239_p4, ap_CS_fsm_state5, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_return <= ap_phi_mux_UnifiedRetVal_phi_fu_239_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    icmp_ln16_1_fu_293_p2 <= "1" when (unsigned(or_ln16_fu_282_p2) < unsigned(ap_const_lv4_9)) else "0";
    icmp_ln16_fu_271_p2 <= "1" when (unsigned(i_1_fu_72) < unsigned(ap_const_lv4_9)) else "0";
    icmp_ln19_1_fu_305_p2 <= "1" when (i_1_fu_72 = ap_const_lv4_2) else "0";
    icmp_ln19_2_fu_311_p2 <= "1" when (i_1_fu_72 = ap_const_lv4_4) else "0";
    icmp_ln19_fu_299_p2 <= "1" when (i_1_fu_72 = ap_const_lv4_0) else "0";
    or_ln16_fu_282_p2 <= (i_1_fu_72 or ap_const_lv4_1);
    or_ln19_1_fu_384_p2 <= (or_ln19_fu_380_p2 or icmp_ln19_reg_550);
    or_ln19_fu_380_p2 <= (icmp_ln19_2_reg_562 or icmp_ln19_1_reg_556);
    weightsT_10_out <= weightsT_fu_92;

    weightsT_10_out_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weightsT_10_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_10_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_11_out <= weightsT_2_fu_96;

    weightsT_11_out_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weightsT_11_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_12_out <= weightsT_4_fu_100;

    weightsT_12_out_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weightsT_12_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_12_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_13_out <= weightsT_6_fu_104;

    weightsT_13_out_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weightsT_13_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_13_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_14_out <= weightsT_8_fu_108;

    weightsT_14_out_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weightsT_14_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_14_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_1_out <= weightsT_1_fu_76;

    weightsT_1_out_ap_vld_assign_proc : process(icmp_ln16_reg_532, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln16_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            weightsT_1_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_22_fu_389_p3 <= 
        weightsT_7_fu_88 when (or_ln19_1_fu_384_p2(0) = '1') else 
        weights_q0;
    weightsT_23_fu_397_p3 <= 
        weights_q0 when (icmp_ln19_2_reg_562(0) = '1') else 
        weightsT_5_fu_84;
    weightsT_24_fu_404_p3 <= 
        weights_q0 when (icmp_ln19_1_reg_556(0) = '1') else 
        weightsT_3_fu_80;
    weightsT_25_fu_411_p3 <= 
        weights_q0 when (icmp_ln19_reg_550(0) = '1') else 
        weightsT_1_fu_76;
    weightsT_2_out <= weightsT_11_reg_573;

    weightsT_2_out_ap_vld_assign_proc : process(icmp_ln16_reg_532, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln16_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            weightsT_2_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_3_out <= weightsT_3_fu_80;

    weightsT_3_out_ap_vld_assign_proc : process(icmp_ln16_reg_532, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln16_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            weightsT_3_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_4_out <= weightsT_12_reg_578;

    weightsT_4_out_ap_vld_assign_proc : process(icmp_ln16_reg_532, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln16_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            weightsT_4_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_5_out <= weightsT_5_fu_84;

    weightsT_5_out_ap_vld_assign_proc : process(icmp_ln16_reg_532, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln16_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            weightsT_5_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_6_out <= weightsT_13_reg_583;

    weightsT_6_out_ap_vld_assign_proc : process(icmp_ln16_reg_532, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln16_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            weightsT_6_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_7_out <= weightsT_7_fu_88;

    weightsT_7_out_ap_vld_assign_proc : process(icmp_ln16_reg_532, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln16_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            weightsT_7_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_8_out <= weightsT_14_reg_588;

    weightsT_8_out_ap_vld_assign_proc : process(icmp_ln16_reg_532, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln16_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            weightsT_8_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weightsT_out <= weightsT_10_reg_568;

    weightsT_out_ap_vld_assign_proc : process(icmp_ln16_reg_532, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln16_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            weightsT_out_ap_vld <= ap_const_logic_1;
        else 
            weightsT_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    weights_address0 <= zext_ln16_1_fu_288_p1(4 - 1 downto 0);
    weights_address1 <= zext_ln16_fu_277_p1(4 - 1 downto 0);

    weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weights_ce0 <= ap_const_logic_1;
        else 
            weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weights_ce1 <= ap_const_logic_1;
        else 
            weights_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln16_1_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln16_fu_282_p2),64));
    zext_ln16_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_72),64));
end behav;
