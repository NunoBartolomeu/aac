// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module conv2D0_conv2D0_Pipeline_readweights (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weights_address0,
        weights_ce0,
        weights_q0,
        weights_address1,
        weights_ce1,
        weights_q1,
        weightsT_8_out,
        weightsT_8_out_ap_vld,
        weightsT_7_out,
        weightsT_7_out_ap_vld,
        weightsT_6_out,
        weightsT_6_out_ap_vld,
        weightsT_5_out,
        weightsT_5_out_ap_vld,
        weightsT_4_out,
        weightsT_4_out_ap_vld,
        weightsT_3_out,
        weightsT_3_out_ap_vld,
        weightsT_2_out,
        weightsT_2_out_ap_vld,
        weightsT_1_out,
        weightsT_1_out_ap_vld,
        weightsT_out,
        weightsT_out_ap_vld,
        weightsT_14_out,
        weightsT_14_out_ap_vld,
        weightsT_13_out,
        weightsT_13_out_ap_vld,
        weightsT_12_out,
        weightsT_12_out_ap_vld,
        weightsT_11_out,
        weightsT_11_out_ap_vld,
        weightsT_10_out,
        weightsT_10_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_state4 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] weights_address0;
output   weights_ce0;
input  [7:0] weights_q0;
output  [3:0] weights_address1;
output   weights_ce1;
input  [7:0] weights_q1;
output  [7:0] weightsT_8_out;
output   weightsT_8_out_ap_vld;
output  [7:0] weightsT_7_out;
output   weightsT_7_out_ap_vld;
output  [7:0] weightsT_6_out;
output   weightsT_6_out_ap_vld;
output  [7:0] weightsT_5_out;
output   weightsT_5_out_ap_vld;
output  [7:0] weightsT_4_out;
output   weightsT_4_out_ap_vld;
output  [7:0] weightsT_3_out;
output   weightsT_3_out_ap_vld;
output  [7:0] weightsT_2_out;
output   weightsT_2_out_ap_vld;
output  [7:0] weightsT_1_out;
output   weightsT_1_out_ap_vld;
output  [7:0] weightsT_out;
output   weightsT_out_ap_vld;
output  [7:0] weightsT_14_out;
output   weightsT_14_out_ap_vld;
output  [7:0] weightsT_13_out;
output   weightsT_13_out_ap_vld;
output  [7:0] weightsT_12_out;
output   weightsT_12_out_ap_vld;
output  [7:0] weightsT_11_out;
output   weightsT_11_out_ap_vld;
output  [7:0] weightsT_10_out;
output   weightsT_10_out_ap_vld;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weights_ce0;
reg weights_ce1;
reg weightsT_8_out_ap_vld;
reg weightsT_7_out_ap_vld;
reg weightsT_6_out_ap_vld;
reg weightsT_5_out_ap_vld;
reg weightsT_4_out_ap_vld;
reg weightsT_3_out_ap_vld;
reg weightsT_2_out_ap_vld;
reg weightsT_1_out_ap_vld;
reg weightsT_out_ap_vld;
reg weightsT_14_out_ap_vld;
reg weightsT_13_out_ap_vld;
reg weightsT_12_out_ap_vld;
reg weightsT_11_out_ap_vld;
reg weightsT_10_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] i_reg_528;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln16_fu_271_p2;
reg   [0:0] icmp_ln16_reg_532;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln16_1_fu_293_p2;
reg   [0:0] icmp_ln16_1_reg_541;
wire   [0:0] icmp_ln19_fu_299_p2;
reg   [0:0] icmp_ln19_reg_550;
wire   [0:0] icmp_ln19_1_fu_305_p2;
reg   [0:0] icmp_ln19_1_reg_556;
wire   [0:0] icmp_ln19_2_fu_311_p2;
reg   [0:0] icmp_ln19_2_reg_562;
reg   [7:0] weightsT_10_reg_568;
reg    ap_enable_reg_pp0_iter1;
reg   [7:0] weightsT_11_reg_573;
reg   [7:0] weightsT_12_reg_578;
reg   [7:0] weightsT_13_reg_583;
reg   [7:0] weightsT_14_reg_588;
wire    ap_block_pp0_stage0_subdone;
reg    ap_predicate_tran3to4_state2;
reg    ap_condition_pp0_flush_enable;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_239_p4;
reg   [0:0] UnifiedRetVal_reg_235;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln16_fu_277_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln16_1_fu_288_p1;
reg   [3:0] i_1_fu_72;
wire   [3:0] add_ln16_fu_317_p2;
reg   [7:0] weightsT_1_fu_76;
wire   [7:0] weightsT_25_fu_411_p3;
reg   [7:0] weightsT_3_fu_80;
wire   [7:0] weightsT_24_fu_404_p3;
reg   [7:0] weightsT_5_fu_84;
wire   [7:0] weightsT_23_fu_397_p3;
reg   [7:0] weightsT_7_fu_88;
wire   [7:0] weightsT_22_fu_389_p3;
reg   [7:0] weightsT_fu_92;
reg   [7:0] weightsT_2_fu_96;
reg   [7:0] weightsT_4_fu_100;
reg   [7:0] weightsT_6_fu_104;
reg   [7:0] weightsT_8_fu_108;
wire   [3:0] or_ln16_fu_282_p2;
wire   [0:0] or_ln19_fu_380_p2;
wire   [0:0] or_ln19_1_fu_384_p2;
reg   [0:0] ap_return_preg;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg   [1:0] ap_exit_tran_regpp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i_1_fu_72 = 4'd0;
#0 weightsT_1_fu_76 = 8'd0;
#0 weightsT_3_fu_80 = 8'd0;
#0 weightsT_5_fu_84 = 8'd0;
#0 weightsT_7_fu_88 = 8'd0;
#0 weightsT_fu_92 = 8'd0;
#0 weightsT_2_fu_96 = 8'd0;
#0 weightsT_4_fu_100 = 8'd0;
#0 weightsT_6_fu_104 = 8'd0;
#0 weightsT_8_fu_108 = 8'd0;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_239_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        UnifiedRetVal_reg_235 <= 1'd0;
    end else if (((icmp_ln16_reg_532 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        UnifiedRetVal_reg_235 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        if ((icmp_ln16_fu_271_p2 == 1'd0)) begin
                        ap_exit_tran_regpp0[0] <= 1'b1;
        end else if ((ap_predicate_tran3to4_state2 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_1_fu_72 <= 4'd0;
    end else if (((icmp_ln16_1_fu_293_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln16_fu_271_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_fu_72 <= add_ln16_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_528 <= i_1_fu_72;
        icmp_ln16_1_reg_541 <= icmp_ln16_1_fu_293_p2;
        icmp_ln19_1_reg_556 <= icmp_ln19_1_fu_305_p2;
        icmp_ln19_2_reg_562 <= icmp_ln19_2_fu_311_p2;
        icmp_ln19_reg_550 <= icmp_ln19_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln16_reg_532 <= icmp_ln16_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weightsT_10_reg_568 <= weightsT_fu_92;
        weightsT_11_reg_573 <= weightsT_2_fu_96;
        weightsT_12_reg_578 <= weightsT_4_fu_100;
        weightsT_13_reg_583 <= weightsT_6_fu_104;
        weightsT_14_reg_588 <= weightsT_8_fu_108;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln16_1_reg_541 == 1'd1) & (icmp_ln16_reg_532 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weightsT_1_fu_76 <= weightsT_25_fu_411_p3;
        weightsT_3_fu_80 <= weightsT_24_fu_404_p3;
        weightsT_5_fu_84 <= weightsT_23_fu_397_p3;
        weightsT_7_fu_88 <= weightsT_22_fu_389_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln16_reg_532 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (i_reg_528 == 4'd2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weightsT_2_fu_96 <= weights_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln16_reg_532 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (i_reg_528 == 4'd4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weightsT_4_fu_100 <= weights_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln16_reg_532 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (i_reg_528 == 4'd6) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weightsT_6_fu_104 <= weights_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_reg_528 == 4'd6) & ~(i_reg_528 == 4'd4) & ~(i_reg_528 == 4'd2) & ~(i_reg_528 == 4'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln16_reg_532 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weightsT_8_fu_108 <= weights_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln16_reg_532 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (i_reg_528 == 4'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weightsT_fu_92 <= weights_q1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((icmp_ln16_fu_271_p2 == 1'd0) | (ap_predicate_tran3to4_state2 == 1'b1)))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_reg_532 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_239_p4 = 1'd1;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_239_p4 = UnifiedRetVal_reg_235;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_239_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weightsT_10_out_ap_vld = 1'b1;
    end else begin
        weightsT_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weightsT_11_out_ap_vld = 1'b1;
    end else begin
        weightsT_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weightsT_12_out_ap_vld = 1'b1;
    end else begin
        weightsT_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weightsT_13_out_ap_vld = 1'b1;
    end else begin
        weightsT_13_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weightsT_14_out_ap_vld = 1'b1;
    end else begin
        weightsT_14_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln16_reg_532 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        weightsT_1_out_ap_vld = 1'b1;
    end else begin
        weightsT_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln16_reg_532 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        weightsT_2_out_ap_vld = 1'b1;
    end else begin
        weightsT_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln16_reg_532 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        weightsT_3_out_ap_vld = 1'b1;
    end else begin
        weightsT_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln16_reg_532 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        weightsT_4_out_ap_vld = 1'b1;
    end else begin
        weightsT_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln16_reg_532 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        weightsT_5_out_ap_vld = 1'b1;
    end else begin
        weightsT_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln16_reg_532 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        weightsT_6_out_ap_vld = 1'b1;
    end else begin
        weightsT_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln16_reg_532 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        weightsT_7_out_ap_vld = 1'b1;
    end else begin
        weightsT_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln16_reg_532 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        weightsT_8_out_ap_vld = 1'b1;
    end else begin
        weightsT_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln16_reg_532 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        weightsT_out_ap_vld = 1'b1;
    end else begin
        weightsT_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_ce0 = 1'b1;
    end else begin
        weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_ce1 = 1'b1;
    end else begin
        weights_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_exit_tran_regpp0 == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_exit_tran_regpp0 == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln16_fu_317_p2 = (i_1_fu_72 + 4'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran3to4_state2 = ((icmp_ln16_1_fu_293_p2 == 1'd0) & (icmp_ln16_fu_271_p2 == 1'd1));
end

assign icmp_ln16_1_fu_293_p2 = ((or_ln16_fu_282_p2 < 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_271_p2 = ((i_1_fu_72 < 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln19_1_fu_305_p2 = ((i_1_fu_72 == 4'd2) ? 1'b1 : 1'b0);

assign icmp_ln19_2_fu_311_p2 = ((i_1_fu_72 == 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_299_p2 = ((i_1_fu_72 == 4'd0) ? 1'b1 : 1'b0);

assign or_ln16_fu_282_p2 = (i_1_fu_72 | 4'd1);

assign or_ln19_1_fu_384_p2 = (or_ln19_fu_380_p2 | icmp_ln19_reg_550);

assign or_ln19_fu_380_p2 = (icmp_ln19_2_reg_562 | icmp_ln19_1_reg_556);

assign weightsT_10_out = weightsT_fu_92;

assign weightsT_11_out = weightsT_2_fu_96;

assign weightsT_12_out = weightsT_4_fu_100;

assign weightsT_13_out = weightsT_6_fu_104;

assign weightsT_14_out = weightsT_8_fu_108;

assign weightsT_1_out = weightsT_1_fu_76;

assign weightsT_22_fu_389_p3 = ((or_ln19_1_fu_384_p2[0:0] == 1'b1) ? weightsT_7_fu_88 : weights_q0);

assign weightsT_23_fu_397_p3 = ((icmp_ln19_2_reg_562[0:0] == 1'b1) ? weights_q0 : weightsT_5_fu_84);

assign weightsT_24_fu_404_p3 = ((icmp_ln19_1_reg_556[0:0] == 1'b1) ? weights_q0 : weightsT_3_fu_80);

assign weightsT_25_fu_411_p3 = ((icmp_ln19_reg_550[0:0] == 1'b1) ? weights_q0 : weightsT_1_fu_76);

assign weightsT_2_out = weightsT_11_reg_573;

assign weightsT_3_out = weightsT_3_fu_80;

assign weightsT_4_out = weightsT_12_reg_578;

assign weightsT_5_out = weightsT_5_fu_84;

assign weightsT_6_out = weightsT_13_reg_583;

assign weightsT_7_out = weightsT_7_fu_88;

assign weightsT_8_out = weightsT_14_reg_588;

assign weightsT_out = weightsT_10_reg_568;

assign weights_address0 = zext_ln16_1_fu_288_p1;

assign weights_address1 = zext_ln16_fu_277_p1;

assign zext_ln16_1_fu_288_p1 = or_ln16_fu_282_p2;

assign zext_ln16_fu_277_p1 = i_1_fu_72;

always @ (posedge ap_clk) begin
    ap_exit_tran_regpp0[1] <= 1'b0;
end

endmodule //conv2D0_conv2D0_Pipeline_readweights
