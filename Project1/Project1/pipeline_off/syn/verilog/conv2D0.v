// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv2D0_conv2D0,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.644000,HLS_SYN_LAT=274,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=123,HLS_SYN_LUT=403,HLS_VERSION=2023_2}" *)

module conv2D0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_in_address0,
        img_in_ce0,
        img_in_q0,
        img_out_address0,
        img_out_ce0,
        img_out_we0,
        img_out_d0,
        weights_address0,
        weights_ce0,
        weights_q0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] img_in_address0;
output   img_in_ce0;
input  [7:0] img_in_q0;
output  [1:0] img_out_address0;
output   img_out_ce0;
output   img_out_we0;
output  [7:0] img_out_d0;
output  [3:0] weights_address0;
output   weights_ce0;
input  [7:0] weights_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_in_ce0;
reg img_out_ce0;
reg img_out_we0;
reg weights_ce0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] zext_ln13_fu_287_p1;
reg   [63:0] zext_ln13_reg_560;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln16_fu_317_p1;
reg   [63:0] zext_ln16_reg_580;
wire    ap_CS_fsm_state4;
wire   [1:0] add_ln20_fu_341_p2;
reg   [1:0] add_ln20_reg_624;
wire    ap_CS_fsm_state6;
wire   [0:0] empty_fu_347_p1;
reg   [0:0] empty_reg_629;
wire   [1:0] zext_ln34_fu_351_p1;
reg   [1:0] zext_ln34_reg_634;
wire   [1:0] add_ln22_fu_366_p2;
reg   [1:0] add_ln22_reg_649;
wire    ap_CS_fsm_state7;
wire   [1:0] add_ln25_fu_382_p2;
reg   [1:0] add_ln25_reg_657;
wire    ap_CS_fsm_state8;
wire   [3:0] empty_12_fu_400_p2;
reg   [3:0] empty_12_reg_662;
wire   [1:0] empty_13_fu_406_p2;
reg   [1:0] empty_13_reg_667;
wire   [1:0] add_ln27_fu_448_p2;
reg   [1:0] add_ln27_reg_678;
wire    ap_CS_fsm_state9;
wire  signed [7:0] weightsT_q0;
wire    ap_CS_fsm_state10;
wire  signed [7:0] img_inT_q0;
wire   [7:0] grp_fu_542_p3;
wire    ap_CS_fsm_state13;
reg   [3:0] img_inT_address0;
reg    img_inT_ce0;
reg    img_inT_we0;
reg   [3:0] weightsT_address0;
reg    weightsT_ce0;
reg    weightsT_we0;
reg   [1:0] ocol_reg_209;
wire   [0:0] icmp_ln20_fu_335_p2;
wire   [0:0] icmp_ln25_fu_376_p2;
reg   [1:0] krow_reg_221;
wire   [0:0] icmp_ln27_fu_442_p2;
wire   [0:0] icmp_ln22_fu_360_p2;
reg   [7:0] img_outT_0_reg_232;
reg   [1:0] kcol_reg_244;
reg   [7:0] acc_1_reg_255;
wire   [0:0] icmp_ln13_fu_275_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln16_fu_305_p2;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln30_fu_463_p1;
wire   [63:0] zext_ln31_fu_481_p1;
wire   [63:0] zext_ln38_fu_513_p1;
wire    ap_CS_fsm_state14;
wire   [0:0] icmp_ln38_fu_489_p2;
reg   [4:0] i_fu_90;
wire   [4:0] add_ln13_fu_281_p2;
reg   [3:0] i_1_fu_102;
wire   [3:0] add_ln16_fu_311_p2;
reg   [1:0] orow_fu_106;
reg   [7:0] img_outT_0_01_fu_110;
wire   [1:0] add_ln_fu_415_p3;
reg   [7:0] img_outT_1_02_fu_114;
reg   [7:0] img_outT_2_03_fu_118;
reg   [7:0] img_outT_3_04_fu_122;
reg   [2:0] i_2_fu_126;
wire   [2:0] add_ln38_fu_495_p2;
wire   [7:0] tmp_1_fu_522_p6;
wire   [3:0] p_shl_fu_392_p3;
wire   [3:0] zext_ln34_1_fu_388_p1;
wire   [0:0] trunc_ln34_fu_411_p1;
wire   [3:0] zext_ln27_fu_454_p1;
wire   [3:0] add_ln29_fu_458_p2;
wire   [1:0] add_ln30_fu_468_p2;
wire   [3:0] add_ln30_1_fu_474_p3;
wire   [1:0] tmp_1_fu_522_p5;
wire    ap_CS_fsm_state12;
reg   [13:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 i_fu_90 = 5'd0;
#0 i_1_fu_102 = 4'd0;
#0 orow_fu_106 = 2'd0;
#0 img_outT_0_01_fu_110 = 8'd0;
#0 img_outT_1_02_fu_114 = 8'd0;
#0 img_outT_2_03_fu_118 = 8'd0;
#0 img_outT_3_04_fu_122 = 8'd0;
#0 i_2_fu_126 = 3'd0;
end

conv2D0_img_inT_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
img_inT_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(img_inT_address0),
    .ce0(img_inT_ce0),
    .we0(img_inT_we0),
    .d0(img_in_q0),
    .q0(img_inT_q0)
);

conv2D0_weightsT_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
weightsT_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weightsT_address0),
    .ce0(weightsT_ce0),
    .we0(weightsT_we0),
    .d0(weights_q0),
    .q0(weightsT_q0)
);

conv2D0_mux_4_2_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_4_2_8_1_1_U1(
    .din0(img_outT_0_01_fu_110),
    .din1(img_outT_1_02_fu_114),
    .din2(img_outT_2_03_fu_118),
    .din3(img_outT_3_04_fu_122),
    .din4(tmp_1_fu_522_p5),
    .dout(tmp_1_fu_522_p6)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(img_inT_q0),
    .din1(weightsT_q0),
    .din2(acc_1_reg_255),
    .ce(1'b1),
    .dout(grp_fu_542_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln25_fu_376_p2 == 1'd0))) begin
        acc_1_reg_255 <= img_outT_0_reg_232;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        acc_1_reg_255 <= grp_fu_542_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_275_p2 == 1'd1))) begin
        i_1_fu_102 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_305_p2 == 1'd0))) begin
        i_1_fu_102 <= add_ln16_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln20_fu_335_p2 == 1'd1))) begin
        i_2_fu_126 <= 3'd0;
    end else if (((icmp_ln38_fu_489_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        i_2_fu_126 <= add_ln38_fu_495_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_90 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_275_p2 == 1'd0))) begin
        i_fu_90 <= add_ln13_fu_281_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln22_fu_360_p2 == 1'd0))) begin
        img_outT_0_reg_232 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln27_fu_442_p2 == 1'd1))) begin
        img_outT_0_reg_232 <= acc_1_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln25_fu_376_p2 == 1'd0))) begin
        kcol_reg_244 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        kcol_reg_244 <= add_ln27_reg_678;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln22_fu_360_p2 == 1'd0))) begin
        krow_reg_221 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln27_fu_442_p2 == 1'd1))) begin
        krow_reg_221 <= add_ln25_reg_657;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln25_fu_376_p2 == 1'd1))) begin
        ocol_reg_209 <= add_ln22_reg_649;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln20_fu_335_p2 == 1'd0))) begin
        ocol_reg_209 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_305_p2 == 1'd1))) begin
        orow_fu_106 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln22_fu_360_p2 == 1'd1))) begin
        orow_fu_106 <= add_ln20_reg_624;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln20_reg_624 <= add_ln20_fu_341_p2;
        empty_reg_629 <= empty_fu_347_p1;
        zext_ln34_reg_634[0] <= zext_ln34_fu_351_p1[0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln22_reg_649 <= add_ln22_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln25_reg_657 <= add_ln25_fu_382_p2;
        empty_12_reg_662 <= empty_12_fu_400_p2;
        empty_13_reg_667 <= empty_13_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln27_reg_678 <= add_ln27_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln25_fu_376_p2 == 1'd1) & (2'd0 == add_ln_fu_415_p3))) begin
        img_outT_0_01_fu_110 <= img_outT_0_reg_232;
    end
end

always @ (posedge ap_clk) begin
    if (((2'd1 == add_ln_fu_415_p3) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln25_fu_376_p2 == 1'd1))) begin
        img_outT_1_02_fu_114 <= img_outT_0_reg_232;
    end
end

always @ (posedge ap_clk) begin
    if (((2'd2 == add_ln_fu_415_p3) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln25_fu_376_p2 == 1'd1))) begin
        img_outT_2_03_fu_118 <= img_outT_0_reg_232;
    end
end

always @ (posedge ap_clk) begin
    if (((2'd3 == add_ln_fu_415_p3) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln25_fu_376_p2 == 1'd1))) begin
        img_outT_3_04_fu_122 <= img_outT_0_reg_232;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        zext_ln13_reg_560[4 : 0] <= zext_ln13_fu_287_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        zext_ln16_reg_580[3 : 0] <= zext_ln16_fu_317_p1[3 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln38_fu_489_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_fu_489_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        img_inT_address0 = zext_ln31_fu_481_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        img_inT_address0 = zext_ln13_reg_560;
    end else begin
        img_inT_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9))) begin
        img_inT_ce0 = 1'b1;
    end else begin
        img_inT_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        img_inT_we0 = 1'b1;
    end else begin
        img_inT_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_in_ce0 = 1'b1;
    end else begin
        img_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        img_out_ce0 = 1'b1;
    end else begin
        img_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_fu_489_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        img_out_we0 = 1'b1;
    end else begin
        img_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        weightsT_address0 = zext_ln30_fu_463_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        weightsT_address0 = zext_ln16_reg_580;
    end else begin
        weightsT_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state9))) begin
        weightsT_ce0 = 1'b1;
    end else begin
        weightsT_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weightsT_we0 = 1'b1;
    end else begin
        weightsT_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weights_ce0 = 1'b1;
    end else begin
        weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_275_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_305_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln20_fu_335_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln22_fu_360_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln25_fu_376_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln27_fu_442_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state14 : begin
            if (((icmp_ln38_fu_489_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_281_p2 = (i_fu_90 + 5'd1);

assign add_ln16_fu_311_p2 = (i_1_fu_102 + 4'd1);

assign add_ln20_fu_341_p2 = (orow_fu_106 + 2'd1);

assign add_ln22_fu_366_p2 = (ocol_reg_209 + 2'd1);

assign add_ln25_fu_382_p2 = (krow_reg_221 + 2'd1);

assign add_ln27_fu_448_p2 = (kcol_reg_244 + 2'd1);

assign add_ln29_fu_458_p2 = (zext_ln27_fu_454_p1 + empty_12_reg_662);

assign add_ln30_1_fu_474_p3 = {{empty_13_reg_667}, {add_ln30_fu_468_p2}};

assign add_ln30_fu_468_p2 = (ocol_reg_209 + kcol_reg_244);

assign add_ln38_fu_495_p2 = (i_2_fu_126 + 3'd1);

assign add_ln_fu_415_p3 = {{empty_reg_629}, {trunc_ln34_fu_411_p1}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign empty_12_fu_400_p2 = (p_shl_fu_392_p3 - zext_ln34_1_fu_388_p1);

assign empty_13_fu_406_p2 = (krow_reg_221 + zext_ln34_reg_634);

assign empty_fu_347_p1 = orow_fu_106[0:0];

assign icmp_ln13_fu_275_p2 = ((i_fu_90 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_305_p2 = ((i_1_fu_102 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_335_p2 = ((orow_fu_106 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_360_p2 = ((ocol_reg_209 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_376_p2 = ((krow_reg_221 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_442_p2 = ((kcol_reg_244 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_489_p2 = ((i_2_fu_126 == 3'd4) ? 1'b1 : 1'b0);

assign img_in_address0 = zext_ln13_fu_287_p1;

assign img_out_address0 = zext_ln38_fu_513_p1;

assign img_out_d0 = tmp_1_fu_522_p6;

assign p_shl_fu_392_p3 = {{krow_reg_221}, {2'd0}};

assign tmp_1_fu_522_p5 = i_2_fu_126[1:0];

assign trunc_ln34_fu_411_p1 = ocol_reg_209[0:0];

assign weights_address0 = zext_ln16_fu_317_p1;

assign zext_ln13_fu_287_p1 = i_fu_90;

assign zext_ln16_fu_317_p1 = i_1_fu_102;

assign zext_ln27_fu_454_p1 = kcol_reg_244;

assign zext_ln30_fu_463_p1 = add_ln29_fu_458_p2;

assign zext_ln31_fu_481_p1 = add_ln30_1_fu_474_p3;

assign zext_ln34_1_fu_388_p1 = krow_reg_221;

assign zext_ln34_fu_351_p1 = empty_fu_347_p1;

assign zext_ln38_fu_513_p1 = i_2_fu_126;

always @ (posedge ap_clk) begin
    zext_ln13_reg_560[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln16_reg_580[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln34_reg_634[1] <= 1'b0;
end

endmodule //conv2D0
