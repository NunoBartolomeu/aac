// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv2D0_conv2D0,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.270000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=38,HLS_SYN_LUT=817,HLS_VERSION=2023_2}" *)

module conv2D0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_in_0,
        img_in_1,
        img_in_2,
        img_in_3,
        img_in_4,
        img_in_5,
        img_in_6,
        img_in_7,
        img_in_8,
        img_in_9,
        img_in_10,
        img_in_11,
        img_in_12,
        img_in_13,
        img_in_14,
        img_in_15,
        img_out_0,
        img_out_0_ap_vld,
        img_out_1,
        img_out_1_ap_vld,
        img_out_2,
        img_out_2_ap_vld,
        img_out_3,
        img_out_3_ap_vld,
        weights_0,
        weights_1,
        weights_2,
        weights_3,
        weights_4,
        weights_5,
        weights_6,
        weights_7,
        weights_8
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] img_in_0;
input  [7:0] img_in_1;
input  [7:0] img_in_2;
input  [7:0] img_in_3;
input  [7:0] img_in_4;
input  [7:0] img_in_5;
input  [7:0] img_in_6;
input  [7:0] img_in_7;
input  [7:0] img_in_8;
input  [7:0] img_in_9;
input  [7:0] img_in_10;
input  [7:0] img_in_11;
input  [7:0] img_in_12;
input  [7:0] img_in_13;
input  [7:0] img_in_14;
input  [7:0] img_in_15;
output  [7:0] img_out_0;
output   img_out_0_ap_vld;
output  [7:0] img_out_1;
output   img_out_1_ap_vld;
output  [7:0] img_out_2;
output   img_out_2_ap_vld;
output  [7:0] img_out_3;
output   img_out_3_ap_vld;
input  [7:0] weights_0;
input  [7:0] weights_1;
input  [7:0] weights_2;
input  [7:0] weights_3;
input  [7:0] weights_4;
input  [7:0] weights_5;
input  [7:0] weights_6;
input  [7:0] weights_7;
input  [7:0] weights_8;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_out_0_ap_vld;
reg img_out_1_ap_vld;
reg img_out_2_ap_vld;
reg img_out_3_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [7:0] mul_ln39_6_fu_256_p2;
wire   [7:0] mul_ln39_15_fu_261_p2;
wire   [7:0] mul_ln39_24_fu_266_p2;
wire   [7:0] mul_ln39_33_fu_271_p2;
wire   [7:0] mul_ln39_3_fu_276_p2;
wire    ap_CS_fsm_state4;
wire   [7:0] grp_fu_395_p3;
wire   [7:0] mul_ln39_12_fu_281_p2;
wire   [7:0] grp_fu_403_p3;
wire   [7:0] mul_ln39_21_fu_286_p2;
wire   [7:0] grp_fu_411_p3;
wire   [7:0] mul_ln39_30_fu_291_p2;
wire   [7:0] grp_fu_419_p3;
wire   [7:0] mul_ln39_fu_296_p2;
wire    ap_CS_fsm_state5;
wire   [7:0] mul_ln39_1_fu_301_p2;
(* use_dsp48 = "no" *) wire   [7:0] add_ln39_6_fu_307_p2;
reg   [7:0] add_ln39_6_reg_766;
wire   [7:0] mul_ln39_9_fu_311_p2;
wire   [7:0] mul_ln39_10_fu_317_p2;
(* use_dsp48 = "no" *) wire   [7:0] add_ln39_14_fu_323_p2;
reg   [7:0] add_ln39_14_reg_781;
wire   [7:0] mul_ln39_18_fu_327_p2;
wire   [7:0] mul_ln39_19_fu_332_p2;
(* use_dsp48 = "no" *) wire   [7:0] add_ln39_22_fu_337_p2;
reg   [7:0] add_ln39_22_reg_796;
wire   [7:0] mul_ln39_27_fu_341_p2;
wire   [7:0] mul_ln39_28_fu_346_p2;
(* use_dsp48 = "no" *) wire   [7:0] add_ln39_30_fu_351_p2;
reg   [7:0] add_ln39_30_reg_811;
wire    ap_CS_fsm_state6;
wire  signed [7:0] add_ln39_6_fu_307_p0;
wire   [7:0] grp_fu_436_p3;
wire  signed [7:0] add_ln39_6_fu_307_p1;
wire   [7:0] grp_fu_427_p3;
wire  signed [7:0] add_ln39_14_fu_323_p0;
wire   [7:0] grp_fu_454_p3;
wire  signed [7:0] add_ln39_14_fu_323_p1;
wire   [7:0] grp_fu_445_p3;
wire  signed [7:0] add_ln39_22_fu_337_p0;
wire   [7:0] grp_fu_471_p3;
wire  signed [7:0] add_ln39_22_fu_337_p1;
wire   [7:0] grp_fu_463_p3;
wire  signed [7:0] add_ln39_30_fu_351_p0;
wire   [7:0] grp_fu_488_p3;
wire  signed [7:0] add_ln39_30_fu_351_p1;
wire   [7:0] grp_fu_480_p3;
wire  signed [7:0] add_ln39_2_fu_355_p0;
wire   [7:0] grp_fu_506_p3;
wire  signed [7:0] add_ln39_2_fu_355_p1;
wire   [7:0] grp_fu_497_p3;
(* use_dsp48 = "no" *) wire   [7:0] add_ln39_2_fu_355_p2;
wire  signed [7:0] add_ln39_10_fu_365_p0;
wire   [7:0] grp_fu_524_p3;
wire  signed [7:0] add_ln39_10_fu_365_p1;
wire   [7:0] grp_fu_515_p3;
(* use_dsp48 = "no" *) wire   [7:0] add_ln39_10_fu_365_p2;
wire  signed [7:0] add_ln39_18_fu_375_p0;
wire   [7:0] grp_fu_542_p3;
wire  signed [7:0] add_ln39_18_fu_375_p1;
wire   [7:0] grp_fu_533_p3;
(* use_dsp48 = "no" *) wire   [7:0] add_ln39_18_fu_375_p2;
wire  signed [7:0] add_ln39_26_fu_385_p0;
wire   [7:0] grp_fu_559_p3;
wire  signed [7:0] add_ln39_26_fu_385_p1;
wire   [7:0] grp_fu_550_p3;
(* use_dsp48 = "no" *) wire   [7:0] add_ln39_26_fu_385_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U1(
    .din0(weights_7),
    .din1(img_in_9),
    .dout(mul_ln39_6_fu_256_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U2(
    .din0(weights_7),
    .din1(img_in_10),
    .dout(mul_ln39_15_fu_261_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U3(
    .din0(weights_7),
    .din1(img_in_13),
    .dout(mul_ln39_24_fu_266_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U4(
    .din0(weights_7),
    .din1(img_in_14),
    .dout(mul_ln39_33_fu_271_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U5(
    .din0(weights_4),
    .din1(img_in_5),
    .dout(mul_ln39_3_fu_276_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U6(
    .din0(weights_4),
    .din1(img_in_6),
    .dout(mul_ln39_12_fu_281_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U7(
    .din0(weights_4),
    .din1(img_in_9),
    .dout(mul_ln39_21_fu_286_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U8(
    .din0(weights_4),
    .din1(img_in_10),
    .dout(mul_ln39_30_fu_291_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U9(
    .din0(weights_1),
    .din1(img_in_1),
    .dout(mul_ln39_fu_296_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U10(
    .din0(weights_2),
    .din1(img_in_2),
    .dout(mul_ln39_1_fu_301_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U11(
    .din0(weights_1),
    .din1(img_in_2),
    .dout(mul_ln39_9_fu_311_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U12(
    .din0(weights_2),
    .din1(img_in_3),
    .dout(mul_ln39_10_fu_317_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U13(
    .din0(weights_1),
    .din1(img_in_5),
    .dout(mul_ln39_18_fu_327_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U14(
    .din0(weights_2),
    .din1(img_in_6),
    .dout(mul_ln39_19_fu_332_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U15(
    .din0(weights_1),
    .din1(img_in_6),
    .dout(mul_ln39_27_fu_341_p2)
);

conv2D0_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U16(
    .din0(weights_2),
    .din1(img_in_7),
    .dout(mul_ln39_28_fu_346_p2)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_8),
    .din1(img_in_10),
    .din2(mul_ln39_6_fu_256_p2),
    .ce(1'b1),
    .dout(grp_fu_395_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_8),
    .din1(img_in_11),
    .din2(mul_ln39_15_fu_261_p2),
    .ce(1'b1),
    .dout(grp_fu_403_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_8),
    .din1(img_in_14),
    .din2(mul_ln39_24_fu_266_p2),
    .ce(1'b1),
    .dout(grp_fu_411_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_8),
    .din1(img_in_15),
    .din2(mul_ln39_33_fu_271_p2),
    .ce(1'b1),
    .dout(grp_fu_419_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_5),
    .din1(img_in_6),
    .din2(mul_ln39_3_fu_276_p2),
    .ce(1'b1),
    .dout(grp_fu_427_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_6),
    .din1(img_in_8),
    .din2(grp_fu_395_p3),
    .ce(1'b1),
    .dout(grp_fu_436_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_5),
    .din1(img_in_7),
    .din2(mul_ln39_12_fu_281_p2),
    .ce(1'b1),
    .dout(grp_fu_445_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_6),
    .din1(img_in_9),
    .din2(grp_fu_403_p3),
    .ce(1'b1),
    .dout(grp_fu_454_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_5),
    .din1(img_in_10),
    .din2(mul_ln39_21_fu_286_p2),
    .ce(1'b1),
    .dout(grp_fu_463_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_6),
    .din1(img_in_12),
    .din2(grp_fu_411_p3),
    .ce(1'b1),
    .dout(grp_fu_471_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_5),
    .din1(img_in_11),
    .din2(mul_ln39_30_fu_291_p2),
    .ce(1'b1),
    .dout(grp_fu_480_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_6),
    .din1(img_in_13),
    .din2(grp_fu_419_p3),
    .ce(1'b1),
    .dout(grp_fu_488_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_0),
    .din1(img_in_0),
    .din2(mul_ln39_fu_296_p2),
    .ce(1'b1),
    .dout(grp_fu_497_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_3),
    .din1(img_in_4),
    .din2(mul_ln39_1_fu_301_p2),
    .ce(1'b1),
    .dout(grp_fu_506_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_0),
    .din1(img_in_1),
    .din2(mul_ln39_9_fu_311_p2),
    .ce(1'b1),
    .dout(grp_fu_515_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_3),
    .din1(img_in_5),
    .din2(mul_ln39_10_fu_317_p2),
    .ce(1'b1),
    .dout(grp_fu_524_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_0),
    .din1(img_in_4),
    .din2(mul_ln39_18_fu_327_p2),
    .ce(1'b1),
    .dout(grp_fu_533_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_3),
    .din1(img_in_8),
    .din2(mul_ln39_19_fu_332_p2),
    .ce(1'b1),
    .dout(grp_fu_542_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_0),
    .din1(img_in_5),
    .din2(mul_ln39_27_fu_341_p2),
    .ce(1'b1),
    .dout(grp_fu_550_p3)
);

conv2D0_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_3),
    .din1(img_in_9),
    .din2(mul_ln39_28_fu_346_p2),
    .ce(1'b1),
    .dout(grp_fu_559_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln39_14_reg_781 <= add_ln39_14_fu_323_p2;
        add_ln39_22_reg_796 <= add_ln39_22_fu_337_p2;
        add_ln39_30_reg_811 <= add_ln39_30_fu_351_p2;
        add_ln39_6_reg_766 <= add_ln39_6_fu_307_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        img_out_0_ap_vld = 1'b1;
    end else begin
        img_out_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        img_out_1_ap_vld = 1'b1;
    end else begin
        img_out_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        img_out_2_ap_vld = 1'b1;
    end else begin
        img_out_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        img_out_3_ap_vld = 1'b1;
    end else begin
        img_out_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln39_10_fu_365_p0 = grp_fu_524_p3;

assign add_ln39_10_fu_365_p1 = grp_fu_515_p3;

assign add_ln39_10_fu_365_p2 = ($signed(add_ln39_10_fu_365_p0) + $signed(add_ln39_10_fu_365_p1));

assign add_ln39_14_fu_323_p0 = grp_fu_454_p3;

assign add_ln39_14_fu_323_p1 = grp_fu_445_p3;

assign add_ln39_14_fu_323_p2 = ($signed(add_ln39_14_fu_323_p0) + $signed(add_ln39_14_fu_323_p1));

assign add_ln39_18_fu_375_p0 = grp_fu_542_p3;

assign add_ln39_18_fu_375_p1 = grp_fu_533_p3;

assign add_ln39_18_fu_375_p2 = ($signed(add_ln39_18_fu_375_p0) + $signed(add_ln39_18_fu_375_p1));

assign add_ln39_22_fu_337_p0 = grp_fu_471_p3;

assign add_ln39_22_fu_337_p1 = grp_fu_463_p3;

assign add_ln39_22_fu_337_p2 = ($signed(add_ln39_22_fu_337_p0) + $signed(add_ln39_22_fu_337_p1));

assign add_ln39_26_fu_385_p0 = grp_fu_559_p3;

assign add_ln39_26_fu_385_p1 = grp_fu_550_p3;

assign add_ln39_26_fu_385_p2 = ($signed(add_ln39_26_fu_385_p0) + $signed(add_ln39_26_fu_385_p1));

assign add_ln39_2_fu_355_p0 = grp_fu_506_p3;

assign add_ln39_2_fu_355_p1 = grp_fu_497_p3;

assign add_ln39_2_fu_355_p2 = ($signed(add_ln39_2_fu_355_p0) + $signed(add_ln39_2_fu_355_p1));

assign add_ln39_30_fu_351_p0 = grp_fu_488_p3;

assign add_ln39_30_fu_351_p1 = grp_fu_480_p3;

assign add_ln39_30_fu_351_p2 = ($signed(add_ln39_30_fu_351_p0) + $signed(add_ln39_30_fu_351_p1));

assign add_ln39_6_fu_307_p0 = grp_fu_436_p3;

assign add_ln39_6_fu_307_p1 = grp_fu_427_p3;

assign add_ln39_6_fu_307_p2 = ($signed(add_ln39_6_fu_307_p0) + $signed(add_ln39_6_fu_307_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign img_out_0 = (add_ln39_6_reg_766 + add_ln39_2_fu_355_p2);

assign img_out_1 = (add_ln39_14_reg_781 + add_ln39_10_fu_365_p2);

assign img_out_2 = (add_ln39_22_reg_796 + add_ln39_18_fu_375_p2);

assign img_out_3 = (add_ln39_30_reg_811 + add_ln39_26_fu_385_p2);

endmodule //conv2D0
