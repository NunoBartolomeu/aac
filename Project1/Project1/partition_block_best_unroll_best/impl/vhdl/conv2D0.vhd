-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2D0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_in_0 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_3 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_4 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_6 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_7 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_8 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_9 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_10 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_11 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_12 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_13 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_14 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_15 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_out_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_out_0_ap_vld : OUT STD_LOGIC;
    img_out_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_out_1_ap_vld : OUT STD_LOGIC;
    img_out_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_out_2_ap_vld : OUT STD_LOGIC;
    img_out_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_out_3_ap_vld : OUT STD_LOGIC;
    weights_0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_3 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_4 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_6 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_7 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_8 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of conv2D0 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2D0_conv2D0,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.270000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=38,HLS_SYN_LUT=817,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal mul_ln39_6_fu_256_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln39_15_fu_261_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln39_24_fu_266_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln39_33_fu_271_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln39_3_fu_276_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_395_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln39_12_fu_281_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_403_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln39_21_fu_286_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_411_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln39_30_fu_291_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_419_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln39_fu_296_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal mul_ln39_1_fu_301_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_6_fu_307_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln39_6_fu_307_p2 : signal is "no";
    signal add_ln39_6_reg_766 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln39_9_fu_311_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln39_10_fu_317_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_14_fu_323_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln39_14_fu_323_p2 : signal is "no";
    signal add_ln39_14_reg_781 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln39_18_fu_327_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln39_19_fu_332_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_22_fu_337_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln39_22_fu_337_p2 : signal is "no";
    signal add_ln39_22_reg_796 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln39_27_fu_341_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln39_28_fu_346_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_30_fu_351_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln39_30_fu_351_p2 : signal is "no";
    signal add_ln39_30_reg_811 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln39_6_fu_307_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_436_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_6_fu_307_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_427_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_14_fu_323_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_454_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_14_fu_323_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_445_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_22_fu_337_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_471_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_22_fu_337_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_463_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_30_fu_351_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_488_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_30_fu_351_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_480_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_2_fu_355_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_506_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_2_fu_355_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_497_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_2_fu_355_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln39_2_fu_355_p2 : signal is "no";
    signal add_ln39_10_fu_365_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_524_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_10_fu_365_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_515_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_10_fu_365_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln39_10_fu_365_p2 : signal is "no";
    signal add_ln39_18_fu_375_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_542_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_18_fu_375_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_533_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_18_fu_375_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln39_18_fu_375_p2 : signal is "no";
    signal add_ln39_26_fu_385_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_559_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_26_fu_385_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_550_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_26_fu_385_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln39_26_fu_385_p2 : signal is "no";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component conv2D0_mul_8s_8s_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv2D0_mac_muladd_8s_8s_8ns_8_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    mul_8s_8s_8_1_1_U1 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_7,
        din1 => img_in_9,
        dout => mul_ln39_6_fu_256_p2);

    mul_8s_8s_8_1_1_U2 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_7,
        din1 => img_in_10,
        dout => mul_ln39_15_fu_261_p2);

    mul_8s_8s_8_1_1_U3 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_7,
        din1 => img_in_13,
        dout => mul_ln39_24_fu_266_p2);

    mul_8s_8s_8_1_1_U4 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_7,
        din1 => img_in_14,
        dout => mul_ln39_33_fu_271_p2);

    mul_8s_8s_8_1_1_U5 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_4,
        din1 => img_in_5,
        dout => mul_ln39_3_fu_276_p2);

    mul_8s_8s_8_1_1_U6 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_4,
        din1 => img_in_6,
        dout => mul_ln39_12_fu_281_p2);

    mul_8s_8s_8_1_1_U7 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_4,
        din1 => img_in_9,
        dout => mul_ln39_21_fu_286_p2);

    mul_8s_8s_8_1_1_U8 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_4,
        din1 => img_in_10,
        dout => mul_ln39_30_fu_291_p2);

    mul_8s_8s_8_1_1_U9 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_1,
        din1 => img_in_1,
        dout => mul_ln39_fu_296_p2);

    mul_8s_8s_8_1_1_U10 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_2,
        din1 => img_in_2,
        dout => mul_ln39_1_fu_301_p2);

    mul_8s_8s_8_1_1_U11 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_1,
        din1 => img_in_2,
        dout => mul_ln39_9_fu_311_p2);

    mul_8s_8s_8_1_1_U12 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_2,
        din1 => img_in_3,
        dout => mul_ln39_10_fu_317_p2);

    mul_8s_8s_8_1_1_U13 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_1,
        din1 => img_in_5,
        dout => mul_ln39_18_fu_327_p2);

    mul_8s_8s_8_1_1_U14 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_2,
        din1 => img_in_6,
        dout => mul_ln39_19_fu_332_p2);

    mul_8s_8s_8_1_1_U15 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_1,
        din1 => img_in_6,
        dout => mul_ln39_27_fu_341_p2);

    mul_8s_8s_8_1_1_U16 : component conv2D0_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weights_2,
        din1 => img_in_7,
        dout => mul_ln39_28_fu_346_p2);

    mac_muladd_8s_8s_8ns_8_4_1_U17 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_8,
        din1 => img_in_10,
        din2 => mul_ln39_6_fu_256_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_395_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U18 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_8,
        din1 => img_in_11,
        din2 => mul_ln39_15_fu_261_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_403_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U19 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_8,
        din1 => img_in_14,
        din2 => mul_ln39_24_fu_266_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_411_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U20 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_8,
        din1 => img_in_15,
        din2 => mul_ln39_33_fu_271_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_419_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U21 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_5,
        din1 => img_in_6,
        din2 => mul_ln39_3_fu_276_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_427_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U22 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_6,
        din1 => img_in_8,
        din2 => grp_fu_395_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_436_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U23 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_5,
        din1 => img_in_7,
        din2 => mul_ln39_12_fu_281_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_445_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U24 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_6,
        din1 => img_in_9,
        din2 => grp_fu_403_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_454_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U25 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_5,
        din1 => img_in_10,
        din2 => mul_ln39_21_fu_286_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_463_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U26 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_6,
        din1 => img_in_12,
        din2 => grp_fu_411_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_471_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U27 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_5,
        din1 => img_in_11,
        din2 => mul_ln39_30_fu_291_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_480_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U28 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_6,
        din1 => img_in_13,
        din2 => grp_fu_419_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_488_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U29 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_0,
        din1 => img_in_0,
        din2 => mul_ln39_fu_296_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_497_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U30 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_3,
        din1 => img_in_4,
        din2 => mul_ln39_1_fu_301_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_506_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U31 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_0,
        din1 => img_in_1,
        din2 => mul_ln39_9_fu_311_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_515_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U32 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_3,
        din1 => img_in_5,
        din2 => mul_ln39_10_fu_317_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_524_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U33 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_0,
        din1 => img_in_4,
        din2 => mul_ln39_18_fu_327_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_533_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U34 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_3,
        din1 => img_in_8,
        din2 => mul_ln39_19_fu_332_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_542_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U35 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_0,
        din1 => img_in_5,
        din2 => mul_ln39_27_fu_341_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_550_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U36 : component conv2D0_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_3,
        din1 => img_in_9,
        din2 => mul_ln39_28_fu_346_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_559_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln39_14_reg_781 <= add_ln39_14_fu_323_p2;
                add_ln39_22_reg_796 <= add_ln39_22_fu_337_p2;
                add_ln39_30_reg_811 <= add_ln39_30_fu_351_p2;
                add_ln39_6_reg_766 <= add_ln39_6_fu_307_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln39_10_fu_365_p0 <= grp_fu_524_p3;
    add_ln39_10_fu_365_p1 <= grp_fu_515_p3;
    add_ln39_10_fu_365_p2 <= std_logic_vector(signed(add_ln39_10_fu_365_p0) + signed(add_ln39_10_fu_365_p1));
    add_ln39_14_fu_323_p0 <= grp_fu_454_p3;
    add_ln39_14_fu_323_p1 <= grp_fu_445_p3;
    add_ln39_14_fu_323_p2 <= std_logic_vector(signed(add_ln39_14_fu_323_p0) + signed(add_ln39_14_fu_323_p1));
    add_ln39_18_fu_375_p0 <= grp_fu_542_p3;
    add_ln39_18_fu_375_p1 <= grp_fu_533_p3;
    add_ln39_18_fu_375_p2 <= std_logic_vector(signed(add_ln39_18_fu_375_p0) + signed(add_ln39_18_fu_375_p1));
    add_ln39_22_fu_337_p0 <= grp_fu_471_p3;
    add_ln39_22_fu_337_p1 <= grp_fu_463_p3;
    add_ln39_22_fu_337_p2 <= std_logic_vector(signed(add_ln39_22_fu_337_p0) + signed(add_ln39_22_fu_337_p1));
    add_ln39_26_fu_385_p0 <= grp_fu_559_p3;
    add_ln39_26_fu_385_p1 <= grp_fu_550_p3;
    add_ln39_26_fu_385_p2 <= std_logic_vector(signed(add_ln39_26_fu_385_p0) + signed(add_ln39_26_fu_385_p1));
    add_ln39_2_fu_355_p0 <= grp_fu_506_p3;
    add_ln39_2_fu_355_p1 <= grp_fu_497_p3;
    add_ln39_2_fu_355_p2 <= std_logic_vector(signed(add_ln39_2_fu_355_p0) + signed(add_ln39_2_fu_355_p1));
    add_ln39_30_fu_351_p0 <= grp_fu_488_p3;
    add_ln39_30_fu_351_p1 <= grp_fu_480_p3;
    add_ln39_30_fu_351_p2 <= std_logic_vector(signed(add_ln39_30_fu_351_p0) + signed(add_ln39_30_fu_351_p1));
    add_ln39_6_fu_307_p0 <= grp_fu_436_p3;
    add_ln39_6_fu_307_p1 <= grp_fu_427_p3;
    add_ln39_6_fu_307_p2 <= std_logic_vector(signed(add_ln39_6_fu_307_p0) + signed(add_ln39_6_fu_307_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    img_out_0 <= std_logic_vector(unsigned(add_ln39_6_reg_766) + unsigned(add_ln39_2_fu_355_p2));

    img_out_0_ap_vld_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            img_out_0_ap_vld <= ap_const_logic_1;
        else 
            img_out_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_out_1 <= std_logic_vector(unsigned(add_ln39_14_reg_781) + unsigned(add_ln39_10_fu_365_p2));

    img_out_1_ap_vld_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            img_out_1_ap_vld <= ap_const_logic_1;
        else 
            img_out_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_out_2 <= std_logic_vector(unsigned(add_ln39_22_reg_796) + unsigned(add_ln39_18_fu_375_p2));

    img_out_2_ap_vld_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            img_out_2_ap_vld <= ap_const_logic_1;
        else 
            img_out_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    img_out_3 <= std_logic_vector(unsigned(add_ln39_30_reg_811) + unsigned(add_ln39_26_fu_385_p2));

    img_out_3_ap_vld_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            img_out_3_ap_vld <= ap_const_logic_1;
        else 
            img_out_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
